%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1505.m00.i125.n045.P.c25.254601262 Bar interior in flat style design.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: ??????? ??????
%%CreationDate: 5/29/2015
%%BoundingBox: 0 0 601 400
%%HiResBoundingBox: 0 0 600 400
%%CropBox: 0 0 600 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1505.m00.i125.n024.S.c12.266457806 Vector isometric factory</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-05-24T13:16:41+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-05-24T13:16:41+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-05-24T13:16:41+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AE+SfKn5i33ka7vY7y/0+&#xA;LikWg2ZvrmCN2V6y0jVgsalAyryFK+A3zXYuIwv5Oxy8AnXzU/y48sfmDqVnrErXOpaPYWyzoge8&#xA;uoA+oMaCsaEE0c1dqH6d6OEyIPQfpXMIAje/1LPy98t/mJfeadQtbqbU9Ns7N2fXbr67cR82CEJR&#xA;kZTMzAChBPw9+lRiMjIjl3rlEBEG77lHy95Z/NGfz+2ltNqEVwojbUdUW+uVjazDVDCcFWcEMeK1&#xA;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&#xA;hiu7/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:a658b4dd-04f4-3043-acec-437be07bfe74</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:a658b4dd-04f4-3043-acec-437be07bfe74</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:38753418-6bb4-0b44-9ad1-b596548cf038</stRef:instanceID>
            <stRef:documentID>xmp.did:38753418-6bb4-0b44-9ad1-b596548cf038</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d016339e-7c47-184f-992b-9230ff59afcb</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:29:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a658b4dd-04f4-3043-acec-437be07bfe74</stEvt:instanceID>
                  <stEvt:when>2015-05-24T13:16:41+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>600.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Áåëûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>×åðíûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
600 400 li
600 0 li
cp
clp
600 400 mo
0 400 li
0 0 li
600 0 li
600 400 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.564706 .419608 .211765 rgb
f
588.114 111 mo
10.114 111 li
10.114 42.3333 li
588.114 42.3333 li
588.114 111 li
cp
.309804 .137255 .00784314 rgb
f
588.333 197 mo
10.3334 197 li
10.3334 119.667 li
588.333 119.667 li
588.333 197 li
f
35.2941 392.081 mo
0 392.081 li
0 213.59 li
35.2941 213.59 li
35.2941 392.081 li
.333333 .156863 .00392157 rgb
f
70.5882 392.081 mo
35.2941 392.081 li
35.2941 213.59 li
70.5882 213.59 li
70.5882 392.081 li
.376471 .164706 .00784314 rgb
f
105.882 392.081 mo
70.5882 392.081 li
70.5882 213.59 li
105.882 213.59 li
105.882 392.081 li
.309804 .137255 .00784314 rgb
f
141.176 392.081 mo
105.882 392.081 li
105.882 213.59 li
141.176 213.59 li
141.176 392.081 li
.376471 .164706 .00784314 rgb
f
176.471 392.081 mo
141.176 392.081 li
141.176 213.59 li
176.471 213.59 li
176.471 392.081 li
.333333 .156863 .00392157 rgb
f
211.765 392.081 mo
176.471 392.081 li
176.471 213.59 li
211.765 213.59 li
211.765 392.081 li
.376471 .164706 .00784314 rgb
f
247.059 392.081 mo
211.765 392.081 li
211.765 213.59 li
247.059 213.59 li
247.059 392.081 li
.309804 .137255 .00784314 rgb
f
282.353 392.081 mo
247.059 392.081 li
247.059 213.59 li
282.353 213.59 li
282.353 392.081 li
.376471 .164706 .00784314 rgb
f
317.647 392.081 mo
282.353 392.081 li
282.353 213.59 li
317.647 213.59 li
317.647 392.081 li
.333333 .156863 .00392157 rgb
f
352.941 392.081 mo
317.647 392.081 li
317.647 213.59 li
352.941 213.59 li
352.941 392.081 li
.376471 .164706 .00784314 rgb
f
388.235 392.081 mo
352.941 392.081 li
352.941 213.59 li
388.235 213.59 li
388.235 392.081 li
.309804 .137255 .00784314 rgb
f
423.529 392.081 mo
388.235 392.081 li
388.235 213.59 li
423.529 213.59 li
423.529 392.081 li
.376471 .164706 .00784314 rgb
f
458.823 392.081 mo
423.529 392.081 li
423.529 213.59 li
458.823 213.59 li
458.823 392.081 li
.333333 .156863 .00392157 rgb
f
494.118 392.081 mo
458.823 392.081 li
458.823 213.59 li
494.118 213.59 li
494.118 392.081 li
.376471 .164706 .00784314 rgb
f
529.412 392.081 mo
494.118 392.081 li
494.118 213.59 li
529.412 213.59 li
529.412 392.081 li
.309804 .137255 .00784314 rgb
f
564.706 392.081 mo
529.412 392.081 li
529.412 213.59 li
564.706 213.59 li
564.706 392.081 li
.376471 .164706 .00784314 rgb
f
600 392.081 mo
564.706 392.081 li
564.706 213.59 li
600 213.59 li
600 392.081 li
.333333 .156863 .00392157 rgb
f
gsave
600 240.5 mo
600 240.5 li
600 219.375 li
600 219.375 li
600 240.5 li
clp
600 219.375 mo
600 219.375 li
600 240.5 li
600 240.5 li
cp
.439216 .329412 .164706 rgb
f
grestore
35.2941 240.5 mo
0 240.5 li
0 213.59 li
0 219.375 li
35.2941 219.375 li
35.2941 240.5 li
.258824 .121569 .00392157 rgb
f
70.5882 240.5 mo
35.2941 240.5 li
35.2941 219.375 li
70.5882 219.375 li
70.5882 240.5 li
.294118 .129412 .00784314 rgb
f
105.882 240.5 mo
70.5882 240.5 li
70.5882 219.375 li
105.882 219.375 li
105.882 240.5 li
.243137 .105882 .00784314 rgb
f
141.176 240.5 mo
105.882 240.5 li
105.882 219.375 li
141.176 219.375 li
141.176 240.5 li
.294118 .129412 .00784314 rgb
f
176.471 240.5 mo
141.176 240.5 li
141.176 219.375 li
176.471 219.375 li
176.471 240.5 li
.258824 .121569 .00392157 rgb
f
211.765 240.5 mo
176.471 240.5 li
176.471 219.375 li
211.765 219.375 li
211.765 240.5 li
.294118 .129412 .00784314 rgb
f
247.059 240.5 mo
211.765 240.5 li
211.765 219.375 li
247.059 219.375 li
247.059 240.5 li
.243137 .105882 .00784314 rgb
f
282.353 240.5 mo
247.059 240.5 li
247.059 219.375 li
282.353 219.375 li
282.353 240.5 li
.294118 .129412 .00784314 rgb
f
317.647 240.5 mo
282.353 240.5 li
282.353 219.375 li
317.647 219.375 li
317.647 240.5 li
.258824 .121569 .00392157 rgb
f
352.941 240.5 mo
317.647 240.5 li
317.647 219.375 li
352.941 219.375 li
352.941 240.5 li
.294118 .129412 .00784314 rgb
f
388.235 240.5 mo
352.941 240.5 li
352.941 219.375 li
388.235 219.375 li
388.235 240.5 li
.243137 .105882 .00784314 rgb
f
423.529 240.5 mo
388.235 240.5 li
388.235 219.375 li
423.529 219.375 li
423.529 240.5 li
.294118 .129412 .00784314 rgb
f
458.823 240.5 mo
423.529 240.5 li
423.529 219.375 li
458.823 219.375 li
458.823 240.5 li
.258824 .121569 .00392157 rgb
f
494.118 240.5 mo
458.823 240.5 li
458.823 219.375 li
494.118 219.375 li
494.118 240.5 li
.294118 .129412 .00784314 rgb
f
529.412 240.5 mo
494.118 240.5 li
494.118 219.375 li
529.412 219.375 li
529.412 240.5 li
.243137 .105882 .00784314 rgb
f
564.706 240.5 mo
529.412 240.5 li
529.412 219.375 li
564.706 219.375 li
564.706 240.5 li
.294118 .129412 .00784314 rgb
f
600 240.5 mo
564.706 240.5 li
564.706 219.375 li
600 219.375 li
600 240.5 li
.258824 .121569 .00392157 rgb
f
600 219.375 mo
0 219.375 li
0 207.59 li
600 207.59 li
600 219.375 li
.0509804 .0156863 0 rgb
f
600 400 mo
1.9e-005 400 li
1.9e-005 388.215 li
600 388.215 li
600 400 li
cp
f
600 16.2857 mo
0 16.2857 li
0 0 li
600 0 li
600 16.2857 li
.376471 .164706 .00784314 rgb
f
502.574 82.5182 mo
502.574 81.3769 502 80.3846 501.155 79.8772 cv
501.177 79.8772 li
500.987 79.7876 li
500.858 79.7267 li
495.66 77.2821 li
495.66 73.1184 li
495.66 72.3404 li
495.66 71.4799 li
495.66 65.6985 li
495.66 64.838 li
495.66 64.0887 li
495.66 59.7258 li
495.66 59.3132 495.585 58.9203 495.449 58.5625 cv
495.903 58.5363 496.261 58.3293 496.261 58.0689 cv
496.261 55.1306 li
496.261 54.8524 495.857 54.6269 495.36 54.6269 cv
490.403 54.6269 li
489.905 54.6269 489.502 54.8524 489.502 55.1306 cv
489.502 58.0689 li
489.502 58.347 489.905 58.5726 490.403 58.5726 cv
490.461 58.5726 li
490.328 58.9278 490.253 59.3169 490.253 59.7258 cv
490.253 64.0887 li
490.253 73.1184 li
490.253 77.26 li
484.689 79.8772 li
484.735 79.8772 li
483.89 80.3846 483.316 81.3769 483.316 82.5182 cv
483.316 90.4859 li
483.227 90.4859 li
483.227 91.1528 li
483.118 91.1528 li
483.118 91.8197 li
483.227 91.8197 li
483.227 100.572 li
483.118 100.572 li
483.118 101.238 li
483.227 101.238 li
483.227 101.905 li
483.316 101.905 li
483.316 109.156 li
483.316 110.814 484.526 111.005 486.02 111.005 cv
499.87 111.005 li
501.363 111.005 502.574 110.814 502.574 109.156 cv
502.574 101.905 li
502.662 101.905 li
502.662 90.4859 li
502.574 90.4859 li
502.574 82.5182 li
cp
.188235 .0784314 .00392157 rgb
f
265.144 82.5182 mo
265.144 81.3769 264.52 80.3846 263.6 79.8772 cv
263.625 79.8772 li
263.418 79.7876 li
263.277 79.7267 li
257.622 77.2821 li
257.622 73.1184 li
257.622 72.3404 li
257.622 71.4799 li
257.622 65.6985 li
257.622 64.838 li
257.622 64.0887 li
257.622 59.7258 li
257.622 59.3132 257.539 58.9203 257.392 58.5625 cv
257.885 58.5363 258.275 58.3293 258.275 58.0689 cv
258.275 55.1306 li
258.275 54.8524 257.836 54.6269 257.295 54.6269 cv
251.902 54.6269 li
251.36 54.6269 250.921 54.8524 250.921 55.1306 cv
250.921 58.0689 li
250.921 58.347 251.36 58.5726 251.902 58.5726 cv
251.965 58.5726 li
251.82 58.9278 251.738 59.3169 251.738 59.7258 cv
251.738 64.0887 li
251.738 64.838 li
251.738 65.6985 li
251.738 71.4799 li
251.738 72.3404 li
251.738 73.1184 li
251.738 77.26 li
245.684 79.8772 li
245.734 79.8772 li
244.815 80.3846 244.19 81.3769 244.19 82.5182 cv
244.19 90.4859 li
244.094 90.4859 li
244.094 91.1528 li
243.975 91.1528 li
243.975 91.8197 li
244.094 91.8197 li
244.094 100.572 li
243.975 100.572 li
243.975 101.238 li
244.094 101.238 li
244.094 101.905 li
244.19 101.905 li
244.19 109.156 li
244.19 110.814 245.507 111.005 247.132 111.005 cv
262.202 111.005 li
263.827 111.005 265.144 110.814 265.144 109.156 cv
265.144 101.905 li
265.24 101.905 li
265.24 90.4859 li
265.144 90.4859 li
265.144 82.5182 li
cp
f
559.08 73.2836 mo
559.08 64.2674 li
559.08 63.9015 558.953 63.5603 558.746 63.2534 cv
559.313 63.247 559.772 62.8224 559.772 62.2966 cv
559.772 56.7017 li
559.772 56.172 559.307 55.7426 558.734 55.7426 cv
553.024 55.7426 li
552.45 55.7426 551.985 56.172 551.985 56.7017 cv
551.985 62.2966 li
551.985 62.8263 552.45 63.2557 553.024 63.2557 cv
553.183 63.2557 li
552.977 63.5621 552.851 63.9024 552.851 64.2674 cv
552.851 73.2566 li
552.851 73.2566 548.406 80.1883 548.406 81.5857 cv
548.406 109.592 li
548.406 110.859 549.355 111.005 550.525 111.005 cv
561.379 111.005 li
562.549 111.005 563.498 110.859 563.498 109.592 cv
563.498 81.5857 li
563.498 80.1883 559.08 73.2836 559.08 73.2836 cv
cp
f
363.492 64.2674 mo
363.492 63.9015 363.35 63.5603 363.119 63.2534 cv
363.753 63.247 364.265 62.8223 364.265 62.2966 cv
364.265 56.7017 li
364.265 56.172 363.746 55.7426 363.106 55.7426 cv
356.732 55.7426 li
356.092 55.7426 355.573 56.172 355.573 56.7017 cv
355.573 62.2966 li
355.573 62.8263 356.092 63.2557 356.732 63.2557 cv
356.909 63.2557 li
356.68 63.5621 356.538 63.9024 356.538 64.2674 cv
356.538 73.2566 li
356.538 73.2566 351.577 80.1883 351.577 81.5857 cv
351.577 109.592 li
351.577 110.859 352.636 111.005 353.942 111.005 cv
366.059 111.005 li
367.365 111.005 368.424 110.859 368.424 109.592 cv
368.424 81.5857 li
368.424 80.1883 363.492 73.2836 363.492 73.2836 cv
363.492 64.2674 li
cp
f
578.075 79.3671 mo
578.075 63.1416 li
578.493 63.0832 578.796 62.9308 578.796 62.7472 cv
578.796 60.2805 li
578.796 60.047 578.312 59.8576 577.714 59.8576 cv
576.753 59.8576 li
576.213 59.5596 575.551 59.3772 574.827 59.3772 cv
574.102 59.3772 573.44 59.5596 572.9 59.8576 cv
571.759 59.8576 li
571.161 59.8576 570.677 60.047 570.677 60.2805 cv
570.677 62.7472 li
570.677 62.9558 571.07 63.1211 571.579 63.1558 cv
571.579 79.3386 li
571.579 79.3386 566.944 86.6374 566.944 88.1088 cv
566.944 109.517 li
566.944 110.851 567.933 111.005 569.153 111.005 cv
580.472 111.005 li
581.692 111.005 582.681 110.851 582.681 109.517 cv
582.681 88.1088 li
582.681 86.6374 578.075 79.3671 578.075 79.3671 cv
cp
f
156.548 63.1416 mo
156.976 63.0832 157.287 62.9308 157.287 62.7472 cv
157.287 60.2805 li
157.287 60.047 156.791 59.8576 156.179 59.8576 cv
155.196 59.8576 li
154.643 59.5596 153.965 59.3772 153.224 59.3772 cv
152.483 59.3772 151.805 59.5596 151.253 59.8576 cv
150.085 59.8576 li
149.473 59.8576 148.977 60.047 148.977 60.2805 cv
148.977 62.7472 li
148.977 62.9558 149.38 63.1211 149.9 63.1558 cv
149.9 79.3386 li
149.9 79.3386 145.157 86.6374 145.157 88.1088 cv
145.157 109.517 li
145.157 110.851 146.17 111.005 147.418 111.005 cv
159.002 111.005 li
160.25 111.005 161.262 110.851 161.262 109.517 cv
161.262 88.1088 li
161.262 86.6374 156.548 79.3671 156.548 79.3671 cv
156.548 63.1416 li
cp
f
540.592 85.6939 mo
539.988 74.8759 li
539.85 74.8759 li
539.546 69.3236 li
539.495 68.3947 539.009 67.5974 538.339 67.1933 cv
538.356 67.1933 li
538.207 67.1222 li
538.105 67.0739 li
534.056 63.2878 li
534.047 62.7254 li
534.042 62.4169 533.98 62.1249 533.874 61.8599 cv
534.214 61.8324 534.482 61.6047 534.482 61.3184 cv
534.482 58.0991 li
534.482 57.7942 534.182 57.5472 533.811 57.5472 cv
530.119 57.5472 li
529.748 57.5472 529.448 57.7942 529.448 58.0991 cv
529.448 61.3184 li
529.448 61.6232 529.748 61.8703 530.119 61.8703 cv
530.198 61.8703 li
530.094 62.1324 530.034 62.4211 530.029 62.7254 cv
530.021 63.2713 li
525.685 67.1933 li
525.721 67.1933 li
525.05 67.5974 524.564 68.3947 524.513 69.3236 cv
524.209 74.8759 li
524.071 74.8759 li
523.467 85.6939 li
523.615 85.6939 li
522.367 108.465 li
522.242 110.739 523.46 111.005 524.98 111.005 cv
539.08 111.005 li
540.6 111.005 541.817 110.739 541.693 108.465 cv
540.444 85.6939 li
540.592 85.6939 li
cp
f
472.916 68.811 mo
472.461 53.628 li
472.645 53.628 li
472.645 49.0939 li
472.091 49.0939 li
472.091 48.7546 li
472.091 48.2479 471.294 47.8372 470.311 47.8372 cv
469.329 47.8372 468.532 48.2479 468.532 48.7546 cv
468.532 49.0939 li
468.029 49.0939 li
468.029 53.628 li
468.171 53.628 li
467.71 69.01 li
464.708 71.0092 462.566 75.8311 462.566 78.9064 cv
462.566 79.5764 li
462.566 102.197 li
462.566 110.234 li
462.566 111.083 466.103 111.003 470.465 111.003 cv
474.827 111.003 478.364 111.003 478.364 110.234 cv
478.364 102.197 li
478.364 79.5764 li
478.364 78.9064 li
478.364 75.7275 476.077 70.6745 472.916 68.811 cv
cp
f
286.589 68.811 mo
286.049 53.628 li
286.267 53.628 li
286.267 49.0939 li
285.608 49.0939 li
285.608 48.7546 li
285.608 48.2479 284.66 47.8372 283.491 47.8372 cv
282.322 47.8372 281.375 48.2479 281.375 48.7546 cv
281.375 49.0939 li
280.777 49.0939 li
280.777 53.628 li
280.945 53.628 li
280.397 69.01 li
276.826 71.0092 274.278 75.8311 274.278 78.9064 cv
274.278 79.5764 li
274.278 102.197 li
274.278 110.234 li
274.278 111.083 278.485 111.003 283.674 111.003 cv
288.864 111.003 293.071 111.003 293.071 110.234 cv
293.071 102.197 li
293.071 79.5764 li
293.071 78.9064 li
293.071 75.7275 290.351 70.6745 286.589 68.811 cv
cp
f
192.908 65.7858 mo
192.389 48.1241 li
192.599 48.1241 li
192.599 43.5901 li
192.001 43.5901 li
192.001 43.2507 li
192.001 42.7441 191.142 42.3333 190.082 42.3333 cv
189.021 42.3333 188.162 42.7441 188.162 43.2507 cv
188.162 43.5901 li
187.62 43.5901 li
187.62 48.1241 li
187.785 48.1241 li
187.258 66.0568 li
184.028 68.7744 181.726 75.17 181.726 78.2397 cv
181.726 78.9097 li
181.726 101.531 li
181.726 109.567 li
181.726 110.416 185.541 110.337 190.248 110.337 cv
194.954 110.337 198.77 110.337 198.77 109.567 cv
198.77 101.531 li
198.77 78.9097 li
198.77 78.2397 li
198.77 75.066 196.31 68.3281 192.908 65.7858 cv
cp
f
393.168 68.801 mo
392.735 57.0622 li
392.901 57.0622 li
392.901 52.5282 li
392.322 52.5282 li
392.322 52.1889 li
392.322 51.6822 391.489 51.2715 390.461 51.2715 cv
389.434 51.2715 388.601 51.6822 388.601 52.1889 cv
388.601 52.5282 li
388.076 52.5282 li
388.076 57.0622 li
388.198 57.0622 li
387.757 69.0007 li
384.611 70.9939 382.364 75.8262 382.364 78.9064 cv
382.364 79.5764 li
382.364 102.197 li
382.364 110.234 li
382.364 111.083 386.061 111.003 390.622 111.003 cv
395.183 111.003 398.88 111.003 398.88 110.234 cv
398.88 102.197 li
398.88 79.5764 li
398.88 78.9064 li
398.88 75.7222 396.482 70.6571 393.168 68.801 cv
cp
f
430.16 74.1896 mo
430.184 74.1896 li
429.982 73.9368 li
429.844 73.7648 li
424.326 66.8639 li
424.326 59.7258 li
424.326 59.3132 424.245 58.9203 424.101 58.5625 cv
424.583 58.5363 424.963 58.3293 424.963 58.0689 cv
424.963 55.1306 li
424.963 54.8524 424.535 54.6269 424.006 54.6269 cv
418.743 54.6269 li
418.215 54.6269 417.786 54.8524 417.786 55.1306 cv
417.786 58.0689 li
417.786 58.347 418.215 58.5726 418.743 58.5726 cv
418.805 58.5726 li
418.663 58.9278 418.584 59.3169 418.584 59.7258 cv
418.584 66.8016 li
412.675 74.1896 li
412.725 74.1896 li
411.827 75.622 411.218 78.4231 411.218 81.6449 cv
411.218 88.8707 li
411.218 101.374 li
411.218 109.156 li
411.218 110.814 412.503 111.005 414.089 111.005 cv
428.796 111.005 li
430.381 111.005 431.667 110.814 431.667 109.156 cv
431.667 93.7185 li
431.667 81.6449 li
431.667 81.2156 li
431.657 81.2194 li
431.605 78.1799 431.017 75.5578 430.16 74.1896 cv
cp
f
42.027 64.2674 mo
42.027 63.9015 41.8536 63.5603 41.5714 63.2534 cv
42.3453 63.247 42.9711 62.8224 42.9711 62.2966 cv
42.9711 56.7017 li
42.9711 56.172 42.337 55.7426 41.555 55.7426 cv
33.7664 55.7426 li
32.9842 55.7426 32.3502 56.172 32.3502 56.7017 cv
32.3502 62.2966 li
32.3502 62.8263 32.9842 63.2557 33.7664 63.2557 cv
33.9836 63.2557 li
33.7027 63.5621 33.5303 63.9024 33.5303 64.2674 cv
33.5303 73.2566 li
33.5303 73.2566 27.4681 80.1883 27.4681 81.5857 cv
27.4681 109.592 li
27.4681 110.859 28.7619 111.005 30.3579 111.005 cv
45.1627 111.005 li
46.7587 111.005 48.0525 110.859 48.0525 109.592 cv
48.0525 81.5857 li
48.0525 80.1883 42.027 73.2836 42.027 73.2836 cv
42.027 64.2674 li
cp
f
123.448 74.1896 mo
123.232 73.9368 li
123.085 73.7648 li
117.188 66.8639 li
117.188 59.7258 li
117.188 59.3132 117.103 58.9203 116.949 58.5625 cv
117.463 58.5363 117.87 58.3293 117.87 58.0689 cv
117.87 55.1306 li
117.87 54.8524 117.412 54.6269 116.847 54.6269 cv
111.224 54.6269 li
110.66 54.6269 110.202 54.8524 110.202 55.1306 cv
110.202 58.0689 li
110.202 58.347 110.66 58.5726 111.224 58.5726 cv
111.29 58.5726 li
111.139 58.9278 111.054 59.3169 111.054 59.7258 cv
111.054 66.8016 li
104.742 74.1896 li
104.794 74.1896 li
103.836 75.622 103.184 78.4231 103.184 81.6449 cv
103.184 89.8339 li
103.184 102.337 li
103.184 109.156 li
103.184 110.814 104.557 111.005 106.251 111.005 cv
121.965 111.005 li
123.658 111.005 125.032 110.814 125.032 109.156 cv
125.032 94.6817 li
125.032 82.1788 li
125.032 81.6449 li
125.032 78.4231 124.38 75.622 123.422 74.1896 cv
123.448 74.1896 li
cp
f
231.556 74.1896 mo
231.348 73.9368 li
231.207 73.7648 li
225.533 66.8639 li
225.533 59.7258 li
225.533 59.3132 225.45 58.9203 225.302 58.5625 cv
225.797 58.5363 226.188 58.3293 226.188 58.0689 cv
226.188 55.1306 li
226.188 54.8524 225.748 54.6269 225.205 54.6269 cv
219.793 54.6269 li
219.25 54.6269 218.809 54.8524 218.809 55.1306 cv
218.809 58.0689 li
218.809 58.347 219.25 58.5726 219.793 58.5726 cv
219.857 58.5726 li
219.711 58.9278 219.629 59.3169 219.629 59.7258 cv
219.629 66.8016 li
213.554 74.1896 li
213.605 74.1896 li
212.682 75.622 212.056 78.4231 212.056 81.6449 cv
212.056 109.156 li
212.056 110.814 213.377 111.005 215.007 111.005 cv
230.129 111.005 li
231.759 111.005 233.081 110.814 233.081 109.156 cv
233.081 81.6449 li
233.081 78.4231 232.454 75.622 231.531 74.1896 cv
231.556 74.1896 li
cp
f
322.294 79.8772 mo
322.318 79.8772 li
322.117 79.7876 li
321.981 79.7267 li
316.501 77.2821 li
316.501 73.1184 li
316.501 72.3404 li
316.501 71.4799 li
316.501 69.6731 li
316.501 68.8126 li
316.501 68.0633 li
316.501 66.9274 li
316.501 66.5149 316.421 66.122 316.278 65.7642 cv
316.757 65.738 317.134 65.5311 317.134 65.2706 cv
317.134 62.3323 li
317.134 62.0542 316.709 61.8286 316.184 61.8286 cv
310.958 61.8286 li
310.434 61.8286 310.008 62.0542 310.008 62.3323 cv
310.008 65.2706 li
310.008 65.5488 310.434 65.7743 310.958 65.7743 cv
311.02 65.7743 li
310.879 66.1294 310.8 66.5186 310.8 66.9274 cv
310.8 68.0633 li
310.8 68.8126 li
310.8 69.6731 li
310.8 71.4799 li
310.8 72.3404 li
310.8 73.1184 li
310.8 77.26 li
304.934 79.8772 li
304.982 79.8772 li
304.092 80.3846 303.486 81.3769 303.486 82.5182 cv
303.486 86.012 li
303.486 103.452 li
303.486 109.156 li
303.486 110.814 304.762 111.005 306.337 111.005 cv
320.94 111.005 li
322.514 111.005 323.79 110.814 323.79 109.156 cv
323.79 103.452 li
323.79 86.012 li
323.79 82.5182 li
323.79 81.3769 323.185 80.3846 322.294 79.8772 cv
cp
f
432.204 190.774 mo
431.58 190.774 li
431.58 124.186 li
431.58 122.291 430.044 120.755 428.148 120.755 cv
353.267 120.755 li
351.372 120.755 349.835 122.291 349.835 124.186 cv
349.835 190.774 li
349.211 190.774 li
347.488 190.774 346.091 192.171 346.091 193.894 cv
346.091 195.617 347.488 197.014 349.211 197.014 cv
432.204 197.014 li
433.927 197.014 435.324 195.617 435.324 193.894 cv
435.324 192.171 433.927 190.774 432.204 190.774 cv
f
170.778 167.39 mo
170.778 166.224 170.202 165.209 169.356 164.691 cv
169.379 164.691 li
169.188 164.599 li
169.058 164.537 li
163.851 162.038 li
163.851 157.783 li
163.851 156.988 li
163.851 156.108 li
163.851 154.262 li
163.851 153.382 li
163.851 152.616 li
163.851 151.455 li
163.851 151.034 163.775 150.632 163.639 150.266 cv
164.094 150.24 164.453 150.028 164.453 149.762 cv
164.453 146.759 li
164.453 146.474 164.048 146.244 163.55 146.244 cv
158.583 146.244 li
158.085 146.244 157.681 146.474 157.681 146.759 cv
157.681 149.762 li
157.681 150.046 158.085 150.277 158.583 150.277 cv
158.642 150.277 li
158.508 150.64 158.433 151.037 158.433 151.455 cv
158.433 152.616 li
158.433 153.382 li
158.433 154.262 li
158.433 156.108 li
158.433 156.988 li
158.433 157.783 li
158.433 162.016 li
152.858 164.691 li
152.905 164.691 li
152.058 165.209 151.483 166.224 151.483 167.39 cv
151.483 194.616 li
151.483 196.31 152.695 196.505 154.191 196.505 cv
168.069 196.505 li
169.565 196.505 170.778 196.31 170.778 194.616 cv
170.778 188.786 li
170.778 170.961 li
170.778 167.39 li
448.044 158.878 mo
447.844 158.619 li
447.708 158.443 li
442.245 151.39 li
442.245 144.095 li
442.245 143.673 442.166 143.272 442.023 142.906 cv
442.5 142.879 442.876 142.668 442.876 142.401 cv
442.876 139.398 li
442.876 139.114 442.452 138.883 441.929 138.883 cv
436.719 138.883 li
436.196 138.883 435.772 139.114 435.772 139.398 cv
435.772 142.401 li
435.772 142.686 436.196 142.916 436.719 142.916 cv
436.781 142.916 li
436.64 143.279 436.562 143.677 436.562 144.095 cv
436.562 151.327 li
430.713 158.878 li
430.762 158.878 li
429.874 160.342 429.27 163.205 429.27 166.498 cv
429.27 194.616 li
429.27 196.31 430.543 196.505 432.112 196.505 cv
446.67 196.505 li
448.24 196.505 449.512 196.31 449.512 194.616 cv
449.512 166.498 li
449.512 163.205 448.908 160.342 448.02 158.878 cv
448.044 158.878 li
219.379 157.678 mo
219.401 157.678 li
219.218 157.412 li
219.094 157.23 li
214.109 149.952 li
214.109 142.424 li
214.109 141.989 214.037 141.575 213.906 141.197 cv
214.342 141.169 214.685 140.951 214.685 140.676 cv
214.685 137.578 li
214.685 137.284 214.298 137.046 213.821 137.046 cv
209.067 137.046 li
208.589 137.046 208.202 137.284 208.202 137.578 cv
208.202 140.676 li
208.202 140.97 208.589 141.208 209.067 141.208 cv
209.123 141.208 li
208.995 141.582 208.923 141.993 208.923 142.424 cv
208.923 149.886 li
203.586 157.678 li
203.63 157.678 li
202.82 159.189 202.269 162.143 202.269 165.541 cv
202.269 172.823 li
202.269 186.009 li
202.269 194.555 li
202.269 196.303 203.43 196.505 204.862 196.505 cv
218.147 196.505 li
219.579 196.505 220.74 196.303 220.74 194.555 cv
220.74 177.936 li
220.74 165.541 li
220.74 164.749 li
220.724 164.756 li
220.646 161.695 220.126 159.07 219.379 157.678 cv
547.678 153.37 mo
547.203 141.372 li
547.385 141.372 li
547.385 136.738 li
546.751 136.738 li
546.751 136.392 li
546.751 135.874 545.838 135.454 544.713 135.454 cv
543.587 135.454 542.675 135.874 542.675 136.392 cv
542.675 136.738 li
542.099 136.738 li
542.099 141.372 li
542.233 141.372 li
541.75 153.574 li
538.303 155.612 535.842 160.55 535.842 163.699 cv
535.842 164.383 li
535.842 187.503 li
535.842 195.717 li
535.842 196.585 539.892 196.503 544.889 196.503 cv
549.885 196.503 553.936 196.503 553.936 195.717 cv
553.936 187.503 li
553.936 164.383 li
553.936 163.699 li
553.936 160.444 551.309 155.267 547.678 153.37 cv
244.893 150.97 mo
244.274 132.919 li
244.525 132.919 li
244.525 128.285 li
243.813 128.285 li
243.813 127.938 li
243.813 127.42 242.788 127 241.524 127 cv
240.261 127 239.236 127.42 239.236 127.938 cv
239.236 128.285 li
238.59 128.285 li
238.59 132.919 li
238.787 132.919 li
238.158 151.247 li
234.309 154.024 231.564 160.561 231.564 163.699 cv
231.564 164.383 li
231.564 187.503 li
231.564 195.717 li
231.564 196.585 236.112 196.503 241.722 196.503 cv
247.332 196.503 251.88 196.503 251.88 195.717 cv
251.88 187.503 li
251.88 164.383 li
251.88 163.699 li
251.88 160.455 248.949 153.568 244.893 150.97 cv
328.003 153.38 mo
327.487 137.862 li
327.695 137.862 li
327.695 133.228 li
327.067 133.228 li
327.067 132.881 li
327.067 132.364 326.163 131.944 325.048 131.944 cv
323.933 131.944 323.029 132.364 323.029 132.881 cv
323.029 133.228 li
322.459 133.228 li
322.459 137.862 li
322.619 137.862 li
322.097 153.584 li
318.691 155.627 316.26 160.555 316.26 163.699 cv
316.26 164.383 li
316.26 187.503 li
316.26 195.717 li
316.26 196.585 320.273 196.503 325.222 196.503 cv
330.172 196.503 334.185 196.503 334.185 195.717 cv
334.185 187.503 li
334.185 164.383 li
334.185 163.699 li
334.185 160.449 331.59 155.285 328.003 153.38 cv
521.402 153.38 mo
520.892 137.862 li
521.097 137.862 li
521.097 133.228 li
520.475 133.228 li
520.475 132.881 li
520.475 132.364 519.58 131.944 518.475 131.944 cv
517.371 131.944 516.476 132.364 516.476 132.881 cv
516.476 133.228 li
515.911 133.228 li
515.911 137.862 li
516.07 137.862 li
515.553 153.584 li
512.179 155.627 509.772 160.555 509.772 163.699 cv
509.772 164.383 li
509.772 187.503 li
509.772 195.717 li
509.772 196.585 513.746 196.503 518.648 196.503 cv
523.55 196.503 527.524 196.503 527.524 195.717 cv
527.524 187.503 li
527.524 164.383 li
527.524 163.699 li
527.524 160.449 524.955 155.285 521.402 153.38 cv
43.0232 171.457 mo
42.3475 160.401 li
42.1934 160.401 li
41.8528 154.726 li
41.7958 153.777 41.2517 152.962 40.5015 152.548 cv
40.5214 152.548 li
40.354 152.476 li
40.2402 152.426 li
35.7091 148.557 li
35.6992 147.982 li
35.694 147.667 35.6247 147.368 35.5056 147.097 cv
35.8856 147.069 36.1862 146.837 36.1862 146.544 cv
36.1862 143.254 li
36.1862 142.942 35.8499 142.69 35.4352 142.69 cv
31.3038 142.69 li
30.8889 142.69 30.5526 142.942 30.5526 143.254 cv
30.5526 146.544 li
30.5526 146.856 30.8889 147.108 31.3038 147.108 cv
31.3914 147.108 li
31.2754 147.376 31.2086 147.671 31.2033 147.982 cv
31.1942 148.54 li
26.3417 152.548 li
26.3816 152.548 li
25.6317 152.962 25.0876 153.777 25.0306 154.726 cv
24.6897 160.401 li
24.5356 160.401 li
23.8602 171.457 li
24.0258 171.457 li
22.6283 194.731 li
22.489 197.055 23.8515 197.327 25.5524 197.327 cv
41.331 197.327 li
43.032 197.327 44.3945 197.055 44.255 194.731 cv
42.8573 171.457 li
43.0232 171.457 li
186.608 164.169 mo
186.608 147.586 li
187.011 147.526 187.303 147.37 187.303 147.183 cv
187.303 144.662 li
187.303 144.423 186.836 144.23 186.261 144.23 cv
185.337 144.23 li
184.817 143.925 184.179 143.739 183.482 143.739 cv
182.785 143.739 182.148 143.925 181.628 144.23 cv
180.53 144.23 li
179.954 144.23 179.488 144.423 179.488 144.662 cv
179.488 147.183 li
179.488 147.396 179.867 147.565 180.356 147.601 cv
180.356 164.14 li
180.356 164.14 175.896 171.6 175.896 173.104 cv
175.896 194.984 li
175.896 196.348 176.848 196.505 178.022 196.505 cv
188.915 196.505 li
190.09 196.505 191.042 196.348 191.042 194.984 cv
191.042 173.104 li
191.042 171.6 186.608 164.169 186.608 164.169 cv
308.233 148.737 mo
308.233 148.363 308.099 148.014 307.881 147.7 cv
308.478 147.694 308.961 147.26 308.961 146.722 cv
308.961 141.004 li
308.961 140.462 308.472 140.024 307.868 140.024 cv
301.857 140.024 li
301.254 140.024 300.764 140.462 300.764 141.004 cv
300.764 146.722 li
300.764 147.264 301.254 147.703 301.857 147.703 cv
302.025 147.703 li
301.808 148.016 301.675 148.363 301.675 148.737 cv
301.675 157.924 li
301.675 157.924 296.996 165.009 296.996 166.437 cv
296.996 195.061 li
296.996 196.356 297.995 196.505 299.227 196.505 cv
310.653 196.505 li
311.885 196.505 312.883 196.356 312.883 195.061 cv
312.883 166.437 li
312.883 165.009 308.233 157.952 308.233 157.952 cv
308.233 148.737 li
496.18 148.737 mo
496.18 148.363 496.035 148.014 495.798 147.7 cv
496.447 147.694 496.97 147.26 496.97 146.722 cv
496.97 141.004 li
496.97 140.462 496.439 140.024 495.784 140.024 cv
489.262 140.024 li
488.607 140.024 488.076 140.462 488.076 141.004 cv
488.076 146.722 li
488.076 147.264 488.607 147.703 489.262 147.703 cv
489.444 147.703 li
489.209 148.016 489.064 148.363 489.064 148.737 cv
489.064 157.924 li
489.064 157.924 483.988 165.009 483.988 166.437 cv
483.988 195.061 li
483.988 196.356 485.071 196.505 486.408 196.505 cv
498.806 196.505 li
500.142 196.505 501.226 196.356 501.226 195.061 cv
501.226 166.437 li
501.226 165.009 496.18 157.952 496.18 157.952 cv
496.18 148.737 li
583.253 187.205 mo
583.15 187.205 li
583.15 194.616 li
583.15 196.31 581.745 196.505 580.011 196.505 cv
563.929 196.505 li
562.196 196.505 560.79 196.31 560.79 194.616 cv
560.79 187.205 li
560.687 187.205 li
560.687 186.523 li
560.561 186.523 li
560.561 185.842 li
560.687 185.842 li
560.687 176.897 li
560.561 176.897 li
560.561 176.215 li
560.687 176.215 li
560.687 175.533 li
560.79 175.533 li
560.79 167.39 li
560.79 166.224 561.457 165.209 562.438 164.691 cv
562.384 164.691 li
568.845 162.016 li
568.845 157.783 li
568.845 156.988 li
568.845 156.108 li
568.845 150.199 li
568.845 149.32 li
568.845 148.554 li
568.845 144.095 li
568.845 143.677 568.932 143.279 569.086 142.916 cv
569.019 142.916 li
568.441 142.916 567.973 142.686 567.973 142.401 cv
567.973 139.398 li
567.973 139.114 568.441 138.883 569.019 138.883 cv
574.774 138.883 li
575.352 138.883 575.82 139.114 575.82 139.398 cv
575.82 142.401 li
575.82 142.668 575.404 142.879 574.878 142.906 cv
575.035 143.272 575.123 143.673 575.123 144.095 cv
575.123 148.554 li
575.123 149.32 li
575.123 150.199 li
575.123 156.108 li
575.123 156.988 li
575.123 157.783 li
575.123 162.038 li
581.157 164.537 li
581.308 164.599 li
581.529 164.691 li
581.502 164.691 li
582.483 165.209 583.15 166.224 583.15 167.39 cv
583.15 175.533 li
583.253 175.533 li
583.253 187.205 li
f
420.279 193.452 mo
420.279 195.347 418.742 196.883 416.847 196.883 cv
341.966 196.883 li
340.071 196.883 338.534 195.347 338.534 193.452 cv
338.534 124.186 li
338.534 122.291 340.071 120.755 341.966 120.755 cv
416.847 120.755 li
418.742 120.755 420.279 122.291 420.279 124.186 cv
420.279 193.452 li
.866667 .372549 .32549 rgb
f
424.023 193.894 mo
424.023 195.617 422.626 197.014 420.903 197.014 cv
337.91 197.014 li
336.187 197.014 334.79 195.617 334.79 193.894 cv
334.79 192.171 336.187 190.774 337.91 190.774 cv
420.903 190.774 li
422.626 190.774 424.023 192.171 424.023 193.894 cv
cp
.686275 .254902 .235294 rgb
f
395.095 154.823 mo
395.095 156.521 393.718 157.898 392.02 157.898 cv
367.354 157.898 li
365.656 157.898 364.279 156.521 364.279 154.823 cv
364.279 146.699 li
364.279 145.001 365.656 143.624 367.354 143.624 cv
392.02 143.624 li
393.718 143.624 395.095 145.001 395.095 146.699 cv
395.095 154.823 li
cp
.309804 .137255 .00784314 rgb
f
373.36 165.527 mo
373.345 165.811 373.142 166.26 372.9 166.54 cv
370.349 169.503 li
370.046 169.854 369.781 169.917 369.761 169.631 cv
367.823 141.151 li
367.742 139.965 368.24 138.966 368.91 138.966 cv
373.963 138.966 li
374.392 138.966 374.689 139.725 374.642 140.634 cv
373.36 165.527 li
cp
.427451 .427451 .427451 rgb
f
371.628 138.966 mo
369.24 138.966 li
368.886 138.966 368.622 140.051 368.665 141.34 cv
370.36 169.49 li
371.628 168.018 li
371.628 138.966 li
cp
.588235 .588235 .588235 rgb
f
370.109 138.966 mo
371.116 168.951 li
371.628 168.018 li
371.628 138.966 li
370.109 138.966 li
cp
.74902 .74902 .74902 rgb
f
390.255 165.527 mo
390.24 165.811 390.036 166.26 389.795 166.54 cv
387.243 169.503 li
386.941 169.854 386.675 169.917 386.656 169.631 cv
384.717 141.151 li
384.637 139.965 385.135 138.966 385.805 138.966 cv
390.858 138.966 li
391.287 138.966 391.583 139.725 391.537 140.634 cv
390.255 165.527 li
cp
.427451 .427451 .427451 rgb
f
388.522 138.966 mo
386.135 138.966 li
385.781 138.966 385.517 140.051 385.56 141.34 cv
387.255 169.49 li
388.522 168.018 li
388.522 138.966 li
cp
.588235 .588235 .588235 rgb
f
387.004 138.966 mo
388.011 168.951 li
388.522 168.018 li
388.522 138.966 li
387.004 138.966 li
cp
.74902 .74902 .74902 rgb
f
393.47 151.464 mo
393.47 151.938 393.086 152.322 392.612 152.322 cv
366.237 152.322 li
365.763 152.322 365.379 151.938 365.379 151.464 cv
365.379 145.882 li
365.379 145.408 365.763 145.024 366.237 145.024 cv
392.612 145.024 li
393.086 145.024 393.47 145.408 393.47 145.882 cv
393.47 151.464 li
cp
.14902 .14902 .14902 rgb
f
415.261 153.46 mo
415.261 156.303 412.956 158.607 410.113 158.607 cv
408.255 158.607 li
405.412 158.607 403.107 156.303 403.107 153.46 cv
403.107 148.027 li
403.107 145.184 405.412 142.88 408.255 142.88 cv
410.113 142.88 li
412.956 142.88 415.261 145.184 415.261 148.027 cv
415.261 153.46 li
cp
.309804 .137255 .00784314 rgb
f
404.67 167.566 mo
408.977 167.566 li
409.003 167.331 li
409.324 140.092 li
409.332 139.394 409.078 138.823 408.744 138.823 cv
404.816 138.823 li
404.295 138.823 403.876 139.577 403.902 140.495 cv
404.67 167.566 li
cp
.427451 .427451 .427451 rgb
f
405.387 167.566 mo
407.065 167.566 li
406.929 138.823 li
405.073 138.823 li
404.797 138.823 404.567 139.643 404.57 140.644 cv
405.387 167.566 li
cp
.588235 .588235 .588235 rgb
f
407.065 167.566 mo
406.929 138.823 li
405.748 138.823 li
406.369 167.566 li
407.065 167.566 li
cp
.74902 .74902 .74902 rgb
f
416.598 151.577 mo
416.598 151.919 416.316 152.232 415.954 152.279 cv
405.249 153.68 li
404.171 153.821 403.231 153.426 403.231 152.786 cv
403.231 147.606 li
403.231 146.967 404.171 146.571 405.249 146.712 cv
415.954 148.113 li
416.316 148.161 416.598 148.474 416.598 148.815 cv
416.598 151.577 li
cp
.14902 .14902 .14902 rgb
f
360.07 134.873 mo
360.07 139.611 356.229 143.451 351.491 143.451 cv
346.753 143.451 342.913 139.611 342.913 134.873 cv
342.913 130.135 346.753 126.294 351.491 126.294 cv
356.229 126.294 360.07 130.135 360.07 134.873 cv
cp
.309804 .137255 .00784314 rgb
f
358.069 134.873 mo
358.069 138.505 355.124 141.45 351.491 141.45 cv
347.859 141.45 344.914 138.505 344.914 134.873 cv
344.914 131.24 347.859 128.296 351.491 128.296 cv
355.124 128.296 358.069 131.24 358.069 134.873 cv
cp
.14902 .14902 .14902 rgb
f
357.841 134.873 mo
357.841 138.38 354.999 141.223 351.491 141.223 cv
347.984 141.223 345.141 138.38 345.141 134.873 cv
345.141 131.366 347.984 128.523 351.491 128.523 cv
354.999 128.523 357.841 131.366 357.841 134.873 cv
cp
.835294 .764706 .709804 rgb
f
351.59 130.898 mo
351.368 130.898 li
351.368 128.505 li
351.59 128.505 li
351.59 130.898 li
cp
.14902 .14902 .14902 rgb
f
351.59 127.281 mo
351.368 127.281 li
351.368 126.168 li
351.59 126.168 li
351.59 127.281 li
cp
f
361.696 181.405 mo
360.597 181.405 359.702 180.51 359.702 179.41 cv
359.702 178.311 360.597 177.416 361.696 177.416 cv
362.796 177.416 363.691 178.311 363.691 179.41 cv
363.691 180.51 362.796 181.405 361.696 181.405 cv
363.992 174.48 mo
363.992 177.543 li
363.447 176.874 362.627 176.437 361.697 176.437 cv
360.055 176.437 358.723 177.769 358.723 179.411 cv
358.723 181.053 359.777 184.416 363.992 183.136 cv
363.992 186.548 366.158 189.446 369.185 190.553 cv
374.606 190.553 li
377.634 189.446 379.799 186.548 379.799 183.136 cv
379.799 174.48 li
363.992 174.48 li
1 1 1 rgb
f
364.555 182.867 mo
364.555 182.867 li
364.555 175.606 li
364.555 175.222 364.593 174.848 364.649 174.48 cv
379.229 174.48 li
379.286 174.848 379.324 175.222 379.324 175.606 cv
379.324 176.901 li
371.824 176.901 li
371.824 174.48 li
366.61 174.48 li
366.568 174.848 366.541 175.222 366.541 175.606 cv
366.541 176.901 li
364.555 176.901 li
364.555 178.08 li
364.555 182.867 li
.917647 .898039 .87451 rgb
f
364.555 178.08 mo
364.555 182.867 li
364.555 186.945 367.861 188.638 371.939 188.638 cv
376.018 188.638 379.324 186.945 379.324 182.867 cv
379.324 178.08 li
364.555 178.08 li
.427451 .313726 .207843 rgb
f
371.824 188.634 mo
368.896 188.59 366.541 186.892 366.541 182.867 cv
366.541 178.159 li
371.824 178.159 li
371.824 188.634 li
.654902 .588235 .52549 rgb
f
371.824 176.901 mo
366.541 176.901 li
366.541 175.606 li
366.541 175.222 366.568 174.848 366.61 174.48 cv
371.824 174.48 li
371.824 176.901 li
.94902 .937255 .92549 rgb
f
379.324 178.08 mo
371.824 178.08 li
371.824 176.901 li
379.324 176.901 li
379.324 178.08 li
.752941 .611765 .494118 rgb
f
379.324 178.159 mo
371.824 178.159 li
371.824 178.08 li
379.324 178.08 li
379.324 178.159 li
.654902 .494118 .360784 rgb
f
366.541 178.08 mo
364.555 178.08 li
364.555 176.901 li
366.541 176.901 li
366.541 178.08 li
.752941 .611765 .494118 rgb
f
366.541 178.159 mo
364.555 178.159 li
364.555 178.08 li
366.541 178.08 li
366.541 178.159 li
.654902 .494118 .360784 rgb
f
371.824 178.08 mo
366.541 178.08 li
366.541 176.901 li
371.824 176.901 li
371.824 178.08 li
.756863 .619608 .505882 rgb
f
371.824 178.159 mo
366.541 178.159 li
366.541 178.08 li
371.824 178.08 li
371.824 178.159 li
.698039 .54902 .423529 rgb
f
352.312 124.525 mo
352.312 124.056 351.932 123.675 351.462 123.675 cv
350.993 123.675 350.612 124.056 350.612 124.525 cv
350.612 124.994 350.993 125.375 351.462 125.375 cv
351.932 125.375 352.312 124.994 352.312 124.525 cv
cp
.14902 .14902 .14902 rgb
f
352.312 145.488 mo
352.312 145.018 351.932 144.638 351.462 144.638 cv
350.993 144.638 350.612 145.018 350.612 145.488 cv
350.612 145.957 350.993 146.337 351.462 146.337 cv
351.932 146.337 352.312 145.957 352.312 145.488 cv
cp
f
359.475 128.196 mo
359.806 127.864 359.806 127.326 359.475 126.994 cv
359.143 126.662 358.605 126.662 358.273 126.994 cv
357.941 127.326 357.941 127.864 358.273 128.196 cv
358.605 128.528 359.143 128.528 359.475 128.196 cv
cp
f
344.652 143.018 mo
344.984 142.687 344.984 142.149 344.652 141.817 cv
344.32 141.485 343.782 141.485 343.45 141.817 cv
343.118 142.149 343.118 142.687 343.45 143.018 cv
343.782 143.35 344.32 143.35 344.652 143.018 cv
cp
f
361.943 135.856 mo
362.413 135.856 362.793 135.476 362.793 135.006 cv
362.793 134.537 362.413 134.156 361.944 134.156 cv
361.474 134.156 361.094 134.537 361.094 135.006 cv
361.094 135.475 361.474 135.856 361.943 135.856 cv
cp
f
340.98 135.856 mo
341.45 135.856 341.83 135.475 341.83 135.006 cv
341.83 134.537 341.45 134.156 340.98 134.156 cv
340.511 134.156 340.13 134.537 340.13 135.006 cv
340.13 135.475 340.511 135.856 340.98 135.856 cv
cp
f
358.273 143.019 mo
358.604 143.35 359.143 143.35 359.474 143.019 cv
359.806 142.687 359.806 142.149 359.474 141.817 cv
359.143 141.485 358.604 141.485 358.273 141.817 cv
357.941 142.149 357.941 142.687 358.273 143.019 cv
cp
f
343.45 128.195 mo
343.781 128.527 344.319 128.527 344.651 128.195 cv
344.983 127.863 344.983 127.325 344.651 126.993 cv
344.32 126.661 343.781 126.661 343.45 126.993 cv
343.118 127.325 343.118 127.863 343.45 128.195 cv
cp
f
160.409 284.12 mo
160.505 284.666 160.141 285.186 159.596 285.282 cv
159.051 285.379 158.53 285.015 158.434 284.47 cv
148.339 227.402 li
148.243 226.857 148.606 226.336 149.152 226.24 cv
149.697 226.143 150.217 226.507 150.314 227.053 cv
160.409 284.12 li
cp
.807843 .576471 .203922 rgb
f
228.639 387.039 mo
228.793 387.898 229.615 388.469 230.474 388.314 cv
231.333 388.16 231.904 387.338 231.75 386.479 cv
211.454 273.706 li
211.299 272.847 210.478 272.276 209.619 272.43 cv
208.759 272.585 208.188 273.407 208.343 274.266 cv
228.639 387.039 li
cp
.937255 .784314 .482353 rgb
f
194.436 272.221 mo
194.405 271.348 193.673 270.666 192.801 270.697 cv
191.928 270.728 191.246 271.461 191.277 272.333 cv
195.351 386.845 li
195.382 387.717 196.114 388.399 196.986 388.368 cv
197.859 388.337 198.541 387.605 198.51 386.733 cv
194.436 272.221 li
cp
.807843 .576471 .203922 rgb
f
230.319 364.221 mo
230.319 364.876 229.789 365.406 229.134 365.406 cv
150.9 365.406 li
150.246 365.406 149.715 364.876 149.715 364.221 cv
149.715 363.566 150.246 363.036 150.9 363.036 cv
229.134 363.036 li
229.789 363.036 230.319 363.566 230.319 364.221 cv
cp
.937255 .784314 .482353 rgb
f
152.186 387.039 mo
152.031 387.898 151.21 388.469 150.351 388.314 cv
149.492 388.16 148.921 387.338 149.075 386.479 cv
169.371 273.706 li
169.525 272.847 170.347 272.276 171.206 272.43 cv
172.065 272.585 172.636 273.407 172.482 274.266 cv
152.186 387.039 li
cp
f
182.758 272.221 mo
182.789 271.348 183.521 270.666 184.394 270.697 cv
185.266 270.728 185.948 271.461 185.917 272.333 cv
181.843 386.845 li
181.812 387.717 181.08 388.399 180.208 388.368 cv
179.335 388.337 178.653 387.605 178.684 386.733 cv
182.758 272.221 li
cp
f
221.232 290.465 mo
221.232 292.211 219.817 293.626 218.071 293.626 cv
161.964 293.626 li
160.218 293.626 158.803 292.211 158.803 290.465 cv
158.803 264.387 li
158.803 262.642 160.218 261.226 161.964 261.226 cv
218.071 261.226 li
219.817 261.226 221.232 262.642 221.232 264.387 cv
221.232 290.465 li
cp
.482353 .592157 .14902 rgb
f
221.156 263.714 mo
220.847 262.293 219.585 261.226 218.071 261.226 cv
161.964 261.226 li
160.449 261.226 159.187 262.293 158.878 263.714 cv
221.156 263.714 li
cp
.611765 .737255 .231373 rgb
f
158.803 281.704 mo
158.803 290.465 li
158.803 292.211 160.218 293.626 161.964 293.626 cv
218.071 293.626 li
219.817 293.626 221.232 292.211 221.232 290.465 cv
221.232 281.704 li
158.803 281.704 li
cp
.364706 .447059 .117647 rgb
f
200.73 226.745 mo
200.73 227.814 199.864 228.681 198.794 228.681 cv
147.287 228.681 li
146.218 228.681 145.351 227.814 145.351 226.745 cv
145.351 225.675 146.218 224.808 147.287 224.808 cv
198.794 224.808 li
199.864 224.808 200.73 225.675 200.73 226.745 cv
cp
.937255 .784314 .482353 rgb
f
224.968 285.204 mo
224.968 286.256 224.115 287.109 223.063 287.109 cv
155.885 287.109 li
154.832 287.109 153.979 286.256 153.979 285.204 cv
153.979 284.152 154.832 283.299 155.885 283.299 cv
223.063 283.299 li
224.115 283.299 224.968 284.152 224.968 285.204 cv
cp
f
167.618 284.468 mo
167.677 285.019 167.279 285.513 166.728 285.572 cv
166.177 285.63 165.683 285.232 165.625 284.681 cv
159.47 227.055 li
159.411 226.504 159.81 226.01 160.361 225.951 cv
160.911 225.892 161.405 226.291 161.464 226.842 cv
167.618 284.468 li
cp
f
179.246 285.302 mo
179.263 285.855 178.828 286.317 178.274 286.334 cv
177.721 286.35 177.259 285.915 177.242 285.362 cv
175.501 227.434 li
175.484 226.88 175.919 226.418 176.473 226.402 cv
177.026 226.385 177.488 226.82 177.505 227.374 cv
179.246 285.302 li
cp
f
192.451 285.144 mo
192.415 285.696 191.938 286.116 191.386 286.08 cv
190.833 286.045 190.414 285.568 190.45 285.015 cv
194.166 227.181 li
194.201 226.628 194.678 226.209 195.231 226.244 cv
195.783 226.28 196.203 226.757 196.167 227.309 cv
192.451 285.144 li
cp
f
341.757 284.12 mo
341.66 284.666 342.024 285.186 342.569 285.282 cv
343.115 285.379 343.635 285.015 343.731 284.47 cv
353.826 227.402 li
353.923 226.857 353.559 226.336 353.014 226.24 cv
352.468 226.143 351.948 226.507 351.852 227.053 cv
341.757 284.12 li
cp
.807843 .576471 .203922 rgb
f
273.526 387.039 mo
273.372 387.898 272.55 388.469 271.691 388.314 cv
270.832 388.16 270.261 387.338 270.415 386.479 cv
290.711 273.706 li
290.866 272.847 291.688 272.276 292.547 272.43 cv
293.406 272.585 293.977 273.407 293.822 274.266 cv
273.526 387.039 li
cp
.937255 .784314 .482353 rgb
f
307.729 272.221 mo
307.76 271.348 308.492 270.666 309.365 270.697 cv
310.237 270.728 310.919 271.461 310.888 272.333 cv
306.815 386.845 li
306.784 387.717 306.051 388.399 305.179 388.368 cv
304.307 388.337 303.625 387.605 303.656 386.733 cv
307.729 272.221 li
cp
.807843 .576471 .203922 rgb
f
271.846 364.221 mo
271.846 364.876 272.376 365.406 273.031 365.406 cv
351.265 365.406 li
351.919 365.406 352.45 364.876 352.45 364.221 cv
352.45 363.566 351.919 363.036 351.265 363.036 cv
273.031 363.036 li
272.376 363.036 271.846 363.566 271.846 364.221 cv
cp
.937255 .784314 .482353 rgb
f
349.979 387.039 mo
350.134 387.898 350.956 388.469 351.815 388.314 cv
352.674 388.16 353.245 387.338 353.09 386.479 cv
332.794 273.706 li
332.64 272.847 331.818 272.276 330.959 272.43 cv
330.1 272.585 329.529 273.407 329.684 274.266 cv
349.979 387.039 li
cp
f
319.408 272.221 mo
319.376 271.348 318.644 270.666 317.772 270.697 cv
316.9 270.728 316.217 271.461 316.249 272.333 cv
320.322 386.845 li
320.353 387.717 321.085 388.399 321.958 388.368 cv
322.83 388.337 323.512 387.605 323.481 386.733 cv
319.408 272.221 li
cp
f
280.934 290.465 mo
280.934 292.211 282.349 293.626 284.094 293.626 cv
340.201 293.626 li
341.947 293.626 343.362 292.211 343.362 290.465 cv
343.362 264.387 li
343.362 262.642 341.947 261.226 340.201 261.226 cv
284.094 261.226 li
282.349 261.226 280.934 262.642 280.934 264.387 cv
280.934 290.465 li
cp
.494118 .458824 .564706 rgb
f
281.009 263.714 mo
281.318 262.293 282.58 261.226 284.094 261.226 cv
340.201 261.226 li
341.716 261.226 342.978 262.293 343.287 263.714 cv
281.009 263.714 li
cp
.639216 .592157 .74902 rgb
f
343.362 281.704 mo
343.362 290.465 li
343.362 292.211 341.947 293.626 340.201 293.626 cv
284.094 293.626 li
282.349 293.626 280.934 292.211 280.934 290.465 cv
280.934 281.704 li
343.362 281.704 li
cp
.356863 .317647 .458824 rgb
f
301.435 226.745 mo
301.435 227.814 302.302 228.681 303.371 228.681 cv
354.878 228.681 li
355.947 228.681 356.814 227.814 356.814 226.745 cv
356.814 225.675 355.947 224.808 354.878 224.808 cv
303.371 224.808 li
302.302 224.808 301.435 225.675 301.435 226.745 cv
cp
.937255 .784314 .482353 rgb
f
277.197 285.204 mo
277.197 286.256 278.05 287.109 279.102 287.109 cv
346.281 287.109 li
347.333 287.109 348.186 286.256 348.186 285.204 cv
348.186 284.152 347.333 283.299 346.281 283.299 cv
279.102 283.299 li
278.05 283.299 277.197 284.152 277.197 285.204 cv
cp
f
334.547 284.468 mo
334.488 285.019 334.887 285.513 335.437 285.572 cv
335.988 285.63 336.482 285.232 336.541 284.681 cv
342.695 227.055 li
342.754 226.504 342.355 226.01 341.805 225.951 cv
341.254 225.892 340.76 226.291 340.701 226.842 cv
334.547 284.468 li
cp
f
322.919 285.302 mo
322.902 285.855 323.338 286.317 323.891 286.334 cv
324.445 286.35 324.907 285.915 324.923 285.362 cv
326.665 227.434 li
326.681 226.88 326.246 226.418 325.693 226.402 cv
325.139 226.385 324.677 226.82 324.66 227.374 cv
322.919 285.302 li
cp
f
309.715 285.144 mo
309.75 285.696 310.227 286.116 310.779 286.08 cv
311.332 286.045 311.751 285.568 311.716 285.015 cv
307.999 227.181 li
307.964 226.628 307.487 226.209 306.934 226.244 cv
306.382 226.28 305.963 226.757 305.998 227.309 cv
309.715 285.144 li
cp
f
422.567 284.12 mo
422.663 284.666 422.299 285.186 421.754 285.282 cv
421.209 285.379 420.689 285.015 420.592 284.47 cv
410.497 227.402 li
410.401 226.857 410.765 226.336 411.31 226.24 cv
411.855 226.143 412.375 226.507 412.472 227.053 cv
422.567 284.12 li
cp
.807843 .576471 .203922 rgb
f
490.797 387.039 mo
490.952 387.898 491.773 388.469 492.632 388.314 cv
493.492 388.16 494.063 387.338 493.908 386.479 cv
473.612 273.706 li
473.458 272.847 472.636 272.276 471.777 272.43 cv
470.918 272.585 470.347 273.407 470.501 274.266 cv
490.797 387.039 li
cp
.937255 .784314 .482353 rgb
f
456.594 272.221 mo
456.563 271.348 455.831 270.666 454.959 270.697 cv
454.086 270.728 453.404 271.461 453.435 272.333 cv
457.509 386.845 li
457.54 387.717 458.272 388.399 459.145 388.368 cv
460.017 388.337 460.699 387.605 460.668 386.733 cv
456.594 272.221 li
cp
.807843 .576471 .203922 rgb
f
492.478 364.221 mo
492.478 364.876 491.947 365.406 491.292 365.406 cv
413.059 365.406 li
412.404 365.406 411.873 364.876 411.873 364.221 cv
411.873 363.566 412.404 363.036 413.059 363.036 cv
491.292 363.036 li
491.947 363.036 492.478 363.566 492.478 364.221 cv
cp
.937255 .784314 .482353 rgb
f
414.344 387.039 mo
414.19 387.898 413.368 388.469 412.509 388.314 cv
411.65 388.16 411.079 387.338 411.233 386.479 cv
431.529 273.706 li
431.684 272.847 432.505 272.276 433.365 272.43 cv
434.224 272.585 434.795 273.407 434.64 274.266 cv
414.344 387.039 li
cp
f
444.916 272.221 mo
444.947 271.348 445.679 270.666 446.552 270.697 cv
447.424 270.728 448.106 271.461 448.075 272.333 cv
444.002 386.845 li
443.971 387.717 443.238 388.399 442.366 388.368 cv
441.494 388.337 440.812 387.605 440.843 386.733 cv
444.916 272.221 li
cp
f
483.39 290.465 mo
483.39 292.211 481.975 293.626 480.229 293.626 cv
424.122 293.626 li
422.376 293.626 420.961 292.211 420.961 290.465 cv
420.961 264.387 li
420.961 262.642 422.376 261.226 424.122 261.226 cv
480.229 261.226 li
481.975 261.226 483.39 262.642 483.39 264.387 cv
483.39 290.465 li
cp
.866667 .372549 .32549 rgb
f
483.315 263.714 mo
483.006 262.293 481.743 261.226 480.229 261.226 cv
424.122 261.226 li
422.608 261.226 421.345 262.293 421.036 263.714 cv
483.315 263.714 li
cp
1 .52549 .501961 rgb
f
420.961 281.704 mo
420.961 290.465 li
420.961 292.211 422.376 293.626 424.122 293.626 cv
480.229 293.626 li
481.975 293.626 483.39 292.211 483.39 290.465 cv
483.39 281.704 li
420.961 281.704 li
cp
.686275 .254902 .235294 rgb
f
462.889 226.745 mo
462.889 227.814 462.022 228.681 460.952 228.681 cv
409.446 228.681 li
408.376 228.681 407.509 227.814 407.509 226.745 cv
407.509 225.675 408.376 224.808 409.446 224.808 cv
460.952 224.808 li
462.022 224.808 462.889 225.675 462.889 226.745 cv
cp
.937255 .784314 .482353 rgb
f
487.126 285.204 mo
487.126 286.256 486.273 287.109 485.221 287.109 cv
418.043 287.109 li
416.991 287.109 416.138 286.256 416.138 285.204 cv
416.138 284.152 416.991 283.299 418.043 283.299 cv
485.221 283.299 li
486.273 283.299 487.126 284.152 487.126 285.204 cv
cp
f
429.777 284.468 mo
429.836 285.019 429.437 285.513 428.886 285.572 cv
428.336 285.63 427.842 285.232 427.783 284.681 cv
421.628 227.055 li
421.57 226.504 421.968 226.01 422.519 225.951 cv
423.069 225.892 423.563 226.291 423.622 226.842 cv
429.777 284.468 li
cp
f
441.405 285.302 mo
441.421 285.855 440.986 286.317 440.432 286.334 cv
439.879 286.35 439.417 285.915 439.4 285.362 cv
437.659 227.434 li
437.642 226.88 438.077 226.418 438.631 226.402 cv
439.184 226.385 439.647 226.82 439.663 227.374 cv
441.405 285.302 li
cp
f
454.609 285.144 mo
454.573 285.696 454.097 286.116 453.544 286.08 cv
452.991 286.045 452.572 285.568 452.608 285.015 cv
456.324 227.181 li
456.36 226.628 456.836 226.209 457.389 226.244 cv
457.942 226.28 458.361 226.757 458.325 227.309 cv
454.609 285.144 li
cp
f
600 5.59884 mo
600 7.56441 598.407 9.15777 596.441 9.15777 cv
453.155 9.15777 li
451.19 9.15777 449.596 7.56441 449.596 5.59884 cv
449.596 3.63328 451.19 2.03992 453.155 2.03992 cv
596.441 2.03992 li
598.407 2.03992 600 3.63328 600 5.59884 cv
.427451 .313726 .207843 rgb
f
594.021 34.1117 mo
581.46 34.1117 li
581.575 32.8469 581.735 30.3713 581.346 29.3476 cv
581.069 28.6197 580.702 27.9364 580.347 27.2756 cv
579.667 26.0108 579.026 24.8162 579.026 23.3996 cv
579.026 20.8906 580.376 18.1761 582.052 16.2857 cv
593.348 16.2857 li
594.968 18.106 596.326 20.7129 596.326 23.3996 cv
596.326 24.7775 595.717 25.9504 595.073 27.1918 cv
594.739 27.8376 594.392 28.5054 594.13 29.2131 cv
593.741 30.2679 593.906 32.8228 594.021 34.1117 cv
.866667 .823529 .760784 rgb
f
593.348 16.2857 mo
582.052 16.2857 li
583.103 15.0989 584.283 14.2367 585.337 13.9547 cv
585.967 13.7858 586.99 13.6793 587.983 13.6793 cv
588.853 13.6793 589.7 13.7612 590.239 13.9547 cv
591.195 14.2981 592.324 15.1346 593.348 16.2857 cv
.811765 .74902 .701961 rgb
f
589.997 2.03992 mo
589.997 2.03992 li
593.668 1.79287 596.376 .975818 596.436 0 cv
596.436 0 li
596.376 .975818 593.668 1.79287 589.997 2.03992 cv
.74902 .666667 .603922 rgb
f
594.747 34.7686 mo
580.732 34.7686 li
580.732 34.7686 580.937 33.0051 580.937 31.4692 cv
580.937 30.6989 580.886 29.9859 580.732 29.5811 cv
579.948 27.5227 578.369 25.7756 578.369 23.3995 cv
578.369 20.8723 579.261 18.3839 580.805 16.2857 cv
582.052 16.2857 li
580.376 18.1761 579.026 20.8906 579.026 23.3996 cv
579.026 24.8162 579.667 26.0108 580.347 27.2756 cv
580.702 27.9364 581.069 28.6197 581.346 29.3476 cv
581.735 30.3713 581.575 32.8469 581.46 34.1117 cv
594.021 34.1117 li
593.906 32.8228 593.741 30.2679 594.13 29.2131 cv
594.392 28.5054 594.739 27.8376 595.073 27.1918 cv
595.717 25.9504 596.326 24.7775 596.326 23.3996 cv
596.326 20.7129 594.968 18.106 593.348 16.2857 cv
594.776 16.2857 li
596.25 18.381 596.982 20.8494 596.982 23.3995 cv
596.982 25.7072 595.488 27.4334 594.747 29.4408 cv
594.593 29.8581 594.542 30.5909 594.542 31.382 cv
594.542 32.9595 594.747 34.7686 594.747 34.7686 cv
.945098 .929412 .905882 rgb
f
594.776 16.2857 mo
593.348 16.2857 li
592.324 15.1346 591.195 14.2981 590.239 13.9547 cv
589.7 13.7612 588.853 13.6793 587.983 13.6793 cv
586.99 13.6793 585.967 13.7858 585.337 13.9547 cv
584.283 14.2367 583.103 15.0989 582.052 16.2857 cv
580.805 16.2857 li
582.018 14.6362 583.634 13.228 585.536 12.2312 cv
586.914 11.5089 587.117 10.9098 587.117 9.92488 cv
587.117 9.69281 587.106 9.43934 587.096 9.15777 cv
588.456 9.15777 li
588.445 9.45015 588.433 9.71243 588.433 9.95197 cv
588.433 10.9247 588.641 11.5215 590.022 12.2285 cv
592.053 13.2687 593.636 14.6657 594.776 16.2857 cv
589.997 2.03992 mo
585.336 2.03992 li
581.673 1.79153 578.975 .974317 578.915 0 cv
596.436 0 li
596.376 .975818 593.668 1.79287 589.997 2.03992 cv
.92549 .898039 .882353 rgb
f
588.456 9.15777 mo
587.096 9.15777 li
587.088 8.93951 587.081 8.70437 587.081 8.44926 cv
587.081 5.85014 586.776 3.54541 585.904 2.07341 cv
585.712 2.06377 585.523 2.05257 585.336 2.03992 cv
589.997 2.03992 li
589.854 2.04955 589.709 2.05833 589.563 2.0662 cv
588.688 3.53775 588.471 5.84728 588.471 8.44926 cv
588.471 8.7042 588.464 8.93939 588.456 9.15777 cv
.929412 .917647 .905882 rgb
f
586.981 1.51644 mo
587.126 1.10861 587.267 .698857 587.401 .285974 cv
579.925 .285974 li
579.979 .88146 582.472 1.37799 585.825 1.51644 cv
586.981 1.51644 li
cp
1 1 1 rgb
f
586.826 29.4046 mo
586.313 27.401 585.829 25.5086 585.829 23.2646 cv
585.829 20.1073 586.474 16.7487 587.372 13.998 cv
586.586 13.9855 585.756 14.087 585.254 14.2625 cv
583.192 14.9824 580.491 19.5413 580.491 23.5632 cv
580.491 24.9581 580.975 26.1345 581.488 27.38 cv
581.756 28.0307 582.033 28.7035 582.242 29.4202 cv
582.536 30.4285 582.415 32.8662 582.328 34.1117 cv
587.414 34.1117 li
587.414 31.9019 li
587.233 31.0419 587.031 30.207 586.826 29.4046 cv
cp
f
573.021 34.1117 mo
560.46 34.1117 li
560.575 32.8469 560.735 30.3713 560.346 29.3476 cv
560.069 28.6197 559.702 27.9364 559.347 27.2756 cv
558.667 26.0108 558.026 24.8162 558.026 23.3996 cv
558.026 20.8906 559.376 18.1761 561.052 16.2857 cv
572.348 16.2857 li
573.968 18.106 575.326 20.7129 575.326 23.3996 cv
575.326 24.7775 574.718 25.9504 574.073 27.1918 cv
573.739 27.8376 573.392 28.5054 573.13 29.2131 cv
572.741 30.2679 572.906 32.8228 573.021 34.1117 cv
.866667 .823529 .760784 rgb
f
572.348 16.2857 mo
561.052 16.2857 li
562.103 15.0989 563.283 14.2367 564.337 13.9547 cv
564.967 13.7858 565.99 13.6793 566.983 13.6793 cv
567.853 13.6793 568.7 13.7612 569.239 13.9547 cv
570.195 14.2981 571.324 15.1346 572.348 16.2857 cv
.811765 .74902 .701961 rgb
f
568.997 2.03992 mo
568.997 2.03992 li
572.668 1.79287 575.376 .975818 575.436 0 cv
575.436 0 li
575.376 .975818 572.668 1.79287 568.997 2.03992 cv
.74902 .666667 .603922 rgb
f
573.747 34.7686 mo
559.732 34.7686 li
559.732 34.7686 559.937 33.0051 559.937 31.4692 cv
559.937 30.6989 559.886 29.9859 559.732 29.5811 cv
558.948 27.5227 557.369 25.7756 557.369 23.3995 cv
557.369 20.8723 558.261 18.3839 559.805 16.2857 cv
561.052 16.2857 li
559.376 18.1761 558.026 20.8906 558.026 23.3996 cv
558.026 24.8162 558.667 26.0108 559.347 27.2756 cv
559.702 27.9364 560.069 28.6197 560.346 29.3476 cv
560.735 30.3713 560.575 32.8469 560.46 34.1117 cv
573.021 34.1117 li
572.906 32.8228 572.741 30.2679 573.13 29.2131 cv
573.392 28.5054 573.739 27.8376 574.073 27.1918 cv
574.718 25.9504 575.326 24.7775 575.326 23.3996 cv
575.326 20.7129 573.968 18.106 572.348 16.2857 cv
573.776 16.2857 li
575.25 18.381 575.983 20.8494 575.983 23.3995 cv
575.983 25.7072 574.488 27.4334 573.747 29.4408 cv
573.593 29.8581 573.542 30.5909 573.542 31.382 cv
573.542 32.9595 573.747 34.7686 573.747 34.7686 cv
.945098 .929412 .905882 rgb
f
573.776 16.2857 mo
572.348 16.2857 li
571.324 15.1346 570.195 14.2981 569.239 13.9547 cv
568.7 13.7612 567.853 13.6793 566.983 13.6793 cv
565.99 13.6793 564.967 13.7858 564.337 13.9547 cv
563.283 14.2367 562.103 15.0989 561.052 16.2857 cv
559.805 16.2857 li
561.018 14.6362 562.634 13.228 564.536 12.2312 cv
565.914 11.5089 566.117 10.9098 566.117 9.92488 cv
566.117 9.69281 566.106 9.43934 566.096 9.15777 cv
567.456 9.15777 li
567.445 9.45015 567.433 9.71243 567.433 9.95197 cv
567.433 10.9247 567.641 11.5215 569.022 12.2285 cv
571.053 13.2687 572.636 14.6657 573.776 16.2857 cv
568.997 2.03992 mo
564.336 2.03992 li
560.673 1.79153 557.975 .974317 557.915 0 cv
575.436 0 li
575.376 .975818 572.668 1.79287 568.997 2.03992 cv
.92549 .898039 .882353 rgb
f
567.456 9.15777 mo
566.096 9.15777 li
566.088 8.93951 566.081 8.70437 566.081 8.44926 cv
566.081 5.85014 565.776 3.54541 564.904 2.07341 cv
564.712 2.06377 564.523 2.05257 564.336 2.03992 cv
568.997 2.03992 li
568.854 2.04955 568.709 2.05833 568.563 2.0662 cv
567.688 3.53775 567.471 5.84728 567.471 8.44926 cv
567.471 8.7042 567.464 8.93939 567.456 9.15777 cv
.929412 .917647 .905882 rgb
f
565.981 1.51644 mo
566.126 1.10861 566.267 .698857 566.401 .285974 cv
558.925 .285974 li
558.979 .88146 561.472 1.37799 564.825 1.51644 cv
565.981 1.51644 li
cp
1 1 1 rgb
f
565.826 29.4046 mo
565.313 27.401 564.829 25.5086 564.829 23.2646 cv
564.829 20.1073 565.474 16.7487 566.372 13.998 cv
565.586 13.9855 564.756 14.087 564.254 14.2625 cv
562.192 14.9824 559.491 19.5413 559.491 23.5632 cv
559.491 24.9581 559.975 26.1345 560.488 27.38 cv
560.756 28.0307 561.033 28.7035 561.242 29.4202 cv
561.536 30.4285 561.415 32.8662 561.328 34.1117 cv
566.414 34.1117 li
566.414 31.9019 li
566.233 31.0419 566.031 30.207 565.826 29.4046 cv
cp
f
552.021 34.1117 mo
539.46 34.1117 li
539.575 32.8469 539.736 30.3713 539.346 29.3476 cv
539.069 28.6197 538.702 27.9364 538.347 27.2756 cv
537.667 26.0108 537.026 24.8162 537.026 23.3996 cv
537.026 20.8906 538.376 18.1761 540.052 16.2857 cv
551.348 16.2857 li
552.968 18.106 554.326 20.7129 554.326 23.3996 cv
554.326 24.7775 553.718 25.9504 553.073 27.1918 cv
552.738 27.8376 552.392 28.5054 552.13 29.2131 cv
551.741 30.2679 551.906 32.8228 552.021 34.1117 cv
.866667 .823529 .760784 rgb
f
551.348 16.2857 mo
540.052 16.2857 li
541.103 15.0989 542.283 14.2367 543.337 13.9547 cv
543.967 13.7858 544.99 13.6793 545.983 13.6793 cv
546.853 13.6793 547.7 13.7612 548.239 13.9547 cv
549.195 14.2981 550.324 15.1346 551.348 16.2857 cv
.811765 .74902 .701961 rgb
f
547.997 2.03992 mo
547.997 2.03992 li
551.668 1.79287 554.376 .975818 554.436 0 cv
554.436 0 li
554.376 .975818 551.668 1.79287 547.997 2.03992 cv
.74902 .666667 .603922 rgb
f
552.747 34.7686 mo
538.732 34.7686 li
538.732 34.7686 538.937 33.0051 538.937 31.4692 cv
538.937 30.6989 538.886 29.9859 538.732 29.5811 cv
537.948 27.5227 536.369 25.7756 536.369 23.3995 cv
536.369 20.8723 537.261 18.3839 538.805 16.2857 cv
540.052 16.2857 li
538.376 18.1761 537.026 20.8906 537.026 23.3996 cv
537.026 24.8162 537.667 26.0108 538.347 27.2756 cv
538.702 27.9364 539.069 28.6197 539.346 29.3476 cv
539.736 30.3713 539.575 32.8469 539.46 34.1117 cv
552.021 34.1117 li
551.906 32.8228 551.741 30.2679 552.13 29.2131 cv
552.392 28.5054 552.738 27.8376 553.073 27.1918 cv
553.718 25.9504 554.326 24.7775 554.326 23.3996 cv
554.326 20.7129 552.968 18.106 551.348 16.2857 cv
552.776 16.2857 li
554.25 18.381 554.983 20.8494 554.983 23.3995 cv
554.983 25.7072 553.488 27.4334 552.747 29.4408 cv
552.593 29.8581 552.542 30.5909 552.542 31.382 cv
552.542 32.9595 552.747 34.7686 552.747 34.7686 cv
.945098 .929412 .905882 rgb
f
552.776 16.2857 mo
551.348 16.2857 li
550.324 15.1346 549.195 14.2981 548.239 13.9547 cv
547.7 13.7612 546.853 13.6793 545.983 13.6793 cv
544.99 13.6793 543.967 13.7858 543.337 13.9547 cv
542.283 14.2367 541.103 15.0989 540.052 16.2857 cv
538.805 16.2857 li
540.018 14.6362 541.634 13.228 543.536 12.2312 cv
544.914 11.5089 545.117 10.9098 545.117 9.92488 cv
545.117 9.69281 545.106 9.43934 545.096 9.15777 cv
546.456 9.15777 li
546.445 9.45015 546.433 9.71243 546.433 9.95197 cv
546.433 10.9247 546.641 11.5215 548.022 12.2285 cv
550.053 13.2687 551.636 14.6657 552.776 16.2857 cv
547.997 2.03992 mo
543.336 2.03992 li
539.673 1.79153 536.975 .974317 536.915 0 cv
554.436 0 li
554.376 .975818 551.668 1.79287 547.997 2.03992 cv
.92549 .898039 .882353 rgb
f
546.456 9.15777 mo
545.096 9.15777 li
545.088 8.93951 545.081 8.70437 545.081 8.44926 cv
545.081 5.85014 544.776 3.54541 543.904 2.07341 cv
543.712 2.06377 543.523 2.05257 543.336 2.03992 cv
547.997 2.03992 li
547.854 2.04955 547.709 2.05833 547.563 2.0662 cv
546.688 3.53775 546.471 5.84728 546.471 8.44926 cv
546.471 8.7042 546.464 8.93939 546.456 9.15777 cv
.929412 .917647 .905882 rgb
f
544.981 1.51644 mo
545.126 1.10861 545.267 .698857 545.401 .285974 cv
537.925 .285974 li
537.979 .88146 540.472 1.37799 543.825 1.51644 cv
544.981 1.51644 li
cp
1 1 1 rgb
f
544.826 29.4046 mo
544.313 27.401 543.829 25.5086 543.829 23.2646 cv
543.829 20.1073 544.474 16.7487 545.372 13.998 cv
544.586 13.9855 543.756 14.087 543.254 14.2625 cv
541.192 14.9824 538.491 19.5413 538.491 23.5632 cv
538.491 24.9581 538.975 26.1345 539.488 27.38 cv
539.756 28.0307 540.033 28.7035 540.242 29.4202 cv
540.536 30.4285 540.415 32.8662 540.328 34.1117 cv
545.414 34.1117 li
545.414 31.9019 li
545.233 31.0419 545.031 30.207 544.826 29.4046 cv
cp
f
531.021 34.1117 mo
518.46 34.1117 li
518.575 32.8469 518.735 30.3713 518.346 29.3476 cv
518.069 28.6197 517.702 27.9364 517.347 27.2756 cv
516.667 26.0108 516.026 24.8162 516.026 23.3996 cv
516.026 20.8906 517.376 18.1761 519.052 16.2857 cv
530.348 16.2857 li
531.968 18.106 533.326 20.7129 533.326 23.3996 cv
533.326 24.7775 532.718 25.9504 532.073 27.1918 cv
531.739 27.8376 531.392 28.5054 531.13 29.2131 cv
530.741 30.2679 530.906 32.8228 531.021 34.1117 cv
.866667 .823529 .760784 rgb
f
530.348 16.2857 mo
519.052 16.2857 li
520.103 15.0989 521.283 14.2367 522.337 13.9547 cv
522.967 13.7858 523.99 13.6793 524.983 13.6793 cv
525.853 13.6793 526.7 13.7612 527.239 13.9547 cv
528.195 14.2981 529.324 15.1346 530.348 16.2857 cv
.811765 .74902 .701961 rgb
f
526.997 2.03992 mo
526.997 2.03992 li
530.668 1.79287 533.376 .975818 533.436 0 cv
533.436 0 li
533.376 .975818 530.668 1.79287 526.997 2.03992 cv
.74902 .666667 .603922 rgb
f
531.747 34.7686 mo
517.732 34.7686 li
517.732 34.7686 517.937 33.0051 517.937 31.4692 cv
517.937 30.6989 517.886 29.9859 517.732 29.5811 cv
516.948 27.5227 515.369 25.7756 515.369 23.3995 cv
515.369 20.8723 516.261 18.3839 517.805 16.2857 cv
519.052 16.2857 li
517.376 18.1761 516.026 20.8906 516.026 23.3996 cv
516.026 24.8162 516.667 26.0108 517.347 27.2756 cv
517.702 27.9364 518.069 28.6197 518.346 29.3476 cv
518.735 30.3713 518.575 32.8469 518.46 34.1117 cv
531.021 34.1117 li
530.906 32.8228 530.741 30.2679 531.13 29.2131 cv
531.392 28.5054 531.739 27.8376 532.073 27.1918 cv
532.718 25.9504 533.326 24.7775 533.326 23.3996 cv
533.326 20.7129 531.968 18.106 530.348 16.2857 cv
531.776 16.2857 li
533.25 18.381 533.983 20.8494 533.983 23.3995 cv
533.983 25.7072 532.488 27.4334 531.747 29.4408 cv
531.593 29.8581 531.542 30.5909 531.542 31.382 cv
531.542 32.9595 531.747 34.7686 531.747 34.7686 cv
.945098 .929412 .905882 rgb
f
531.776 16.2857 mo
530.348 16.2857 li
529.324 15.1346 528.195 14.2981 527.239 13.9547 cv
526.7 13.7612 525.853 13.6793 524.983 13.6793 cv
523.99 13.6793 522.967 13.7858 522.337 13.9547 cv
521.283 14.2367 520.103 15.0989 519.052 16.2857 cv
517.805 16.2857 li
519.018 14.6362 520.634 13.228 522.536 12.2312 cv
523.914 11.5089 524.117 10.9098 524.117 9.92488 cv
524.117 9.69281 524.106 9.43934 524.096 9.15777 cv
525.456 9.15777 li
525.445 9.45015 525.433 9.71243 525.433 9.95197 cv
525.433 10.9247 525.641 11.5215 527.022 12.2285 cv
529.053 13.2687 530.636 14.6657 531.776 16.2857 cv
526.997 2.03992 mo
522.336 2.03992 li
518.673 1.79153 515.975 .974317 515.915 0 cv
533.436 0 li
533.376 .975818 530.668 1.79287 526.997 2.03992 cv
.92549 .898039 .882353 rgb
f
525.456 9.15777 mo
524.096 9.15777 li
524.088 8.93951 524.081 8.70437 524.081 8.44926 cv
524.081 5.85014 523.776 3.54541 522.904 2.07341 cv
522.712 2.06377 522.523 2.05257 522.336 2.03992 cv
526.997 2.03992 li
526.854 2.04955 526.709 2.05833 526.563 2.0662 cv
525.688 3.53775 525.471 5.84728 525.471 8.44926 cv
525.471 8.7042 525.464 8.93939 525.456 9.15777 cv
.929412 .917647 .905882 rgb
f
523.981 1.51644 mo
524.126 1.10861 524.267 .698857 524.401 .285974 cv
516.925 .285974 li
516.979 .88146 519.472 1.37799 522.825 1.51644 cv
523.981 1.51644 li
cp
1 1 1 rgb
f
523.826 29.4046 mo
523.313 27.401 522.829 25.5086 522.829 23.2646 cv
522.829 20.1073 523.474 16.7487 524.372 13.998 cv
523.586 13.9855 522.756 14.087 522.254 14.2625 cv
520.192 14.9824 517.491 19.5413 517.491 23.5632 cv
517.491 24.9581 517.975 26.1345 518.488 27.38 cv
518.756 28.0307 519.033 28.7035 519.242 29.4202 cv
519.536 30.4285 519.415 32.8662 519.328 34.1117 cv
524.414 34.1117 li
524.414 31.9019 li
524.233 31.0419 524.031 30.207 523.826 29.4046 cv
cp
f
510.021 34.1117 mo
497.46 34.1117 li
497.575 32.8469 497.735 30.3713 497.346 29.3476 cv
497.069 28.6197 496.702 27.9364 496.347 27.2756 cv
495.667 26.0108 495.026 24.8162 495.026 23.3996 cv
495.026 20.8906 496.376 18.1761 498.052 16.2857 cv
509.348 16.2857 li
510.968 18.106 512.326 20.7129 512.326 23.3996 cv
512.326 24.7775 511.718 25.9504 511.073 27.1918 cv
510.739 27.8376 510.392 28.5054 510.13 29.2131 cv
509.741 30.2679 509.906 32.8228 510.021 34.1117 cv
.866667 .823529 .760784 rgb
f
509.348 16.2857 mo
498.052 16.2857 li
499.103 15.0989 500.283 14.2367 501.337 13.9547 cv
501.967 13.7858 502.99 13.6793 503.983 13.6793 cv
504.853 13.6793 505.7 13.7612 506.239 13.9547 cv
507.195 14.2981 508.324 15.1346 509.348 16.2857 cv
.811765 .74902 .701961 rgb
f
505.997 2.03992 mo
505.997 2.03992 li
509.668 1.79287 512.376 .975818 512.436 0 cv
512.436 0 li
512.376 .975818 509.668 1.79287 505.997 2.03992 cv
.74902 .666667 .603922 rgb
f
504.456 9.15777 mo
504.456 9.15777 li
504.464 8.93939 504.471 8.7042 504.471 8.44926 cv
504.471 5.84728 504.688 3.53775 505.563 2.0662 cv
505.709 2.05833 505.854 2.04955 505.997 2.03992 cv
505.997 2.03992 li
505.854 2.04955 505.709 2.05833 505.563 2.0662 cv
504.688 3.53775 504.471 5.84728 504.471 8.44926 cv
504.471 8.7042 504.464 8.93939 504.456 9.15777 cv
.772549 .72549 .682353 rgb
f
510.747 34.7686 mo
496.732 34.7686 li
496.732 34.7686 496.937 33.0051 496.937 31.4692 cv
496.937 30.6989 496.886 29.9859 496.732 29.5811 cv
495.948 27.5227 494.369 25.7756 494.369 23.3995 cv
494.369 20.8723 495.261 18.3839 496.805 16.2857 cv
498.052 16.2857 li
496.376 18.1761 495.026 20.8906 495.026 23.3996 cv
495.026 24.8162 495.667 26.0108 496.347 27.2756 cv
496.702 27.9364 497.069 28.6197 497.346 29.3476 cv
497.735 30.3713 497.575 32.8469 497.46 34.1117 cv
510.021 34.1117 li
509.906 32.8228 509.741 30.2679 510.13 29.2131 cv
510.392 28.5054 510.739 27.8376 511.073 27.1918 cv
511.718 25.9504 512.326 24.7775 512.326 23.3996 cv
512.326 20.7129 510.968 18.106 509.348 16.2857 cv
510.776 16.2857 li
512.25 18.381 512.983 20.8494 512.983 23.3995 cv
512.983 25.7072 511.488 27.4334 510.747 29.4408 cv
510.593 29.8581 510.542 30.5909 510.542 31.382 cv
510.542 32.9595 510.747 34.7686 510.747 34.7686 cv
.945098 .929412 .905882 rgb
f
510.776 16.2857 mo
509.348 16.2857 li
508.324 15.1346 507.195 14.2981 506.239 13.9547 cv
505.7 13.7612 504.853 13.6793 503.983 13.6793 cv
502.99 13.6793 501.967 13.7858 501.337 13.9547 cv
500.283 14.2367 499.103 15.0989 498.052 16.2857 cv
496.805 16.2857 li
498.018 14.6362 499.634 13.228 501.536 12.2312 cv
502.914 11.5089 503.117 10.9098 503.117 9.92488 cv
503.117 9.69281 503.106 9.43934 503.096 9.15777 cv
504.456 9.15777 li
504.445 9.45015 504.433 9.71243 504.433 9.95197 cv
504.433 10.9247 504.641 11.5215 506.022 12.2285 cv
508.053 13.2687 509.636 14.6657 510.776 16.2857 cv
505.997 2.03992 mo
501.336 2.03992 li
497.673 1.79153 494.975 .974317 494.915 0 cv
512.436 0 li
512.376 .975818 509.668 1.79287 505.997 2.03992 cv
.92549 .898039 .882353 rgb
f
504.456 9.15777 mo
503.096 9.15777 li
503.088 8.93951 503.081 8.70437 503.081 8.44926 cv
503.081 5.85014 502.776 3.54541 501.903 2.07341 cv
501.712 2.06377 501.523 2.05257 501.336 2.03992 cv
505.997 2.03992 li
505.854 2.04955 505.709 2.05833 505.563 2.0662 cv
504.688 3.53775 504.471 5.84728 504.471 8.44926 cv
504.471 8.7042 504.464 8.93939 504.456 9.15777 cv
.929412 .917647 .905882 rgb
f
502.981 1.51644 mo
503.126 1.10861 503.267 .698857 503.401 .285974 cv
495.925 .285974 li
495.979 .88146 498.472 1.37799 501.825 1.51644 cv
502.981 1.51644 li
cp
1 1 1 rgb
f
502.826 29.4046 mo
502.313 27.401 501.829 25.5086 501.829 23.2646 cv
501.829 20.1073 502.474 16.7487 503.372 13.998 cv
502.586 13.9855 501.756 14.087 501.254 14.2625 cv
499.192 14.9824 496.491 19.5413 496.491 23.5632 cv
496.491 24.9581 496.975 26.1345 497.488 27.38 cv
497.756 28.0307 498.033 28.7035 498.242 29.4202 cv
498.536 30.4285 498.415 32.8662 498.328 34.1117 cv
503.414 34.1117 li
503.414 31.9019 li
503.233 31.0419 503.031 30.207 502.826 29.4046 cv
cp
f
489.021 34.1117 mo
476.46 34.1117 li
476.575 32.8469 476.735 30.3713 476.346 29.3476 cv
476.069 28.6197 475.702 27.9364 475.347 27.2756 cv
474.667 26.0108 474.026 24.8162 474.026 23.3996 cv
474.026 20.8906 475.376 18.1761 477.052 16.2857 cv
488.348 16.2857 li
489.968 18.106 491.326 20.7129 491.326 23.3996 cv
491.326 24.7775 490.718 25.9504 490.074 27.1918 cv
489.739 27.8376 489.392 28.5054 489.13 29.2131 cv
488.741 30.2679 488.906 32.8228 489.021 34.1117 cv
.866667 .823529 .760784 rgb
f
488.348 16.2857 mo
477.052 16.2857 li
478.103 15.0989 479.283 14.2367 480.337 13.9547 cv
480.967 13.7858 481.991 13.6793 482.983 13.6793 cv
483.853 13.6793 484.7 13.7612 485.239 13.9547 cv
486.195 14.2981 487.324 15.1346 488.348 16.2857 cv
.811765 .74902 .701961 rgb
f
484.997 2.03992 mo
484.997 2.03992 li
488.668 1.79287 491.376 .975818 491.436 0 cv
491.436 0 li
491.376 .975818 488.668 1.79287 484.997 2.03992 cv
.74902 .666667 .603922 rgb
f
483.456 9.15777 mo
483.456 9.15777 li
483.464 8.93939 483.471 8.7042 483.471 8.44926 cv
483.471 5.84728 483.688 3.53775 484.563 2.0662 cv
484.709 2.05833 484.854 2.04955 484.997 2.03992 cv
484.997 2.03992 li
484.854 2.04955 484.709 2.05833 484.563 2.0662 cv
483.689 3.53775 483.471 5.84728 483.471 8.44926 cv
483.471 8.7042 483.464 8.93939 483.456 9.15777 cv
.772549 .72549 .682353 rgb
f
489.747 34.7686 mo
475.732 34.7686 li
475.732 34.7686 475.937 33.0051 475.937 31.4692 cv
475.937 30.6989 475.886 29.9859 475.732 29.5811 cv
474.948 27.5227 473.369 25.7756 473.369 23.3995 cv
473.369 20.8723 474.261 18.3839 475.805 16.2857 cv
477.052 16.2857 li
475.376 18.1761 474.026 20.8906 474.026 23.3996 cv
474.026 24.8162 474.667 26.0108 475.347 27.2756 cv
475.702 27.9364 476.069 28.6197 476.346 29.3476 cv
476.735 30.3713 476.575 32.8469 476.46 34.1117 cv
489.021 34.1117 li
488.906 32.8228 488.741 30.2679 489.13 29.2131 cv
489.392 28.5054 489.739 27.8376 490.074 27.1918 cv
490.718 25.9504 491.326 24.7775 491.326 23.3996 cv
491.326 20.7129 489.968 18.106 488.348 16.2857 cv
489.776 16.2857 li
491.25 18.381 491.983 20.8494 491.983 23.3995 cv
491.983 25.7072 490.488 27.4334 489.747 29.4408 cv
489.593 29.8581 489.542 30.5909 489.542 31.382 cv
489.542 32.9595 489.747 34.7686 489.747 34.7686 cv
.945098 .929412 .905882 rgb
f
489.776 16.2857 mo
488.348 16.2857 li
487.324 15.1346 486.195 14.2981 485.239 13.9547 cv
484.7 13.7612 483.853 13.6793 482.983 13.6793 cv
481.991 13.6793 480.967 13.7858 480.337 13.9547 cv
479.283 14.2367 478.103 15.0989 477.052 16.2857 cv
475.805 16.2857 li
477.018 14.6362 478.634 13.228 480.536 12.2312 cv
481.914 11.5089 482.117 10.9098 482.117 9.92488 cv
482.117 9.69281 482.106 9.43934 482.096 9.15777 cv
483.456 9.15777 li
483.445 9.45015 483.433 9.71243 483.433 9.95197 cv
483.433 10.9247 483.641 11.5215 485.022 12.2285 cv
487.053 13.2687 488.636 14.6657 489.776 16.2857 cv
484.997 2.03992 mo
480.336 2.03992 li
476.673 1.79153 473.975 .974317 473.915 0 cv
491.436 0 li
491.376 .975818 488.668 1.79287 484.997 2.03992 cv
.92549 .898039 .882353 rgb
f
483.456 9.15777 mo
482.096 9.15777 li
482.088 8.93951 482.081 8.70437 482.081 8.44926 cv
482.081 5.85014 481.776 3.54541 480.903 2.07341 cv
480.712 2.06377 480.523 2.05257 480.336 2.03992 cv
484.997 2.03992 li
484.854 2.04955 484.709 2.05833 484.563 2.0662 cv
483.688 3.53775 483.471 5.84728 483.471 8.44926 cv
483.471 8.7042 483.464 8.93939 483.456 9.15777 cv
.929412 .917647 .905882 rgb
f
481.981 1.51644 mo
482.126 1.10861 482.267 .698857 482.401 .285974 cv
474.925 .285974 li
474.979 .88146 477.472 1.37799 480.825 1.51644 cv
481.981 1.51644 li
cp
1 1 1 rgb
f
481.826 29.4046 mo
481.313 27.401 480.829 25.5086 480.829 23.2646 cv
480.829 20.1073 481.474 16.7487 482.372 13.998 cv
481.586 13.9855 480.756 14.087 480.254 14.2625 cv
478.192 14.9824 475.491 19.5413 475.491 23.5632 cv
475.491 24.9581 475.975 26.1345 476.488 27.38 cv
476.756 28.0307 477.033 28.7035 477.242 29.4202 cv
477.536 30.4285 477.415 32.8662 477.328 34.1117 cv
482.414 34.1117 li
482.414 31.9019 li
482.233 31.0419 482.031 30.207 481.826 29.4046 cv
cp
f
468.021 34.1117 mo
455.46 34.1117 li
455.575 32.8469 455.735 30.3713 455.346 29.3476 cv
455.069 28.6197 454.702 27.9364 454.347 27.2756 cv
453.667 26.0108 453.026 24.8162 453.026 23.3996 cv
453.026 20.8906 454.376 18.1761 456.052 16.2857 cv
467.348 16.2857 li
468.968 18.106 470.326 20.7129 470.326 23.3996 cv
470.326 24.7775 469.718 25.9504 469.074 27.1918 cv
468.739 27.8376 468.392 28.5054 468.13 29.2131 cv
467.741 30.2679 467.906 32.8228 468.021 34.1117 cv
.866667 .823529 .760784 rgb
f
467.348 16.2857 mo
456.052 16.2857 li
457.103 15.0989 458.283 14.2367 459.337 13.9547 cv
459.967 13.7858 460.991 13.6793 461.983 13.6793 cv
462.853 13.6793 463.7 13.7612 464.239 13.9547 cv
465.195 14.2981 466.324 15.1346 467.348 16.2857 cv
.811765 .74902 .701961 rgb
f
462.456 9.15777 mo
462.456 9.15777 li
462.464 8.93939 462.471 8.7042 462.471 8.44926 cv
462.471 5.84728 462.688 3.53775 463.563 2.0662 cv
463.709 2.05833 463.854 2.04955 463.997 2.03992 cv
463.997 2.03992 li
463.854 2.04955 463.709 2.05833 463.563 2.0662 cv
462.689 3.53775 462.471 5.84728 462.471 8.44926 cv
462.471 8.7042 462.464 8.93939 462.456 9.15777 cv
.772549 .72549 .682353 rgb
f
468.747 34.7686 mo
454.732 34.7686 li
454.732 34.7686 454.937 33.0051 454.937 31.4692 cv
454.937 30.6989 454.886 29.9859 454.732 29.5811 cv
453.948 27.5227 452.369 25.7756 452.369 23.3995 cv
452.369 20.8723 453.261 18.3839 454.805 16.2857 cv
456.052 16.2857 li
454.376 18.1761 453.026 20.8906 453.026 23.3996 cv
453.026 24.8162 453.667 26.0108 454.347 27.2756 cv
454.702 27.9364 455.069 28.6197 455.346 29.3476 cv
455.735 30.3713 455.575 32.8469 455.46 34.1117 cv
468.021 34.1117 li
467.906 32.8228 467.741 30.2679 468.13 29.2131 cv
468.392 28.5054 468.739 27.8376 469.074 27.1918 cv
469.718 25.9504 470.326 24.7775 470.326 23.3996 cv
470.326 20.7129 468.968 18.106 467.348 16.2857 cv
468.776 16.2857 li
470.25 18.381 470.983 20.8494 470.983 23.3995 cv
470.983 25.7072 469.488 27.4334 468.747 29.4408 cv
468.593 29.8581 468.542 30.5909 468.542 31.382 cv
468.542 32.9595 468.747 34.7686 468.747 34.7686 cv
.945098 .929412 .905882 rgb
f
468.776 16.2857 mo
467.348 16.2857 li
466.324 15.1346 465.195 14.2981 464.239 13.9547 cv
463.7 13.7612 462.853 13.6793 461.983 13.6793 cv
460.991 13.6793 459.967 13.7858 459.337 13.9547 cv
458.283 14.2367 457.103 15.0989 456.052 16.2857 cv
454.805 16.2857 li
456.018 14.6362 457.634 13.228 459.536 12.2312 cv
460.914 11.5089 461.117 10.9098 461.117 9.92488 cv
461.117 9.69281 461.106 9.43934 461.096 9.15777 cv
462.456 9.15777 li
462.445 9.45015 462.433 9.71243 462.433 9.95197 cv
462.433 10.9247 462.641 11.5215 464.022 12.2285 cv
466.053 13.2687 467.636 14.6657 468.776 16.2857 cv
463.997 2.03992 mo
459.336 2.03992 li
455.673 1.79153 452.975 .974317 452.915 0 cv
470.436 0 li
470.376 .975818 467.668 1.79287 463.997 2.03992 cv
.92549 .898039 .882353 rgb
f
462.456 9.15777 mo
461.096 9.15777 li
461.088 8.93951 461.081 8.70437 461.081 8.44926 cv
461.081 5.85014 460.776 3.54541 459.903 2.07341 cv
459.712 2.06377 459.523 2.05257 459.336 2.03992 cv
463.997 2.03992 li
463.854 2.04955 463.709 2.05833 463.563 2.0662 cv
462.688 3.53775 462.471 5.84728 462.471 8.44926 cv
462.471 8.7042 462.464 8.93939 462.456 9.15777 cv
.929412 .917647 .905882 rgb
f
460.981 1.51644 mo
461.126 1.10861 461.267 .698857 461.401 .285974 cv
453.925 .285974 li
453.979 .88146 456.472 1.37799 459.825 1.51644 cv
460.981 1.51644 li
cp
1 1 1 rgb
f
460.826 29.4046 mo
460.313 27.401 459.829 25.5086 459.829 23.2646 cv
459.829 20.1073 460.474 16.7487 461.372 13.998 cv
460.586 13.9855 459.756 14.087 459.254 14.2625 cv
457.192 14.9824 454.491 19.5413 454.491 23.5632 cv
454.491 24.9581 454.975 26.1345 455.488 27.38 cv
455.756 28.0307 456.033 28.7035 456.242 29.4202 cv
456.536 30.4285 456.415 32.8662 456.328 34.1117 cv
461.414 34.1117 li
461.414 31.9019 li
461.233 31.0419 461.031 30.207 460.826 29.4046 cv
cp
f
596.847 3.80579 mo
596.847 4.35807 596.399 4.80579 595.847 4.80579 cv
452.847 4.80579 li
452.295 4.80579 451.847 4.35807 451.847 3.80579 cv
451.847 3.2535 452.295 2.80579 452.847 2.80579 cv
595.847 2.80579 li
596.399 2.80579 596.847 3.2535 596.847 3.80579 cv
cp
.317647 .215686 .133333 rgb
f
375.202 5.59884 mo
375.202 7.56441 373.609 9.15777 371.643 9.15777 cv
228.357 9.15777 li
226.391 9.15777 224.798 7.56441 224.798 5.59884 cv
224.798 3.63328 226.391 2.03992 228.357 2.03992 cv
371.643 2.03992 li
373.609 2.03992 375.202 3.63328 375.202 5.59884 cv
.427451 .313726 .207843 rgb
f
355.934 34.7686 mo
355.934 34.7686 li
355.934 34.7686 356.395 30.7931 355.934 29.5811 cv
355.181 27.6031 353.693 25.9125 353.578 23.6751 cv
353.693 25.9125 355.181 27.6031 355.934 29.5811 cv
356.396 30.7931 355.934 34.7686 355.934 34.7686 cv
369.223 34.1117 mo
356.662 34.1117 li
356.777 32.8469 356.938 30.3713 356.548 29.3476 cv
356.271 28.6197 355.904 27.9364 355.548 27.2756 cv
354.869 26.0108 354.227 24.8162 354.227 23.3996 cv
354.227 20.8906 355.578 18.1761 357.253 16.2857 cv
368.55 16.2857 li
370.17 18.106 371.528 20.7129 371.528 23.3996 cv
371.528 24.7775 370.92 25.9504 370.275 27.1918 cv
369.941 27.8376 369.594 28.5054 369.332 29.2131 cv
368.943 30.2679 369.108 32.8228 369.223 34.1117 cv
.866667 .823529 .760784 rgb
f
368.55 16.2857 mo
357.253 16.2857 li
358.305 15.0989 359.485 14.2367 360.538 13.9547 cv
361.169 13.7858 362.192 13.6793 363.185 13.6793 cv
364.055 13.6793 364.902 13.7612 365.441 13.9547 cv
366.397 14.2981 367.526 15.1346 368.55 16.2857 cv
.811765 .74902 .701961 rgb
f
362.283 8.267 mo
362.269 5.74256 361.958 3.51091 361.105 2.07341 cv
361.958 3.51091 362.269 5.74256 362.283 8.267 cv
.827451 .792157 .760784 rgb
f
369.949 34.7686 mo
355.934 34.7686 li
355.934 34.7686 356.396 30.7931 355.934 29.5811 cv
355.181 27.6031 353.693 25.9125 353.578 23.6751 cv
353.573 23.5842 353.571 23.4923 353.571 23.3995 cv
353.571 20.8723 354.463 18.3839 356.007 16.2857 cv
357.253 16.2857 li
355.578 18.1761 354.227 20.8906 354.227 23.3996 cv
354.227 24.8162 354.869 26.0108 355.548 27.2756 cv
355.904 27.9364 356.271 28.6197 356.548 29.3476 cv
356.938 30.3713 356.777 32.8469 356.662 34.1117 cv
369.223 34.1117 li
369.108 32.8228 368.943 30.2679 369.332 29.2131 cv
369.594 28.5054 369.941 27.8376 370.275 27.1918 cv
370.92 25.9504 371.528 24.7775 371.528 23.3996 cv
371.528 20.7129 370.17 18.106 368.55 16.2857 cv
369.978 16.2857 li
371.452 18.381 372.184 20.8494 372.184 23.3995 cv
372.184 25.7072 370.69 27.4334 369.949 29.4408 cv
369.795 29.8581 369.744 30.5909 369.744 31.382 cv
369.744 32.9595 369.949 34.7686 369.949 34.7686 cv
.945098 .929412 .905882 rgb
f
369.978 16.2857 mo
368.55 16.2857 li
367.526 15.1346 366.397 14.2981 365.441 13.9547 cv
364.902 13.7612 364.055 13.6793 363.185 13.6793 cv
362.192 13.6793 361.169 13.7858 360.538 13.9547 cv
359.485 14.2367 358.305 15.0989 357.253 16.2857 cv
356.007 16.2857 li
357.22 14.6362 358.836 13.228 360.738 12.2312 cv
362.116 11.5089 362.319 10.9098 362.319 9.92488 cv
362.319 9.69281 362.307 9.43934 362.298 9.15777 cv
363.658 9.15777 li
363.647 9.45015 363.634 9.71243 363.635 9.95197 cv
363.635 10.9247 363.843 11.5215 365.224 12.2285 cv
367.255 13.2687 368.838 14.6657 369.978 16.2857 cv
365.199 2.03992 mo
360.538 2.03992 li
356.875 1.79153 354.177 .974317 354.117 0 cv
371.638 0 li
371.578 .975818 368.87 1.79287 365.199 2.03992 cv
.92549 .898039 .882353 rgb
f
363.658 9.15777 mo
362.298 9.15777 li
362.29 8.93951 362.283 8.70437 362.283 8.44926 cv
362.283 8.38834 362.283 8.32759 362.283 8.267 cv
362.269 5.74256 361.958 3.51091 361.105 2.07341 cv
361.105 2.07341 li
360.914 2.06377 360.725 2.05257 360.538 2.03992 cv
365.199 2.03992 li
365.056 2.04955 364.911 2.05833 364.765 2.0662 cv
363.89 3.53775 363.673 5.84728 363.673 8.44926 cv
363.673 8.7042 363.666 8.93939 363.658 9.15777 cv
.929412 .917647 .905882 rgb
f
362.182 1.51644 mo
362.328 1.10861 362.469 .698857 362.603 .285974 cv
355.127 .285974 li
355.181 .88146 357.674 1.37799 361.026 1.51644 cv
362.182 1.51644 li
cp
1 1 1 rgb
f
362.027 29.4046 mo
361.515 27.401 361.031 25.5086 361.031 23.2646 cv
361.031 20.1073 361.676 16.7487 362.574 13.998 cv
361.788 13.9855 360.958 14.087 360.456 14.2625 cv
358.394 14.9824 355.693 19.5413 355.693 23.5632 cv
355.693 24.9581 356.177 26.1345 356.69 27.38 cv
356.958 28.0307 357.235 28.7035 357.444 29.4202 cv
357.738 30.4285 357.617 32.8662 357.53 34.1117 cv
362.616 34.1117 li
362.616 31.9019 li
362.435 31.0419 362.233 30.207 362.027 29.4046 cv
cp
f
334.934 34.7686 mo
334.934 34.7686 li
334.934 34.7686 335.395 30.7931 334.934 29.5811 cv
335.396 30.7931 334.934 34.7686 334.934 34.7686 cv
348.223 34.1117 mo
335.662 34.1117 li
335.777 32.8469 335.937 30.3713 335.548 29.3476 cv
335.271 28.6197 334.904 27.9364 334.548 27.2756 cv
333.869 26.0108 333.227 24.8162 333.227 23.3996 cv
333.227 20.8906 334.578 18.1761 336.253 16.2857 cv
347.55 16.2857 li
349.17 18.106 350.528 20.7129 350.528 23.3996 cv
350.528 24.7775 349.92 25.9504 349.275 27.1918 cv
348.94 27.8376 348.594 28.5054 348.332 29.2131 cv
347.943 30.2679 348.108 32.8228 348.223 34.1117 cv
.866667 .823529 .760784 rgb
f
347.55 16.2857 mo
336.253 16.2857 li
337.305 15.0989 338.485 14.2367 339.538 13.9547 cv
340.169 13.7858 341.192 13.6793 342.185 13.6793 cv
343.055 13.6793 343.902 13.7612 344.441 13.9547 cv
345.397 14.2981 346.526 15.1346 347.55 16.2857 cv
.811765 .74902 .701961 rgb
f
341.283 8.267 mo
341.269 5.74256 340.958 3.51091 340.105 2.07341 cv
340.958 3.51091 341.269 5.74256 341.283 8.267 cv
.827451 .792157 .760784 rgb
f
348.949 34.7686 mo
334.934 34.7686 li
334.934 34.7686 335.396 30.7931 334.934 29.5811 cv
334.934 29.5811 li
334.15 27.5227 332.571 25.7756 332.571 23.3995 cv
332.571 20.8723 333.463 18.3839 335.007 16.2857 cv
336.253 16.2857 li
334.578 18.1761 333.227 20.8906 333.227 23.3996 cv
333.227 24.8162 333.869 26.0108 334.548 27.2756 cv
334.904 27.9364 335.271 28.6197 335.548 29.3476 cv
335.937 30.3713 335.777 32.8469 335.662 34.1117 cv
348.223 34.1117 li
348.108 32.8228 347.943 30.2679 348.332 29.2131 cv
348.594 28.5054 348.94 27.8376 349.275 27.1918 cv
349.92 25.9504 350.528 24.7775 350.528 23.3996 cv
350.528 20.7129 349.17 18.106 347.55 16.2857 cv
348.978 16.2857 li
350.452 18.381 351.184 20.8494 351.184 23.3995 cv
351.184 25.7072 349.69 27.4334 348.949 29.4408 cv
348.795 29.8581 348.744 30.5909 348.744 31.382 cv
348.744 32.9595 348.949 34.7686 348.949 34.7686 cv
.945098 .929412 .905882 rgb
f
348.978 16.2857 mo
347.55 16.2857 li
346.526 15.1346 345.397 14.2981 344.441 13.9547 cv
343.902 13.7612 343.055 13.6793 342.185 13.6793 cv
341.192 13.6793 340.169 13.7858 339.538 13.9547 cv
338.485 14.2367 337.305 15.0989 336.253 16.2857 cv
335.007 16.2857 li
336.22 14.6362 337.836 13.228 339.738 12.2312 cv
341.116 11.5089 341.319 10.9098 341.319 9.92488 cv
341.319 9.69281 341.307 9.43934 341.298 9.15777 cv
342.658 9.15777 li
342.647 9.45015 342.634 9.71243 342.635 9.95197 cv
342.635 10.9247 342.843 11.5215 344.224 12.2285 cv
346.255 13.2687 347.838 14.6657 348.978 16.2857 cv
344.199 2.03992 mo
339.538 2.03992 li
335.875 1.79153 333.177 .974317 333.117 0 cv
350.638 0 li
350.578 .975818 347.87 1.79287 344.199 2.03992 cv
.92549 .898039 .882353 rgb
f
342.658 9.15777 mo
341.298 9.15777 li
341.29 8.93951 341.283 8.70437 341.283 8.44926 cv
341.283 8.38834 341.283 8.32759 341.283 8.267 cv
341.269 5.74256 340.958 3.51091 340.105 2.07341 cv
340.105 2.07341 li
339.914 2.06377 339.725 2.05257 339.538 2.03992 cv
344.199 2.03992 li
344.056 2.04955 343.911 2.05833 343.765 2.0662 cv
342.89 3.53775 342.673 5.84728 342.673 8.44926 cv
342.673 8.7042 342.666 8.93939 342.658 9.15777 cv
.929412 .917647 .905882 rgb
f
341.182 1.51644 mo
341.328 1.10861 341.469 .698857 341.603 .285974 cv
334.127 .285974 li
334.181 .88146 336.674 1.37799 340.026 1.51644 cv
341.182 1.51644 li
cp
1 1 1 rgb
f
341.027 29.4046 mo
340.515 27.401 340.031 25.5086 340.031 23.2646 cv
340.031 20.1073 340.676 16.7487 341.574 13.998 cv
340.788 13.9855 339.958 14.087 339.456 14.2625 cv
337.394 14.9824 334.693 19.5413 334.693 23.5632 cv
334.693 24.9581 335.177 26.1345 335.69 27.38 cv
335.958 28.0307 336.235 28.7035 336.444 29.4202 cv
336.738 30.4285 336.617 32.8662 336.53 34.1117 cv
341.616 34.1117 li
341.616 31.9019 li
341.435 31.0419 341.233 30.207 341.027 29.4046 cv
cp
f
313.934 34.7686 mo
313.934 34.7686 li
313.934 34.7686 314.396 30.7931 313.934 29.5811 cv
314.396 30.7931 313.934 34.7686 313.934 34.7686 cv
327.223 34.1117 mo
314.661 34.1117 li
314.777 32.8469 314.937 30.3713 314.548 29.3476 cv
314.271 28.6197 313.904 27.9364 313.548 27.2756 cv
312.869 26.0108 312.227 24.8162 312.227 23.3996 cv
312.227 20.8906 313.578 18.1761 315.253 16.2857 cv
326.55 16.2857 li
328.17 18.106 329.528 20.7129 329.528 23.3996 cv
329.528 24.7775 328.92 25.9504 328.275 27.1918 cv
327.94 27.8376 327.594 28.5054 327.332 29.2131 cv
326.943 30.2679 327.108 32.8228 327.223 34.1117 cv
.866667 .823529 .760784 rgb
f
326.55 16.2857 mo
315.253 16.2857 li
316.305 15.0989 317.485 14.2367 318.538 13.9547 cv
319.169 13.7858 320.192 13.6793 321.185 13.6793 cv
322.055 13.6793 322.902 13.7612 323.441 13.9547 cv
324.397 14.2981 325.526 15.1346 326.55 16.2857 cv
.811765 .74902 .701961 rgb
f
320.283 8.267 mo
320.269 5.74256 319.958 3.51091 319.105 2.07341 cv
319.958 3.51091 320.269 5.74256 320.283 8.267 cv
.827451 .792157 .760784 rgb
f
327.949 34.7686 mo
313.934 34.7686 li
313.934 34.7686 314.396 30.7931 313.934 29.5811 cv
313.934 29.5811 li
313.15 27.5227 311.571 25.7756 311.571 23.3995 cv
311.571 20.8723 312.463 18.3839 314.007 16.2857 cv
315.253 16.2857 li
313.578 18.1761 312.227 20.8906 312.227 23.3996 cv
312.227 24.8162 312.869 26.0108 313.548 27.2756 cv
313.904 27.9364 314.271 28.6197 314.548 29.3476 cv
314.937 30.3713 314.777 32.8469 314.661 34.1117 cv
327.223 34.1117 li
327.108 32.8228 326.943 30.2679 327.332 29.2131 cv
327.594 28.5054 327.94 27.8376 328.275 27.1918 cv
328.92 25.9504 329.528 24.7775 329.528 23.3996 cv
329.528 20.7129 328.17 18.106 326.55 16.2857 cv
327.978 16.2857 li
329.452 18.381 330.184 20.8494 330.184 23.3995 cv
330.184 25.7072 328.69 27.4334 327.949 29.4408 cv
327.795 29.8581 327.744 30.5909 327.744 31.382 cv
327.744 32.9595 327.949 34.7686 327.949 34.7686 cv
.945098 .929412 .905882 rgb
f
327.978 16.2857 mo
326.55 16.2857 li
325.526 15.1346 324.397 14.2981 323.441 13.9547 cv
322.902 13.7612 322.055 13.6793 321.185 13.6793 cv
320.192 13.6793 319.169 13.7858 318.538 13.9547 cv
317.485 14.2367 316.305 15.0989 315.253 16.2857 cv
314.007 16.2857 li
315.22 14.6362 316.836 13.228 318.738 12.2312 cv
320.116 11.5089 320.319 10.9098 320.319 9.92488 cv
320.319 9.69281 320.308 9.43934 320.298 9.15777 cv
321.658 9.15777 li
321.647 9.45015 321.635 9.71243 321.635 9.95197 cv
321.635 10.9247 321.843 11.5215 323.224 12.2285 cv
325.255 13.2687 326.838 14.6657 327.978 16.2857 cv
323.199 2.03992 mo
318.538 2.03992 li
314.875 1.79153 312.177 .974317 312.117 0 cv
329.638 0 li
329.578 .975818 326.87 1.79287 323.199 2.03992 cv
.92549 .898039 .882353 rgb
f
321.658 9.15777 mo
320.298 9.15777 li
320.29 8.93951 320.283 8.70437 320.283 8.44926 cv
320.283 8.38834 320.283 8.32759 320.283 8.267 cv
320.269 5.74256 319.958 3.51091 319.105 2.07341 cv
319.105 2.07341 li
318.914 2.06377 318.725 2.05257 318.538 2.03992 cv
323.199 2.03992 li
323.056 2.04955 322.911 2.05833 322.765 2.0662 cv
321.89 3.53775 321.673 5.84728 321.673 8.44926 cv
321.673 8.7042 321.666 8.93939 321.658 9.15777 cv
.929412 .917647 .905882 rgb
f
320.182 1.51644 mo
320.328 1.10861 320.469 .698857 320.603 .285974 cv
313.127 .285974 li
313.181 .88146 315.674 1.37799 319.026 1.51644 cv
320.182 1.51644 li
cp
1 1 1 rgb
f
320.027 29.4046 mo
319.515 27.401 319.031 25.5086 319.031 23.2646 cv
319.031 20.1073 319.676 16.7487 320.574 13.998 cv
319.788 13.9855 318.958 14.087 318.456 14.2625 cv
316.394 14.9824 313.693 19.5413 313.693 23.5632 cv
313.693 24.9581 314.177 26.1345 314.69 27.38 cv
314.958 28.0307 315.235 28.7035 315.444 29.4202 cv
315.738 30.4285 315.617 32.8662 315.53 34.1117 cv
320.616 34.1117 li
320.616 31.9019 li
320.435 31.0419 320.233 30.207 320.027 29.4046 cv
cp
f
306.223 34.1117 mo
293.662 34.1117 li
293.777 32.8469 293.937 30.3713 293.548 29.3476 cv
293.271 28.6197 292.904 27.9364 292.549 27.2756 cv
291.869 26.0108 291.227 24.8162 291.227 23.3996 cv
291.227 20.8906 292.578 18.1761 294.253 16.2857 cv
305.55 16.2857 li
307.17 18.106 308.528 20.7129 308.528 23.3996 cv
308.528 24.7775 307.92 25.9504 307.275 27.1918 cv
306.94 27.8376 306.594 28.5054 306.332 29.2131 cv
305.943 30.2679 306.108 32.8228 306.223 34.1117 cv
.866667 .823529 .760784 rgb
f
305.55 16.2857 mo
294.253 16.2857 li
295.305 15.0989 296.485 14.2367 297.538 13.9547 cv
298.169 13.7858 299.192 13.6793 300.185 13.6793 cv
301.055 13.6793 301.902 13.7612 302.441 13.9547 cv
303.397 14.2981 304.526 15.1346 305.55 16.2857 cv
.811765 .74902 .701961 rgb
f
299.283 8.267 mo
299.269 5.74256 298.958 3.51091 298.105 2.07341 cv
298.958 3.51091 299.269 5.74256 299.283 8.267 cv
.827451 .792157 .760784 rgb
f
306.949 34.7686 mo
292.934 34.7686 li
292.934 34.7686 293.139 33.0051 293.139 31.4692 cv
293.139 30.6989 293.088 29.9859 292.934 29.5811 cv
292.15 27.5227 290.571 25.7756 290.571 23.3995 cv
290.571 20.8723 291.463 18.3839 293.007 16.2857 cv
294.253 16.2857 li
292.578 18.1761 291.227 20.8906 291.227 23.3996 cv
291.227 24.8162 291.869 26.0108 292.549 27.2756 cv
292.904 27.9364 293.271 28.6197 293.548 29.3476 cv
293.937 30.3713 293.777 32.8469 293.662 34.1117 cv
306.223 34.1117 li
306.108 32.8228 305.943 30.2679 306.332 29.2131 cv
306.594 28.5054 306.94 27.8376 307.275 27.1918 cv
307.92 25.9504 308.528 24.7775 308.528 23.3996 cv
308.528 20.7129 307.17 18.106 305.55 16.2857 cv
306.978 16.2857 li
308.452 18.381 309.184 20.8494 309.184 23.3995 cv
309.184 25.7072 307.69 27.4334 306.949 29.4408 cv
306.795 29.8581 306.744 30.5909 306.744 31.382 cv
306.744 32.9595 306.949 34.7686 306.949 34.7686 cv
.945098 .929412 .905882 rgb
f
306.978 16.2857 mo
305.55 16.2857 li
304.526 15.1346 303.397 14.2981 302.441 13.9547 cv
301.902 13.7612 301.055 13.6793 300.185 13.6793 cv
299.192 13.6793 298.169 13.7858 297.538 13.9547 cv
296.485 14.2367 295.305 15.0989 294.253 16.2857 cv
293.007 16.2857 li
294.22 14.6362 295.836 13.228 297.738 12.2312 cv
299.116 11.5089 299.319 10.9098 299.319 9.92488 cv
299.319 9.69281 299.308 9.43934 299.298 9.15777 cv
300.658 9.15777 li
300.647 9.45015 300.635 9.71243 300.635 9.95197 cv
300.635 10.9247 300.843 11.5215 302.224 12.2285 cv
304.255 13.2687 305.838 14.6657 306.978 16.2857 cv
302.199 2.03992 mo
297.538 2.03992 li
293.875 1.79153 291.177 .974317 291.117 0 cv
308.638 0 li
308.578 .975818 305.87 1.79287 302.199 2.03992 cv
.92549 .898039 .882353 rgb
f
300.658 9.15777 mo
299.298 9.15777 li
299.29 8.93951 299.283 8.70437 299.283 8.44926 cv
299.283 8.38834 299.283 8.32759 299.283 8.267 cv
299.269 5.74256 298.958 3.51091 298.105 2.07341 cv
298.105 2.07341 li
297.914 2.06377 297.725 2.05257 297.538 2.03992 cv
302.199 2.03992 li
302.056 2.04955 301.911 2.05833 301.765 2.0662 cv
300.89 3.53775 300.673 5.84728 300.673 8.44926 cv
300.673 8.7042 300.666 8.93939 300.658 9.15777 cv
.929412 .917647 .905882 rgb
f
299.182 1.51644 mo
299.328 1.10861 299.469 .698857 299.603 .285974 cv
292.127 .285974 li
292.181 .88146 294.674 1.37799 298.026 1.51644 cv
299.182 1.51644 li
cp
1 1 1 rgb
f
299.027 29.4046 mo
298.515 27.401 298.031 25.5086 298.031 23.2646 cv
298.031 20.1073 298.676 16.7487 299.574 13.998 cv
298.788 13.9855 297.958 14.087 297.456 14.2625 cv
295.394 14.9824 292.693 19.5413 292.693 23.5632 cv
292.693 24.9581 293.177 26.1345 293.69 27.38 cv
293.958 28.0307 294.235 28.7035 294.444 29.4202 cv
294.738 30.4285 294.617 32.8662 294.53 34.1117 cv
299.616 34.1117 li
299.616 31.9019 li
299.435 31.0419 299.233 30.207 299.027 29.4046 cv
cp
f
285.223 34.1117 mo
272.662 34.1117 li
272.777 32.8469 272.937 30.3713 272.548 29.3476 cv
272.271 28.6197 271.904 27.9364 271.549 27.2756 cv
270.869 26.0108 270.227 24.8162 270.227 23.3996 cv
270.227 20.8906 271.578 18.1761 273.254 16.2857 cv
284.55 16.2857 li
286.17 18.106 287.528 20.7129 287.528 23.3996 cv
287.528 24.7775 286.92 25.9504 286.275 27.1918 cv
285.94 27.8376 285.594 28.5054 285.332 29.2131 cv
284.943 30.2679 285.108 32.8228 285.223 34.1117 cv
.866667 .823529 .760784 rgb
f
284.55 16.2857 mo
273.254 16.2857 li
274.305 15.0989 275.485 14.2367 276.538 13.9547 cv
277.169 13.7858 278.192 13.6793 279.185 13.6793 cv
280.055 13.6793 280.902 13.7612 281.441 13.9547 cv
282.397 14.2981 283.526 15.1346 284.55 16.2857 cv
.811765 .74902 .701961 rgb
f
269.571 23.3995 mo
269.571 23.3995 li
269.571 20.8723 270.463 18.3839 272.007 16.2857 cv
272.007 16.2857 li
270.463 18.3839 269.571 20.8723 269.571 23.3995 cv
.866667 .823529 .760784 rgb
f
272.007 16.2857 mo
272.007 16.2857 li
273.22 14.6362 274.836 13.228 276.738 12.2312 cv
278.441 11.3386 278.349 10.6343 278.298 9.15777 cv
278.298 9.15777 li
278.349 10.6343 278.441 11.3386 276.738 12.2312 cv
274.836 13.228 273.22 14.6362 272.007 16.2857 cv
.811765 .74902 .701961 rgb
f
278.298 9.15777 mo
278.298 9.15777 li
278.297 9.15136 278.297 9.14492 278.297 9.13848 cv
278.297 9.14492 278.297 9.15136 278.298 9.15777 cv
278.283 8.267 mo
278.269 5.74256 277.958 3.51091 277.105 2.07341 cv
277.958 3.51091 278.269 5.74256 278.283 8.267 cv
.827451 .792157 .760784 rgb
f
281.199 2.03992 mo
281.199 2.03992 li
284.87 1.79287 287.578 .975818 287.638 0 cv
287.638 0 li
287.578 .975818 284.87 1.79287 281.199 2.03992 cv
.74902 .666667 .603922 rgb
f
285.949 34.7686 mo
271.934 34.7686 li
271.934 34.7686 272.139 33.0051 272.139 31.4692 cv
272.139 30.6989 272.088 29.9859 271.934 29.5811 cv
271.15 27.5227 269.571 25.7756 269.571 23.3995 cv
269.571 20.8723 270.463 18.3839 272.007 16.2857 cv
273.254 16.2857 li
271.578 18.1761 270.227 20.8906 270.227 23.3996 cv
270.227 24.8162 270.869 26.0108 271.549 27.2756 cv
271.904 27.9364 272.271 28.6197 272.548 29.3476 cv
272.937 30.3713 272.777 32.8469 272.662 34.1117 cv
285.223 34.1117 li
285.108 32.8228 284.943 30.2679 285.332 29.2131 cv
285.594 28.5054 285.94 27.8376 286.275 27.1918 cv
286.92 25.9504 287.528 24.7775 287.528 23.3996 cv
287.528 20.7129 286.17 18.106 284.55 16.2857 cv
285.978 16.2857 li
287.452 18.381 288.185 20.8494 288.185 23.3995 cv
288.185 25.7072 286.69 27.4334 285.949 29.4408 cv
285.795 29.8581 285.744 30.5909 285.744 31.382 cv
285.744 32.9595 285.949 34.7686 285.949 34.7686 cv
.945098 .929412 .905882 rgb
f
285.978 16.2857 mo
284.55 16.2857 li
283.526 15.1346 282.397 14.2981 281.441 13.9547 cv
280.902 13.7612 280.055 13.6793 279.185 13.6793 cv
278.192 13.6793 277.169 13.7858 276.538 13.9547 cv
275.485 14.2367 274.305 15.0989 273.254 16.2857 cv
272.007 16.2857 li
273.22 14.6362 274.836 13.228 276.738 12.2312 cv
278.441 11.3386 278.349 10.6343 278.298 9.15777 cv
279.658 9.15777 li
279.647 9.45015 279.635 9.71243 279.635 9.95197 cv
279.635 10.9247 279.843 11.5215 281.224 12.2285 cv
283.255 13.2687 284.838 14.6657 285.978 16.2857 cv
281.199 2.03992 mo
276.538 2.03992 li
272.875 1.79153 270.177 .974317 270.117 0 cv
287.638 0 li
287.578 .975818 284.87 1.79287 281.199 2.03992 cv
.92549 .898039 .882353 rgb
f
279.658 9.15777 mo
278.298 9.15777 li
278.297 9.15136 278.297 9.14492 278.297 9.13848 cv
278.29 8.92566 278.283 8.69687 278.283 8.44926 cv
278.283 8.38834 278.283 8.32759 278.283 8.267 cv
278.269 5.74256 277.958 3.51091 277.105 2.07341 cv
277.105 2.07341 li
276.914 2.06377 276.725 2.05257 276.538 2.03992 cv
281.199 2.03992 li
281.056 2.04955 280.911 2.05833 280.765 2.0662 cv
279.89 3.53775 279.673 5.84728 279.673 8.44926 cv
279.673 8.7042 279.666 8.93939 279.658 9.15777 cv
.929412 .917647 .905882 rgb
f
278.182 1.51644 mo
278.328 1.10861 278.469 .698857 278.603 .285974 cv
271.127 .285974 li
271.181 .88146 273.674 1.37799 277.026 1.51644 cv
278.182 1.51644 li
cp
1 1 1 rgb
f
278.027 29.4046 mo
277.515 27.401 277.031 25.5086 277.031 23.2646 cv
277.031 20.1073 277.676 16.7487 278.574 13.998 cv
277.788 13.9855 276.958 14.087 276.456 14.2625 cv
274.394 14.9824 271.693 19.5413 271.693 23.5632 cv
271.693 24.9581 272.177 26.1345 272.69 27.38 cv
272.958 28.0307 273.235 28.7035 273.444 29.4202 cv
273.738 30.4285 273.617 32.8662 273.53 34.1117 cv
278.616 34.1117 li
278.616 31.9019 li
278.435 31.0419 278.233 30.207 278.027 29.4046 cv
cp
f
250.934 34.7686 mo
250.934 34.7686 li
250.934 34.7686 251.396 30.7931 250.934 29.5811 cv
250.242 27.764 248.93 26.1893 248.632 24.2104 cv
248.93 26.1893 250.242 27.764 250.934 29.5811 cv
251.396 30.7931 250.934 34.7686 250.934 34.7686 cv
264.223 34.1117 mo
251.662 34.1117 li
251.777 32.8469 251.937 30.3713 251.548 29.3476 cv
251.271 28.6197 250.904 27.9364 250.549 27.2756 cv
249.869 26.0108 249.228 24.8162 249.228 23.3996 cv
249.228 20.8906 250.578 18.1761 252.254 16.2857 cv
263.55 16.2857 li
265.17 18.106 266.528 20.7129 266.528 23.3996 cv
266.528 24.7775 265.919 25.9504 265.275 27.1918 cv
264.94 27.8376 264.594 28.5054 264.332 29.2131 cv
263.943 30.2679 264.108 32.8228 264.223 34.1117 cv
.866667 .823529 .760784 rgb
f
263.55 16.2857 mo
252.254 16.2857 li
253.305 15.0989 254.485 14.2367 255.538 13.9547 cv
256.169 13.7858 257.192 13.6793 258.185 13.6793 cv
259.055 13.6793 259.902 13.7612 260.441 13.9547 cv
261.397 14.2981 262.526 15.1346 263.55 16.2857 cv
.811765 .74902 .701961 rgb
f
248.571 23.3995 mo
248.571 23.3995 li
248.571 20.8723 249.463 18.3839 251.007 16.2857 cv
251.007 16.2857 li
249.463 18.3839 248.571 20.8723 248.571 23.3995 cv
.866667 .823529 .760784 rgb
f
251.007 16.2857 mo
251.007 16.2857 li
252.22 14.6362 253.836 13.228 255.738 12.2312 cv
257.441 11.3386 257.349 10.6343 257.298 9.15777 cv
257.298 9.15777 li
257.349 10.6343 257.441 11.3386 255.738 12.2312 cv
253.836 13.228 252.22 14.6362 251.007 16.2857 cv
.811765 .74902 .701961 rgb
f
257.298 9.15777 mo
257.298 9.15777 li
257.297 9.15136 257.297 9.14492 257.297 9.13848 cv
257.297 9.14492 257.297 9.15136 257.298 9.15777 cv
257.283 8.267 mo
257.269 5.74256 256.958 3.51091 256.105 2.07341 cv
256.958 3.51091 257.269 5.74256 257.283 8.267 cv
.827451 .792157 .760784 rgb
f
260.199 2.03992 mo
260.199 2.03992 li
263.87 1.79287 266.578 .975818 266.638 0 cv
266.638 0 li
266.578 .975818 263.87 1.79287 260.199 2.03992 cv
.74902 .666667 .603922 rgb
f
258.658 9.15777 mo
258.658 9.15777 li
258.666 8.93939 258.673 8.7042 258.673 8.44926 cv
258.673 5.84728 258.89 3.53775 259.765 2.0662 cv
259.911 2.05833 260.056 2.04955 260.199 2.03992 cv
260.199 2.03992 li
260.056 2.04955 259.911 2.05833 259.765 2.0662 cv
258.89 3.53775 258.673 5.84728 258.673 8.44926 cv
258.673 8.7042 258.666 8.93939 258.658 9.15777 cv
.772549 .72549 .682353 rgb
f
264.949 34.7686 mo
250.934 34.7686 li
250.934 34.7686 251.396 30.7931 250.934 29.5811 cv
250.242 27.764 248.93 26.1893 248.632 24.2104 cv
248.592 23.9477 248.571 23.6779 248.571 23.3995 cv
248.571 20.8723 249.463 18.3839 251.007 16.2857 cv
252.254 16.2857 li
250.578 18.1761 249.228 20.8906 249.228 23.3996 cv
249.228 24.8162 249.869 26.0108 250.549 27.2756 cv
250.904 27.9364 251.271 28.6197 251.548 29.3476 cv
251.937 30.3713 251.777 32.8469 251.662 34.1117 cv
264.223 34.1117 li
264.108 32.8228 263.943 30.2679 264.332 29.2131 cv
264.594 28.5054 264.94 27.8376 265.275 27.1918 cv
265.919 25.9504 266.528 24.7775 266.528 23.3996 cv
266.528 20.7129 265.17 18.106 263.55 16.2857 cv
264.978 16.2857 li
266.452 18.381 267.185 20.8494 267.185 23.3995 cv
267.185 25.7072 265.69 27.4334 264.949 29.4408 cv
264.795 29.8581 264.744 30.5909 264.744 31.382 cv
264.744 32.9595 264.949 34.7686 264.949 34.7686 cv
.945098 .929412 .905882 rgb
f
264.978 16.2857 mo
263.55 16.2857 li
262.526 15.1346 261.397 14.2981 260.441 13.9547 cv
259.902 13.7612 259.055 13.6793 258.185 13.6793 cv
257.192 13.6793 256.169 13.7858 255.538 13.9547 cv
254.485 14.2367 253.305 15.0989 252.254 16.2857 cv
251.007 16.2857 li
252.22 14.6362 253.836 13.228 255.738 12.2312 cv
257.441 11.3386 257.349 10.6343 257.298 9.15777 cv
258.658 9.15777 li
258.647 9.45015 258.634 9.71243 258.635 9.95197 cv
258.635 10.9247 258.843 11.5215 260.224 12.2285 cv
262.255 13.2687 263.838 14.6657 264.978 16.2857 cv
260.199 2.03992 mo
255.538 2.03992 li
251.875 1.79153 249.177 .974317 249.117 0 cv
266.638 0 li
266.578 .975818 263.87 1.79287 260.199 2.03992 cv
.92549 .898039 .882353 rgb
f
258.658 9.15777 mo
257.298 9.15777 li
257.297 9.15136 257.297 9.14492 257.297 9.13848 cv
257.29 8.92566 257.283 8.69687 257.283 8.44926 cv
257.283 8.38834 257.283 8.32759 257.283 8.267 cv
257.269 5.74256 256.958 3.51091 256.105 2.07341 cv
256.105 2.07341 li
255.914 2.06377 255.725 2.05257 255.538 2.03992 cv
260.199 2.03992 li
260.056 2.04955 259.911 2.05833 259.765 2.0662 cv
258.89 3.53775 258.673 5.84728 258.673 8.44926 cv
258.673 8.7042 258.666 8.93939 258.658 9.15777 cv
.929412 .917647 .905882 rgb
f
257.182 1.51644 mo
257.328 1.10861 257.469 .698857 257.603 .285974 cv
250.127 .285974 li
250.181 .88146 252.674 1.37799 256.026 1.51644 cv
257.182 1.51644 li
cp
1 1 1 rgb
f
257.027 29.4046 mo
256.515 27.401 256.031 25.5086 256.031 23.2646 cv
256.031 20.1073 256.676 16.7487 257.574 13.998 cv
256.788 13.9855 255.958 14.087 255.455 14.2625 cv
253.394 14.9824 250.693 19.5413 250.693 23.5632 cv
250.693 24.9581 251.177 26.1345 251.69 27.38 cv
251.958 28.0307 252.235 28.7035 252.444 29.4202 cv
252.738 30.4285 252.617 32.8662 252.53 34.1117 cv
257.616 34.1117 li
257.616 31.9019 li
257.435 31.0419 257.233 30.207 257.027 29.4046 cv
cp
f
229.934 34.7686 mo
229.934 34.7686 li
229.934 34.7686 230.395 30.7931 229.934 29.5811 cv
229.242 27.764 227.93 26.1893 227.632 24.2104 cv
227.93 26.1893 229.242 27.764 229.934 29.5811 cv
230.396 30.7931 229.934 34.7686 229.934 34.7686 cv
243.223 34.1117 mo
230.662 34.1117 li
230.777 32.8469 230.938 30.3713 230.548 29.3476 cv
230.271 28.6197 229.904 27.9364 229.548 27.2756 cv
228.869 26.0108 228.228 24.8162 228.228 23.3996 cv
228.228 20.8906 229.578 18.1761 231.254 16.2857 cv
242.55 16.2857 li
244.17 18.106 245.528 20.7129 245.528 23.3996 cv
245.528 24.7775 244.92 25.9504 244.275 27.1918 cv
243.94 27.8376 243.594 28.5054 243.332 29.2131 cv
242.943 30.2679 243.108 32.8228 243.223 34.1117 cv
.866667 .823529 .760784 rgb
f
242.55 16.2857 mo
231.254 16.2857 li
232.305 15.0989 233.485 14.2367 234.538 13.9547 cv
235.169 13.7858 236.192 13.6793 237.185 13.6793 cv
238.055 13.6793 238.902 13.7612 239.441 13.9547 cv
240.397 14.2981 241.526 15.1346 242.55 16.2857 cv
.811765 .74902 .701961 rgb
f
227.571 23.3995 mo
227.571 23.3995 li
227.571 20.8723 228.463 18.3839 230.007 16.2857 cv
230.007 16.2857 li
228.463 18.3839 227.571 20.8723 227.571 23.3995 cv
.866667 .823529 .760784 rgb
f
230.007 16.2857 mo
230.007 16.2857 li
231.22 14.6362 232.836 13.228 234.738 12.2312 cv
236.441 11.3386 236.35 10.6343 236.298 9.15777 cv
236.298 9.15777 li
236.35 10.6343 236.441 11.3386 234.738 12.2312 cv
232.836 13.228 231.22 14.6362 230.007 16.2857 cv
.811765 .74902 .701961 rgb
f
236.298 9.15777 mo
236.298 9.15777 li
236.297 9.15136 236.297 9.14492 236.297 9.13848 cv
236.297 9.14492 236.297 9.15136 236.298 9.15777 cv
236.283 8.267 mo
236.269 5.74256 235.958 3.51091 235.105 2.07341 cv
235.958 3.51091 236.269 5.74256 236.283 8.267 cv
.827451 .792157 .760784 rgb
f
239.199 2.03992 mo
239.199 2.03992 li
242.87 1.79287 245.578 .975818 245.638 0 cv
245.638 0 li
245.578 .975818 242.87 1.79287 239.199 2.03992 cv
.74902 .666667 .603922 rgb
f
237.658 9.15777 mo
237.658 9.15777 li
237.666 8.93939 237.673 8.7042 237.673 8.44926 cv
237.673 5.84728 237.89 3.53775 238.765 2.0662 cv
238.911 2.05833 239.056 2.04955 239.199 2.03992 cv
239.199 2.03992 li
239.056 2.04955 238.911 2.05833 238.765 2.0662 cv
237.89 3.53775 237.673 5.84728 237.673 8.44926 cv
237.673 8.7042 237.666 8.93939 237.658 9.15777 cv
.772549 .72549 .682353 rgb
f
243.949 34.7686 mo
229.934 34.7686 li
229.934 34.7686 230.396 30.7931 229.934 29.5811 cv
229.242 27.764 227.93 26.1893 227.632 24.2104 cv
227.593 23.9477 227.571 23.6779 227.571 23.3995 cv
227.571 20.8723 228.463 18.3839 230.007 16.2857 cv
231.254 16.2857 li
229.578 18.1761 228.228 20.8906 228.228 23.3996 cv
228.228 24.8162 228.869 26.0108 229.548 27.2756 cv
229.904 27.9364 230.271 28.6197 230.548 29.3476 cv
230.938 30.3713 230.777 32.8469 230.662 34.1117 cv
243.223 34.1117 li
243.108 32.8228 242.943 30.2679 243.332 29.2131 cv
243.594 28.5054 243.94 27.8376 244.275 27.1918 cv
244.92 25.9504 245.528 24.7775 245.528 23.3996 cv
245.528 20.7129 244.17 18.106 242.55 16.2857 cv
243.978 16.2857 li
245.452 18.381 246.185 20.8494 246.185 23.3995 cv
246.185 25.7072 244.69 27.4334 243.949 29.4408 cv
243.795 29.8581 243.744 30.5909 243.744 31.382 cv
243.744 32.9595 243.949 34.7686 243.949 34.7686 cv
.945098 .929412 .905882 rgb
f
243.978 16.2857 mo
242.55 16.2857 li
241.526 15.1346 240.397 14.2981 239.441 13.9547 cv
238.902 13.7612 238.055 13.6793 237.185 13.6793 cv
236.192 13.6793 235.169 13.7858 234.538 13.9547 cv
233.485 14.2367 232.305 15.0989 231.254 16.2857 cv
230.007 16.2857 li
231.22 14.6362 232.836 13.228 234.738 12.2312 cv
236.441 11.3386 236.35 10.6343 236.298 9.15777 cv
237.658 9.15777 li
237.647 9.45015 237.634 9.71243 237.635 9.95197 cv
237.635 10.9247 237.843 11.5215 239.224 12.2285 cv
241.255 13.2687 242.838 14.6657 243.978 16.2857 cv
239.199 2.03992 mo
234.538 2.03992 li
230.875 1.79153 228.177 .974317 228.117 0 cv
245.638 0 li
245.578 .975818 242.87 1.79287 239.199 2.03992 cv
.92549 .898039 .882353 rgb
f
237.658 9.15777 mo
236.298 9.15777 li
236.297 9.15136 236.297 9.14492 236.297 9.13848 cv
236.29 8.92566 236.283 8.69687 236.283 8.44926 cv
236.283 8.38834 236.283 8.32759 236.283 8.267 cv
236.269 5.74256 235.958 3.51091 235.105 2.07341 cv
235.105 2.07341 li
234.914 2.06377 234.725 2.05257 234.538 2.03992 cv
239.199 2.03992 li
239.056 2.04955 238.911 2.05833 238.765 2.0662 cv
237.89 3.53775 237.673 5.84728 237.673 8.44926 cv
237.673 8.7042 237.666 8.93939 237.658 9.15777 cv
.929412 .917647 .905882 rgb
f
236.182 1.51644 mo
236.328 1.10861 236.469 .698857 236.603 .285974 cv
229.127 .285974 li
229.181 .88146 231.674 1.37799 235.026 1.51644 cv
236.182 1.51644 li
cp
1 1 1 rgb
f
236.027 29.4046 mo
235.515 27.401 235.031 25.5086 235.031 23.2646 cv
235.031 20.1073 235.676 16.7487 236.574 13.998 cv
235.788 13.9855 234.958 14.087 234.455 14.2625 cv
232.394 14.9824 229.693 19.5413 229.693 23.5632 cv
229.693 24.9581 230.177 26.1345 230.69 27.38 cv
230.958 28.0307 231.235 28.7035 231.444 29.4202 cv
231.738 30.4285 231.617 32.8662 231.53 34.1117 cv
236.616 34.1117 li
236.616 31.9019 li
236.435 31.0419 236.233 30.207 236.027 29.4046 cv
cp
f
372.049 3.80579 mo
372.049 4.35807 371.601 4.80579 371.049 4.80579 cv
228.049 4.80579 li
227.497 4.80579 227.049 4.35807 227.049 3.80579 cv
227.049 3.2535 227.497 2.80579 228.049 2.80579 cv
371.049 2.80579 li
371.601 2.80579 372.049 3.2535 372.049 3.80579 cv
cp
.317647 .215686 .133333 rgb
f
150.404 5.59884 mo
150.404 7.56441 148.81 9.15777 146.845 9.15777 cv
3.55893 9.15777 li
1.59336 9.15777 0 7.56441 0 5.59884 cv
0 3.63328 1.59336 2.03992 3.55893 2.03992 cv
146.845 2.03992 li
148.81 2.03992 150.404 3.63328 150.404 5.59884 cv
.427451 .313726 .207843 rgb
f
144.425 34.1117 mo
131.864 34.1117 li
131.979 32.8469 132.139 30.3713 131.75 29.3476 cv
131.473 28.6197 131.106 27.9364 130.75 27.2756 cv
130.071 26.0108 129.43 24.8162 129.43 23.3996 cv
129.43 20.8906 130.78 18.1761 132.455 16.2857 cv
143.752 16.2857 li
145.372 18.106 146.73 20.7129 146.73 23.3996 cv
146.73 24.7775 146.122 25.9504 145.477 27.1918 cv
145.142 27.8376 144.796 28.5054 144.534 29.2131 cv
144.145 30.2679 144.31 32.8228 144.425 34.1117 cv
.866667 .823529 .760784 rgb
f
143.752 16.2857 mo
132.455 16.2857 li
133.507 15.0989 134.687 14.2367 135.74 13.9547 cv
136.371 13.7858 137.394 13.6793 138.387 13.6793 cv
139.257 13.6793 140.104 13.7612 140.643 13.9547 cv
141.599 14.2981 142.728 15.1346 143.752 16.2857 cv
.811765 .74902 .701961 rgb
f
131.05 29.3651 mo
130.243 27.3991 128.773 25.692 128.773 23.3995 cv
128.773 20.8723 129.665 18.3839 131.209 16.2857 cv
131.209 16.2857 li
129.665 18.3839 128.773 20.8723 128.773 23.3995 cv
128.773 25.692 130.243 27.3991 131.05 29.3651 cv
.866667 .823529 .760784 rgb
f
131.209 16.2857 mo
131.209 16.2857 li
132.422 14.6362 134.038 13.228 135.94 12.2312 cv
137.318 11.5089 137.521 10.9098 137.521 9.92488 cv
137.521 10.9098 137.318 11.5089 135.94 12.2312 cv
134.038 13.228 132.422 14.6362 131.209 16.2857 cv
.811765 .74902 .701961 rgb
f
135.74 2.03992 mo
135.74 2.03992 li
132.107 1.79357 129.424 .987697 129.321 .0239657 cv
129.424 .987697 132.107 1.79357 135.74 2.03992 cv
f
136.307 2.07341 mo
136.116 2.06377 135.927 2.05257 135.74 2.03992 cv
135.74 2.03992 li
135.927 2.05257 136.116 2.06377 136.307 2.07341 cv
.827451 .792157 .760784 rgb
f
145.151 34.7686 mo
131.136 34.7686 li
131.136 34.7686 131.341 33.0051 131.341 31.4692 cv
131.341 30.6989 131.29 29.9859 131.136 29.5811 cv
131.108 29.5088 131.08 29.4368 131.05 29.3651 cv
130.243 27.3991 128.773 25.692 128.773 23.3995 cv
128.773 20.8723 129.665 18.3839 131.209 16.2857 cv
132.455 16.2857 li
130.78 18.1761 129.43 20.8906 129.43 23.3996 cv
129.43 24.8162 130.071 26.0108 130.75 27.2756 cv
131.106 27.9364 131.473 28.6197 131.75 29.3476 cv
132.139 30.3713 131.979 32.8469 131.864 34.1117 cv
144.425 34.1117 li
144.31 32.8228 144.145 30.2679 144.534 29.2131 cv
144.796 28.5054 145.142 27.8376 145.477 27.1918 cv
146.122 25.9504 146.73 24.7775 146.73 23.3996 cv
146.73 20.7129 145.372 18.106 143.752 16.2857 cv
145.18 16.2857 li
146.654 18.381 147.386 20.8494 147.386 23.3995 cv
147.386 25.7072 145.892 27.4334 145.151 29.4408 cv
144.997 29.8581 144.946 30.5909 144.946 31.382 cv
144.946 32.9595 145.151 34.7686 145.151 34.7686 cv
.945098 .929412 .905882 rgb
f
145.18 16.2857 mo
143.752 16.2857 li
142.728 15.1346 141.599 14.2981 140.643 13.9547 cv
140.104 13.7612 139.257 13.6793 138.387 13.6793 cv
137.394 13.6793 136.371 13.7858 135.74 13.9547 cv
134.687 14.2367 133.507 15.0989 132.455 16.2857 cv
131.209 16.2857 li
132.422 14.6362 134.038 13.228 135.94 12.2312 cv
137.318 11.5089 137.521 10.9098 137.521 9.92488 cv
137.521 9.69281 137.509 9.43934 137.5 9.15777 cv
138.86 9.15777 li
138.849 9.45015 138.836 9.71243 138.837 9.95197 cv
138.837 10.9247 139.045 11.5215 140.426 12.2285 cv
142.457 13.2687 144.04 14.6657 145.18 16.2857 cv
140.401 2.03992 mo
135.74 2.03992 li
132.107 1.79357 129.424 .987697 129.321 .0239657 cv
129.32 .0159876 129.32 .00799952 129.319 0 cv
146.84 0 li
146.78 .975818 144.072 1.79287 140.401 2.03992 cv
.92549 .898039 .882353 rgb
f
138.86 9.15777 mo
137.5 9.15777 li
137.492 8.93951 137.485 8.70437 137.485 8.44926 cv
137.485 5.85014 137.18 3.54541 136.307 2.07341 cv
136.307 2.07341 li
136.116 2.06377 135.927 2.05257 135.74 2.03992 cv
140.401 2.03992 li
140.258 2.04955 140.113 2.05833 139.967 2.0662 cv
139.092 3.53775 138.875 5.84728 138.875 8.44926 cv
138.875 8.7042 138.868 8.93939 138.86 9.15777 cv
.929412 .917647 .905882 rgb
f
137.384 1.51644 mo
137.53 1.10861 137.671 .698857 137.805 .285974 cv
130.329 .285974 li
130.383 .88146 132.876 1.37799 136.228 1.51644 cv
137.384 1.51644 li
cp
1 1 1 rgb
f
137.229 29.4046 mo
136.717 27.401 136.232 25.5086 136.232 23.2646 cv
136.232 20.1073 136.878 16.7487 137.776 13.998 cv
136.99 13.9855 136.16 14.087 135.657 14.2625 cv
133.596 14.9824 130.895 19.5413 130.895 23.5632 cv
130.895 24.9581 131.379 26.1345 131.892 27.38 cv
132.16 28.0307 132.437 28.7035 132.646 29.4202 cv
132.94 30.4285 132.819 32.8662 132.732 34.1117 cv
137.818 34.1117 li
137.818 31.9019 li
137.637 31.0419 137.435 30.207 137.229 29.4046 cv
cp
f
123.425 34.1117 mo
110.863 34.1117 li
110.979 32.8469 111.139 30.3713 110.75 29.3476 cv
110.473 28.6197 110.106 27.9364 109.75 27.2756 cv
109.071 26.0108 108.43 24.8162 108.43 23.3996 cv
108.43 20.8906 109.78 18.1761 111.455 16.2857 cv
122.752 16.2857 li
124.371 18.106 125.73 20.7129 125.73 23.3996 cv
125.73 24.7775 125.122 25.9504 124.477 27.1918 cv
124.142 27.8376 123.796 28.5054 123.534 29.2131 cv
123.145 30.2679 123.31 32.8228 123.425 34.1117 cv
.866667 .823529 .760784 rgb
f
122.752 16.2857 mo
111.455 16.2857 li
112.507 15.0989 113.687 14.2367 114.74 13.9547 cv
115.371 13.7858 116.394 13.6793 117.387 13.6793 cv
118.257 13.6793 119.104 13.7612 119.643 13.9547 cv
120.599 14.2981 121.728 15.1346 122.752 16.2857 cv
.811765 .74902 .701961 rgb
f
110.05 29.3651 mo
109.243 27.3991 107.773 25.692 107.773 23.3995 cv
107.773 20.8723 108.665 18.3839 110.209 16.2857 cv
110.209 16.2857 li
108.665 18.3839 107.773 20.8723 107.773 23.3995 cv
107.773 25.692 109.243 27.3991 110.05 29.3651 cv
.866667 .823529 .760784 rgb
f
110.209 16.2857 mo
110.209 16.2857 li
111.422 14.6362 113.038 13.228 114.94 12.2312 cv
116.318 11.5089 116.521 10.9098 116.521 9.92488 cv
116.521 10.9098 116.318 11.5089 114.94 12.2312 cv
113.038 13.228 111.422 14.6362 110.209 16.2857 cv
.811765 .74902 .701961 rgb
f
114.74 2.03992 mo
114.74 2.03992 li
111.107 1.79357 108.424 .987697 108.321 .0239657 cv
108.424 .987697 111.107 1.79357 114.74 2.03992 cv
f
115.307 2.07341 mo
115.116 2.06377 114.927 2.05257 114.74 2.03992 cv
114.74 2.03992 li
114.927 2.05257 115.116 2.06377 115.307 2.07341 cv
.827451 .792157 .760784 rgb
f
124.151 34.7686 mo
110.136 34.7686 li
110.136 34.7686 110.341 33.0051 110.341 31.4692 cv
110.341 30.6989 110.29 29.9859 110.136 29.5811 cv
110.108 29.5088 110.08 29.4368 110.05 29.3651 cv
109.243 27.3991 107.773 25.692 107.773 23.3995 cv
107.773 20.8723 108.665 18.3839 110.209 16.2857 cv
111.455 16.2857 li
109.78 18.1761 108.43 20.8906 108.43 23.3996 cv
108.43 24.8162 109.071 26.0108 109.75 27.2756 cv
110.106 27.9364 110.473 28.6197 110.75 29.3476 cv
111.139 30.3713 110.979 32.8469 110.863 34.1117 cv
123.425 34.1117 li
123.31 32.8228 123.145 30.2679 123.534 29.2131 cv
123.796 28.5054 124.142 27.8376 124.477 27.1918 cv
125.122 25.9504 125.73 24.7775 125.73 23.3996 cv
125.73 20.7129 124.371 18.106 122.752 16.2857 cv
124.18 16.2857 li
125.654 18.381 126.386 20.8494 126.386 23.3995 cv
126.386 25.7072 124.892 27.4334 124.151 29.4408 cv
123.997 29.8581 123.946 30.5909 123.946 31.382 cv
123.946 32.9595 124.151 34.7686 124.151 34.7686 cv
.945098 .929412 .905882 rgb
f
124.18 16.2857 mo
122.752 16.2857 li
121.728 15.1346 120.599 14.2981 119.643 13.9547 cv
119.104 13.7612 118.257 13.6793 117.387 13.6793 cv
116.394 13.6793 115.371 13.7858 114.74 13.9547 cv
113.687 14.2367 112.507 15.0989 111.455 16.2857 cv
110.209 16.2857 li
111.422 14.6362 113.038 13.228 114.94 12.2312 cv
116.318 11.5089 116.521 10.9098 116.521 9.92488 cv
116.521 9.69281 116.509 9.43934 116.5 9.15777 cv
117.86 9.15777 li
117.849 9.45015 117.836 9.71243 117.837 9.95197 cv
117.837 10.9247 118.045 11.5215 119.426 12.2285 cv
121.457 13.2687 123.04 14.6657 124.18 16.2857 cv
119.401 2.03992 mo
114.74 2.03992 li
111.107 1.79357 108.424 .987697 108.321 .0239657 cv
108.32 .0159876 108.32 .00799952 108.319 0 cv
125.84 0 li
125.78 .975818 123.072 1.79287 119.401 2.03992 cv
.92549 .898039 .882353 rgb
f
117.86 9.15777 mo
116.5 9.15777 li
116.492 8.93951 116.485 8.70437 116.485 8.44926 cv
116.485 5.85014 116.18 3.54541 115.307 2.07341 cv
115.307 2.07341 li
115.116 2.06377 114.927 2.05257 114.74 2.03992 cv
119.401 2.03992 li
119.258 2.04955 119.113 2.05833 118.967 2.0662 cv
118.092 3.53775 117.875 5.84728 117.875 8.44926 cv
117.875 8.7042 117.868 8.93939 117.86 9.15777 cv
.929412 .917647 .905882 rgb
f
116.384 1.51644 mo
116.53 1.10861 116.671 .698857 116.805 .285974 cv
109.329 .285974 li
109.383 .88146 111.876 1.37799 115.228 1.51644 cv
116.384 1.51644 li
cp
1 1 1 rgb
f
116.229 29.4046 mo
115.717 27.401 115.232 25.5086 115.232 23.2646 cv
115.232 20.1073 115.878 16.7487 116.776 13.998 cv
115.99 13.9855 115.16 14.087 114.657 14.2625 cv
112.596 14.9824 109.895 19.5413 109.895 23.5632 cv
109.895 24.9581 110.379 26.1345 110.892 27.38 cv
111.16 28.0307 111.437 28.7035 111.646 29.4202 cv
111.94 30.4285 111.819 32.8662 111.732 34.1117 cv
116.818 34.1117 li
116.818 31.9019 li
116.637 31.0419 116.435 30.207 116.229 29.4046 cv
cp
f
102.425 34.1117 mo
89.8634 34.1117 li
89.979 32.8469 90.1394 30.3713 89.75 29.3476 cv
89.4728 28.6197 89.106 27.9364 88.7504 27.2756 cv
88.0711 26.0108 87.4295 24.8162 87.4295 23.3996 cv
87.4295 20.8906 88.7802 18.1761 90.4555 16.2857 cv
101.752 16.2857 li
103.371 18.106 104.73 20.7129 104.73 23.3996 cv
104.73 24.7775 104.122 25.9504 103.477 27.1918 cv
103.143 27.8376 102.796 28.5054 102.534 29.2131 cv
102.145 30.2679 102.31 32.8228 102.425 34.1117 cv
.866667 .823529 .760784 rgb
f
101.752 16.2857 mo
90.4555 16.2857 li
91.5072 15.0989 92.6871 14.2367 93.7405 13.9547 cv
94.3713 13.7858 95.3943 13.6793 96.3869 13.6793 cv
97.2572 13.6793 98.1041 13.7612 98.643 13.9547 cv
99.599 14.2981 100.728 15.1346 101.752 16.2857 cv
.811765 .74902 .701961 rgb
f
89.0503 29.3651 mo
88.2429 27.3991 86.7727 25.692 86.7727 23.3995 cv
86.7727 20.8723 87.665 18.3839 89.2087 16.2857 cv
89.2088 16.2857 li
87.6651 18.3839 86.7729 20.8723 86.7729 23.3995 cv
86.7729 25.692 88.2429 27.3991 89.0503 29.3651 cv
.866667 .823529 .760784 rgb
f
89.2088 16.2857 mo
89.2087 16.2857 li
90.4222 14.6362 92.0382 13.228 93.94 12.2312 cv
95.3182 11.5089 95.5211 10.9098 95.5208 9.92488 cv
95.5211 10.9098 95.3182 11.5089 93.94 12.2312 cv
92.0382 13.228 90.4222 14.6362 89.2088 16.2857 cv
.811765 .74902 .701961 rgb
f
93.7401 2.03992 mo
93.7399 2.03992 li
90.077 1.79153 87.3792 .974317 87.3193 0 cv
87.3793 .974317 90.0771 1.79153 93.7401 2.03992 cv
f
95.4541 7.07981 mo
95.3572 5.04876 95.0233 3.28091 94.3072 2.07341 cv
94.1159 2.06377 93.9265 2.05257 93.7399 2.03992 cv
93.7401 2.03992 li
93.9266 2.05257 94.116 2.06377 94.3074 2.07341 cv
95.0234 3.28091 95.3572 5.04876 95.4541 7.07981 cv
.827451 .792157 .760784 rgb
f
103.151 34.7686 mo
89.1359 34.7686 li
89.1359 34.7686 89.3406 33.0051 89.341 31.4692 cv
89.3412 30.6989 89.29 29.9859 89.1359 29.5811 cv
89.1083 29.5088 89.0798 29.4368 89.0503 29.3651 cv
88.2429 27.3991 86.7729 25.692 86.7729 23.3995 cv
86.7729 20.8723 87.6651 18.3839 89.2088 16.2857 cv
90.4555 16.2857 li
88.7802 18.1761 87.4295 20.8906 87.4295 23.3996 cv
87.4295 24.8162 88.0711 26.0108 88.7504 27.2756 cv
89.106 27.9364 89.4728 28.6197 89.75 29.3476 cv
90.1394 30.3713 89.979 32.8469 89.8634 34.1117 cv
102.425 34.1117 li
102.31 32.8228 102.145 30.2679 102.534 29.2131 cv
102.796 28.5054 103.143 27.8376 103.477 27.1918 cv
104.122 25.9504 104.73 24.7775 104.73 23.3996 cv
104.73 20.7129 103.371 18.106 101.752 16.2857 cv
103.18 16.2857 li
104.654 18.381 105.386 20.8494 105.386 23.3995 cv
105.386 25.7072 103.892 27.4334 103.151 29.4408 cv
102.997 29.8581 102.946 30.5909 102.946 31.382 cv
102.946 32.9595 103.151 34.7686 103.151 34.7686 cv
.945098 .929412 .905882 rgb
f
103.18 16.2857 mo
101.752 16.2857 li
100.728 15.1346 99.599 14.2981 98.643 13.9547 cv
98.1041 13.7612 97.2572 13.6793 96.3869 13.6793 cv
95.3943 13.6793 94.3713 13.7858 93.7405 13.9547 cv
92.6871 14.2367 91.5072 15.0989 90.4555 16.2857 cv
89.2088 16.2857 li
90.4222 14.6362 92.0382 13.228 93.94 12.2312 cv
95.3182 11.5089 95.5211 10.9098 95.5208 9.92488 cv
95.5208 9.69281 95.5095 9.43934 95.4996 9.15777 cv
96.8596 9.15777 li
96.8489 9.45015 96.8364 9.71243 96.8365 9.95197 cv
96.837 10.9247 97.0453 11.5215 98.426 12.2285 cv
100.457 13.2687 102.04 14.6657 103.18 16.2857 cv
98.4008 2.03992 mo
93.7401 2.03992 li
90.0771 1.79153 87.3793 .974317 87.3193 0 cv
87.3193 0 li
104.84 0 li
104.78 .975818 102.072 1.79287 98.4008 2.03992 cv
.92549 .898039 .882353 rgb
f
96.8596 9.15777 mo
95.4996 9.15777 li
95.4919 8.93951 95.4851 8.70437 95.4851 8.44926 cv
95.4851 7.98223 95.4753 7.5247 95.4541 7.07981 cv
95.3572 5.04876 95.0234 3.28091 94.3074 2.07341 cv
94.116 2.06377 93.9266 2.05257 93.7401 2.03992 cv
98.4008 2.03992 li
98.2577 2.04955 98.113 2.05833 97.9669 2.0662 cv
97.0923 3.53775 96.8747 5.84728 96.8747 8.44926 cv
96.8747 8.7042 96.8677 8.93939 96.8596 9.15777 cv
.929412 .917647 .905882 rgb
f
95.3844 1.51644 mo
95.5304 1.10861 95.6708 .698857 95.8048 .285974 cv
88.3286 .285974 li
88.383 .88146 90.8762 1.37799 94.2284 1.51644 cv
95.3844 1.51644 li
cp
1 1 1 rgb
f
95.2294 29.4046 mo
94.7167 27.401 94.2325 25.5086 94.2325 23.2646 cv
94.2325 20.1073 94.8779 16.7487 95.7762 13.998 cv
94.9897 13.9855 94.1597 14.087 93.6574 14.2625 cv
91.5963 14.9824 88.8948 19.5413 88.8948 23.5632 cv
88.8948 24.9581 89.3789 26.1345 89.8916 27.38 cv
90.1599 28.0307 90.4368 28.7035 90.646 29.4202 cv
90.9399 30.4285 90.8188 32.8662 90.7317 34.1117 cv
95.8179 34.1117 li
95.8179 31.9019 li
95.6366 31.0419 95.435 30.207 95.2294 29.4046 cv
cp
f
81.4251 34.1117 mo
68.8635 34.1117 li
68.979 32.8469 69.1394 30.3713 68.7501 29.3476 cv
68.4728 28.6197 68.1058 27.9364 67.7505 27.2756 cv
67.0709 26.0108 66.4296 24.8162 66.4296 23.3996 cv
66.4296 20.8906 67.7802 18.1761 69.4555 16.2857 cv
80.7519 16.2857 li
82.3715 18.106 83.7297 20.7129 83.7297 23.3996 cv
83.7297 24.7775 83.1216 25.9504 82.4773 27.1918 cv
82.1425 27.8376 81.796 28.5054 81.5343 29.2131 cv
81.1449 30.2679 81.3096 32.8228 81.4251 34.1117 cv
.866667 .823529 .760784 rgb
f
80.7519 16.2857 mo
69.4555 16.2857 li
70.5073 15.0989 71.6871 14.2367 72.7405 13.9547 cv
73.3713 13.7858 74.3944 13.6793 75.387 13.6793 cv
76.2572 13.6793 77.1041 13.7612 77.643 13.9547 cv
78.599 14.2981 79.7277 15.1346 80.7519 16.2857 cv
.811765 .74902 .701961 rgb
f
68.0503 29.3651 mo
67.2429 27.3991 65.7727 25.692 65.7727 23.3995 cv
65.7727 20.8723 66.665 18.3839 68.2087 16.2857 cv
68.2088 16.2857 li
66.6651 18.3839 65.7729 20.8723 65.7729 23.3995 cv
65.7729 25.692 67.2429 27.3991 68.0503 29.3651 cv
.866667 .823529 .760784 rgb
f
68.2088 16.2857 mo
68.2087 16.2857 li
69.4222 14.6362 71.0382 13.228 72.94 12.2312 cv
74.3182 11.5089 74.5211 10.9098 74.5209 9.92488 cv
74.5211 10.9098 74.3182 11.5089 72.94 12.2312 cv
71.0382 13.228 69.4223 14.6362 68.2088 16.2857 cv
.811765 .74902 .701961 rgb
f
72.7401 2.03992 mo
72.7399 2.03992 li
69.077 1.79153 66.3792 .974317 66.3193 0 cv
66.3793 .974317 69.0771 1.79153 72.7401 2.03992 cv
f
74.4541 7.07981 mo
74.3572 5.04876 74.0234 3.28091 73.3072 2.07341 cv
73.1159 2.06377 72.9265 2.05257 72.7399 2.03992 cv
72.7401 2.03992 li
72.9267 2.05257 73.116 2.06377 73.3074 2.07341 cv
74.0234 3.28091 74.3572 5.04876 74.4541 7.07981 cv
.827451 .792157 .760784 rgb
f
82.1509 34.7686 mo
68.1359 34.7686 li
68.1359 34.7686 68.3406 33.0051 68.341 31.4692 cv
68.3412 30.6989 68.29 29.9859 68.1359 29.5811 cv
68.1083 29.5088 68.0798 29.4368 68.0503 29.3651 cv
67.2429 27.3991 65.7729 25.692 65.7729 23.3995 cv
65.7729 20.8723 66.6651 18.3839 68.2088 16.2857 cv
69.4555 16.2857 li
67.7802 18.1761 66.4296 20.8906 66.4296 23.3996 cv
66.4296 24.8162 67.0709 26.0108 67.7505 27.2756 cv
68.1058 27.9364 68.4728 28.6197 68.7501 29.3476 cv
69.1394 30.3713 68.979 32.8469 68.8635 34.1117 cv
81.4251 34.1117 li
81.3096 32.8228 81.1449 30.2679 81.5343 29.2131 cv
81.796 28.5054 82.1425 27.8376 82.4773 27.1918 cv
83.1216 25.9504 83.7297 24.7775 83.7297 23.3996 cv
83.7297 20.7129 82.3715 18.106 80.7519 16.2857 cv
82.18 16.2857 li
83.6541 18.381 84.3864 20.8494 84.3864 23.3995 cv
84.3864 25.7072 82.8923 27.4334 82.1509 29.4408 cv
81.9968 29.8581 81.9457 30.5909 81.9459 31.382 cv
81.9463 32.9595 82.1509 34.7686 82.1509 34.7686 cv
.945098 .929412 .905882 rgb
f
82.18 16.2857 mo
80.7519 16.2857 li
79.7277 15.1346 78.599 14.2981 77.643 13.9547 cv
77.1041 13.7612 76.2572 13.6793 75.387 13.6793 cv
74.3944 13.6793 73.3713 13.7858 72.7405 13.9547 cv
71.6871 14.2367 70.5073 15.0989 69.4555 16.2857 cv
68.2088 16.2857 li
69.4223 14.6362 71.0382 13.228 72.94 12.2312 cv
74.3182 11.5089 74.5211 10.9098 74.5209 9.92488 cv
74.5208 9.69281 74.5095 9.43934 74.4996 9.15777 cv
75.8597 9.15777 li
75.849 9.45015 75.8364 9.71243 75.8366 9.95197 cv
75.837 10.9247 76.0453 11.5215 77.426 12.2285 cv
79.4573 13.2687 81.0403 14.6657 82.18 16.2857 cv
77.4008 2.03992 mo
72.7401 2.03992 li
69.0771 1.79153 66.3793 .974317 66.3193 0 cv
66.3193 0 li
83.8398 0 li
83.7798 .975818 81.0722 1.79287 77.4008 2.03992 cv
.92549 .898039 .882353 rgb
f
75.8597 9.15777 mo
74.4996 9.15777 li
74.4919 8.93951 74.4851 8.70437 74.4851 8.44926 cv
74.4851 7.98223 74.4753 7.5247 74.4541 7.07981 cv
74.3572 5.04876 74.0234 3.28091 73.3074 2.07341 cv
73.116 2.06377 72.9267 2.05257 72.7401 2.03992 cv
77.4008 2.03992 li
77.2577 2.04955 77.113 2.05833 76.9669 2.0662 cv
76.0923 3.53775 75.8747 5.84728 75.8747 8.44926 cv
75.8747 8.7042 75.8677 8.93939 75.8597 9.15777 cv
.929412 .917647 .905882 rgb
f
74.3844 1.51644 mo
74.5304 1.10861 74.6708 .698857 74.8048 .285974 cv
67.3286 .285974 li
67.383 .88146 69.8762 1.37799 73.2284 1.51644 cv
74.3844 1.51644 li
cp
1 1 1 rgb
f
74.2294 29.4046 mo
73.7167 27.401 73.2325 25.5086 73.2325 23.2646 cv
73.2325 20.1073 73.8779 16.7487 74.7762 13.998 cv
73.9897 13.9855 73.1597 14.087 72.6574 14.2625 cv
70.5963 14.9824 67.8948 19.5413 67.8948 23.5632 cv
67.8948 24.9581 68.3789 26.1345 68.8916 27.38 cv
69.1599 28.0307 69.4368 28.7035 69.646 29.4202 cv
69.9399 30.4285 69.8188 32.8662 69.7317 34.1117 cv
74.8179 34.1117 li
74.8179 31.9019 li
74.6366 31.0419 74.435 30.207 74.2294 29.4046 cv
cp
f
60.4252 34.1117 mo
47.8635 34.1117 li
47.979 32.8469 48.1394 30.3713 47.7501 29.3476 cv
47.4728 28.6197 47.1058 27.9364 46.7505 27.2756 cv
46.0709 26.0108 45.4296 24.8162 45.4296 23.3996 cv
45.4296 20.8906 46.7803 18.1761 48.4555 16.2857 cv
59.7519 16.2857 li
61.3715 18.106 62.7297 20.7129 62.7297 23.3996 cv
62.7297 24.7775 62.1216 25.9504 61.4773 27.1918 cv
61.1425 27.8376 60.796 28.5054 60.5344 29.2131 cv
60.1449 30.2679 60.3097 32.8228 60.4252 34.1117 cv
.866667 .823529 .760784 rgb
f
59.7519 16.2857 mo
48.4555 16.2857 li
49.5073 15.0989 50.6871 14.2367 51.7405 13.9547 cv
52.3714 13.7858 53.3944 13.6793 54.387 13.6793 cv
55.2572 13.6793 56.1041 13.7612 56.643 13.9547 cv
57.5991 14.2981 58.7277 15.1346 59.7519 16.2857 cv
.811765 .74902 .701961 rgb
f
51.7401 2.03992 mo
51.74 2.03992 li
48.077 1.79153 45.3792 .974317 45.3193 0 cv
45.3794 .974317 48.0771 1.79153 51.7401 2.03992 cv
f
53.4541 7.07981 mo
53.3572 5.04876 53.0234 3.28091 52.3073 2.07341 cv
52.1159 2.06377 51.9265 2.05257 51.74 2.03992 cv
51.7401 2.03992 li
51.9267 2.05257 52.1161 2.06377 52.3074 2.07341 cv
53.0234 3.28091 53.3572 5.04876 53.4541 7.07981 cv
.827451 .792157 .760784 rgb
f
61.1509 34.7686 mo
47.1359 34.7686 li
47.1359 34.7686 47.3406 33.0051 47.341 31.4692 cv
47.3412 30.6989 47.29 29.9859 47.1359 29.5811 cv
46.3518 27.5227 44.7727 25.7756 44.7727 23.3995 cv
44.7727 20.8723 45.665 18.3839 47.2087 16.2857 cv
48.4555 16.2857 li
46.7803 18.1761 45.4296 20.8906 45.4296 23.3996 cv
45.4296 24.8162 46.0709 26.0108 46.7505 27.2756 cv
47.1058 27.9364 47.4728 28.6197 47.7501 29.3476 cv
48.1394 30.3713 47.979 32.8469 47.8635 34.1117 cv
60.4252 34.1117 li
60.3097 32.8228 60.1449 30.2679 60.5344 29.2131 cv
60.796 28.5054 61.1425 27.8376 61.4773 27.1918 cv
62.1216 25.9504 62.7297 24.7775 62.7297 23.3996 cv
62.7297 20.7129 61.3715 18.106 59.7519 16.2857 cv
61.18 16.2857 li
62.6541 18.381 63.3864 20.8494 63.3864 23.3995 cv
63.3864 25.7072 61.8924 27.4334 61.1509 29.4408 cv
60.9968 29.8581 60.9457 30.5909 60.9459 31.382 cv
60.9463 32.9595 61.1509 34.7686 61.1509 34.7686 cv
.945098 .929412 .905882 rgb
f
61.18 16.2857 mo
59.7519 16.2857 li
58.7277 15.1346 57.5991 14.2981 56.643 13.9547 cv
56.1041 13.7612 55.2572 13.6793 54.387 13.6793 cv
53.3944 13.6793 52.3714 13.7858 51.7405 13.9547 cv
50.6871 14.2367 49.5073 15.0989 48.4555 16.2857 cv
47.2087 16.2857 li
48.4222 14.6362 50.0383 13.228 51.94 12.2312 cv
53.3183 11.5089 53.5211 10.9098 53.5209 9.92488 cv
53.5208 9.69281 53.5095 9.43934 53.4996 9.15777 cv
54.8595 9.15777 li
54.8488 9.45015 54.8363 9.71243 54.8365 9.95197 cv
54.8369 10.9247 55.0453 11.5215 56.426 12.2285 cv
58.4574 13.2687 60.0404 14.6657 61.18 16.2857 cv
56.4009 2.03992 mo
51.7401 2.03992 li
48.0771 1.79153 45.3794 .974317 45.3193 0 cv
45.3193 0 li
62.8398 0 li
62.7798 .975818 60.0722 1.79287 56.4009 2.03992 cv
.92549 .898039 .882353 rgb
f
54.8595 9.15777 mo
53.4996 9.15777 li
53.4919 8.93951 53.4851 8.70437 53.4851 8.44926 cv
53.4851 7.98223 53.4753 7.5247 53.4541 7.07981 cv
53.3572 5.04876 53.0234 3.28091 52.3074 2.07341 cv
52.1161 2.06377 51.9267 2.05257 51.7401 2.03992 cv
56.4009 2.03992 li
56.2577 2.04955 56.113 2.05833 55.967 2.0662 cv
55.0923 3.53775 54.8745 5.84728 54.8745 8.44926 cv
54.8745 8.7042 54.8675 8.93939 54.8595 9.15777 cv
.929412 .917647 .905882 rgb
f
53.3844 1.51644 mo
53.5304 1.10861 53.6708 .698857 53.8048 .285974 cv
46.3286 .285974 li
46.383 .88146 48.8762 1.37799 52.2284 1.51644 cv
53.3844 1.51644 li
cp
1 1 1 rgb
f
53.2294 29.4046 mo
52.7167 27.401 52.2325 25.5086 52.2325 23.2646 cv
52.2325 20.1073 52.8779 16.7487 53.7762 13.998 cv
52.9897 13.9855 52.1597 14.087 51.6574 14.2625 cv
49.5963 14.9824 46.8948 19.5413 46.8948 23.5632 cv
46.8948 24.9581 47.3789 26.1345 47.8916 27.38 cv
48.1599 28.0307 48.4368 28.7035 48.646 29.4202 cv
48.9399 30.4285 48.8188 32.8662 48.7317 34.1117 cv
53.8179 34.1117 li
53.8179 31.9019 li
53.6366 31.0419 53.435 30.207 53.2294 29.4046 cv
cp
f
39.4252 34.1117 mo
26.8635 34.1117 li
26.979 32.8469 27.1394 30.3713 26.7499 29.3476 cv
26.4728 28.6197 26.1059 27.9364 25.7503 27.2756 cv
25.071 26.0108 24.4294 24.8162 24.4294 23.3996 cv
24.4294 20.8906 25.7802 18.1761 27.4555 16.2857 cv
38.7519 16.2857 li
40.3715 18.106 41.7298 20.7129 41.7298 23.3996 cv
41.7298 24.7775 41.1214 25.9504 40.4774 27.1918 cv
40.1426 27.8376 39.796 28.5054 39.5342 29.2131 cv
39.1449 30.2679 39.3097 32.8228 39.4252 34.1117 cv
.866667 .823529 .760784 rgb
f
38.7519 16.2857 mo
27.4555 16.2857 li
28.5073 15.0989 29.6871 14.2367 30.7405 13.9547 cv
31.3714 13.7858 32.3944 13.6793 33.387 13.6793 cv
34.2573 13.6793 35.1041 13.7612 35.643 13.9547 cv
36.5991 14.2981 37.7277 15.1346 38.7519 16.2857 cv
.811765 .74902 .701961 rgb
f
30.7401 2.03992 mo
30.74 2.03992 li
27.077 1.79153 24.3792 .974317 24.3193 0 cv
24.3794 .974317 27.0772 1.79153 30.7401 2.03992 cv
f
32.4541 7.07981 mo
32.3572 5.04876 32.0234 3.28091 31.3073 2.07341 cv
31.1159 2.06377 30.9265 2.05257 30.74 2.03992 cv
30.7401 2.03992 li
30.9267 2.05257 31.1161 2.06377 31.3074 2.07341 cv
32.0234 3.28091 32.3572 5.04876 32.4541 7.07981 cv
.827451 .792157 .760784 rgb
f
40.151 34.7686 mo
26.1359 34.7686 li
26.1359 34.7686 26.3406 33.0051 26.341 31.4692 cv
26.3412 30.6989 26.2901 29.9859 26.1359 29.5811 cv
25.3518 27.5227 23.7727 25.7756 23.7727 23.3995 cv
23.7727 20.8723 24.6651 18.3839 26.2087 16.2857 cv
27.4555 16.2857 li
25.7802 18.1761 24.4294 20.8906 24.4294 23.3996 cv
24.4294 24.8162 25.071 26.0108 25.7503 27.2756 cv
26.1059 27.9364 26.4728 28.6197 26.7499 29.3476 cv
27.1394 30.3713 26.979 32.8469 26.8635 34.1117 cv
39.4252 34.1117 li
39.3097 32.8228 39.1449 30.2679 39.5342 29.2131 cv
39.796 28.5054 40.1426 27.8376 40.4774 27.1918 cv
41.1214 25.9504 41.7298 24.7775 41.7298 23.3996 cv
41.7298 20.7129 40.3715 18.106 38.7519 16.2857 cv
40.1801 16.2857 li
41.6541 18.381 42.3864 20.8494 42.3864 23.3995 cv
42.3864 25.7072 40.8924 27.4334 40.151 29.4408 cv
39.9969 29.8581 39.9457 30.5909 39.9459 31.382 cv
39.9463 32.9595 40.151 34.7686 40.151 34.7686 cv
.945098 .929412 .905882 rgb
f
40.1801 16.2857 mo
38.7519 16.2857 li
37.7277 15.1346 36.5991 14.2981 35.643 13.9547 cv
35.1041 13.7612 34.2573 13.6793 33.387 13.6793 cv
32.3944 13.6793 31.3714 13.7858 30.7405 13.9547 cv
29.6871 14.2367 28.5073 15.0989 27.4555 16.2857 cv
26.2087 16.2857 li
27.4223 14.6362 29.0383 13.228 30.94 12.2312 cv
32.3183 11.5089 32.5211 10.9098 32.5209 9.92488 cv
32.5208 9.69281 32.5095 9.43934 32.4996 9.15777 cv
33.8596 9.15777 li
33.8488 9.45015 33.8364 9.71243 33.8365 9.95197 cv
33.8369 10.9247 34.0453 11.5215 35.426 12.2285 cv
37.4574 13.2687 39.0404 14.6657 40.1801 16.2857 cv
35.4007 2.03992 mo
30.7401 2.03992 li
27.0772 1.79153 24.3794 .974317 24.3193 0 cv
24.3193 0 li
41.8399 0 li
41.7799 .975818 39.0722 1.79287 35.4007 2.03992 cv
.92549 .898039 .882353 rgb
f
33.8596 9.15777 mo
32.4996 9.15777 li
32.492 8.93951 32.4852 8.70437 32.4852 8.44926 cv
32.4852 7.98223 32.4753 7.5247 32.4541 7.07981 cv
32.3572 5.04876 32.0234 3.28091 31.3074 2.07341 cv
31.1161 2.06377 30.9267 2.05257 30.7401 2.03992 cv
35.4007 2.03992 li
35.2575 2.04955 35.1129 2.05833 34.9668 2.0662 cv
34.0923 3.53775 33.8745 5.84728 33.8745 8.44926 cv
33.8745 8.7042 33.8675 8.93939 33.8596 9.15777 cv
.929412 .917647 .905882 rgb
f
32.3844 1.51644 mo
32.5304 1.10861 32.6708 .698857 32.8048 .285974 cv
25.3286 .285974 li
25.383 .88146 27.8762 1.37799 31.2284 1.51644 cv
32.3844 1.51644 li
cp
1 1 1 rgb
f
32.2294 29.4046 mo
31.7167 27.401 31.2325 25.5086 31.2325 23.2646 cv
31.2325 20.1073 31.8779 16.7487 32.7762 13.998 cv
31.9897 13.9855 31.1597 14.087 30.6574 14.2625 cv
28.5963 14.9824 25.8948 19.5413 25.8948 23.5632 cv
25.8948 24.9581 26.3789 26.1345 26.8916 27.38 cv
27.1599 28.0307 27.4368 28.7035 27.646 29.4202 cv
27.9399 30.4285 27.8188 32.8662 27.7317 34.1117 cv
32.8179 34.1117 li
32.8179 31.9019 li
32.6366 31.0419 32.435 30.207 32.2294 29.4046 cv
cp
f
18.4252 34.1117 mo
5.8635 34.1117 li
5.97901 32.8469 6.13943 30.3713 5.74995 29.3476 cv
5.47282 28.6197 5.10588 27.9364 4.75049 27.2756 cv
4.07097 26.0108 3.42945 24.8162 3.42945 23.3996 cv
3.42945 20.8906 4.78019 18.1761 6.45546 16.2857 cv
17.7519 16.2857 li
19.3715 18.106 20.7298 20.7129 20.7298 23.3996 cv
20.7298 24.7775 20.1214 25.9504 19.4774 27.1918 cv
19.1426 27.8376 18.796 28.5054 18.5342 29.2131 cv
18.1449 30.2679 18.3097 32.8228 18.4252 34.1117 cv
.866667 .823529 .760784 rgb
f
17.7519 16.2857 mo
6.45546 16.2857 li
7.50723 15.0989 8.68706 14.2367 9.74041 13.9547 cv
10.3713 13.7858 11.3944 13.6793 12.387 13.6793 cv
13.2573 13.6793 14.1042 13.7612 14.6431 13.9547 cv
15.5991 14.2981 16.7277 15.1346 17.7519 16.2857 cv
.811765 .74902 .701961 rgb
f
9.74012 2.03992 mo
9.73999 2.03992 li
6.07702 1.79153 3.37923 .974317 3.3192 0 cv
20.8399 0 li
20.8399 0 li
3.31935 0 li
3.37924 .974317 6.07702 1.79153 9.74012 2.03992 cv
f
11.4673 7.4011 mo
11.3911 5.2355 11.0609 3.34416 10.3073 2.07341 cv
10.1159 2.06377 9.92655 2.05257 9.73999 2.03992 cv
9.74012 2.03992 li
9.92668 2.05257 10.1161 2.06377 10.3074 2.07341 cv
11.0609 3.34416 11.3911 5.2355 11.4673 7.4011 cv
.827451 .792157 .760784 rgb
f
19.1508 34.7686 mo
5.13592 34.7686 li
5.13592 34.7686 5.34066 33.0051 5.34106 31.4692 cv
5.34126 30.6989 5.29008 29.9859 5.13592 29.5811 cv
4.352 27.5227 2.77276 25.7756 2.77276 23.3995 cv
2.77276 20.8723 3.66507 18.3839 5.20876 16.2857 cv
6.45546 16.2857 li
4.78019 18.1761 3.42945 20.8906 3.42945 23.3996 cv
3.42945 24.8162 4.07097 26.0108 4.75049 27.2756 cv
5.10588 27.9364 5.47282 28.6197 5.74995 29.3476 cv
6.13943 30.3713 5.97901 32.8469 5.8635 34.1117 cv
18.4252 34.1117 li
18.3097 32.8228 18.1449 30.2679 18.5342 29.2131 cv
18.796 28.5054 19.1426 27.8376 19.4774 27.1918 cv
20.1214 25.9504 20.7298 24.7775 20.7298 23.3996 cv
20.7298 20.7129 19.3715 18.106 17.7519 16.2857 cv
19.1801 16.2857 li
20.6541 18.381 21.3865 20.8494 21.3865 23.3995 cv
21.3865 25.7072 19.8922 27.4334 19.1508 29.4408 cv
18.9968 29.8581 18.9456 30.5909 18.9458 31.382 cv
18.9462 32.9595 19.1508 34.7686 19.1508 34.7686 cv
.945098 .929412 .905882 rgb
f
19.1801 16.2857 mo
17.7519 16.2857 li
16.7277 15.1346 15.5991 14.2981 14.6431 13.9547 cv
14.1042 13.7612 13.2573 13.6793 12.387 13.6793 cv
11.3944 13.6793 10.3713 13.7858 9.74041 13.9547 cv
8.68706 14.2367 7.50723 15.0989 6.45546 16.2857 cv
5.20876 16.2857 li
6.42227 14.6362 8.03829 13.228 9.94003 12.2312 cv
11.3182 11.5089 11.521 10.9098 11.5208 9.92488 cv
11.5207 9.69281 11.5094 9.43934 11.4995 9.15777 cv
12.8596 9.15777 li
12.8489 9.45015 12.8364 9.71243 12.8365 9.95197 cv
12.8369 10.9247 13.0454 11.5215 14.426 12.2285 cv
16.4574 13.2687 18.0404 14.6657 19.1801 16.2857 cv
14.4008 2.03992 mo
9.74012 2.03992 li
6.07702 1.79153 3.37924 .974317 3.31935 0 cv
20.8399 0 li
20.7799 .975818 18.0722 1.79287 14.4008 2.03992 cv
.92549 .898039 .882353 rgb
f
12.8596 9.15777 mo
11.4995 9.15777 li
11.4918 8.93951 11.485 8.70437 11.485 8.44926 cv
11.485 8.09391 11.4793 7.74406 11.4673 7.4011 cv
11.3911 5.2355 11.0609 3.34416 10.3074 2.07341 cv
10.1161 2.06377 9.92668 2.05257 9.74012 2.03992 cv
14.4008 2.03992 li
14.2576 2.04955 14.1129 2.05833 13.9668 2.0662 cv
13.0924 3.53775 12.8746 5.84728 12.8746 8.44926 cv
12.8746 8.7042 12.8676 8.93939 12.8596 9.15777 cv
.929412 .917647 .905882 rgb
f
11.3844 1.51644 mo
11.5304 1.10861 11.6708 .698857 11.8048 .285974 cv
4.32865 .285974 li
4.38298 .88146 6.87623 1.37799 10.2284 1.51644 cv
11.3844 1.51644 li
cp
1 1 1 rgb
f
11.2294 29.4046 mo
10.7167 27.401 10.2325 25.5086 10.2325 23.2646 cv
10.2325 20.1073 10.8779 16.7487 11.7762 13.998 cv
10.9897 13.9855 10.1597 14.087 9.65742 14.2625 cv
7.59626 14.9824 4.89478 19.5413 4.89478 23.5632 cv
4.89478 24.9581 5.37892 26.1345 5.89164 27.38 cv
6.15989 28.0307 6.4368 28.7035 6.64595 29.4202 cv
6.93987 30.4285 6.81881 32.8662 6.73168 34.1117 cv
11.8179 34.1117 li
11.8179 31.9019 li
11.6366 31.0419 11.435 30.207 11.2294 29.4046 cv
cp
f
147.251 3.80579 mo
147.251 4.35807 146.803 4.80579 146.251 4.80579 cv
3.25089 4.80579 li
2.6986 4.80579 2.25089 4.35807 2.25089 3.80579 cv
2.25089 3.2535 2.6986 2.80579 3.25089 2.80579 cv
146.251 2.80579 li
146.803 2.80579 147.251 3.2535 147.251 3.80579 cv
cp
.317647 .215686 .133333 rgb
f
494.381 86.7659 mo
494.401 86.7659 li
494.236 86.6962 li
494.124 86.6487 li
489.632 84.7451 li
489.632 71.0741 li
489.632 69.7835 488.585 68.7373 487.295 68.7373 cv
486.004 68.7373 484.958 69.7835 484.958 71.0741 cv
484.958 84.728 li
480.149 86.7659 li
480.189 86.7659 li
479.458 87.1611 478.962 87.9338 478.962 88.8225 cv
478.962 109.565 li
478.962 110.856 480.008 111.005 481.299 111.005 cv
493.271 111.005 li
494.561 111.005 495.607 110.856 495.607 109.565 cv
495.607 88.8225 li
495.607 87.9338 495.111 87.1611 494.381 86.7659 cv
cp
.901961 .878431 .792157 rgb
f
494.134 87.2227 mo
494.135 87.2174 li
494.022 87.1691 li
493.921 87.1268 li
492.14 86.372 li
482.409 86.372 li
480.433 87.2095 li
480.436 87.2227 li
479.847 87.5412 479.481 88.1541 479.481 88.8225 cv
479.481 109.565 li
479.481 110.215 479.734 110.486 481.299 110.486 cv
493.271 110.486 li
494.836 110.486 495.088 110.215 495.088 109.565 cv
495.088 88.8225 li
495.088 88.1541 494.722 87.5412 494.134 87.2227 cv
cp
.878431 .690196 .188235 rgb
f
490.151 69.7839 mo
490.151 70.0005 489.802 70.1761 489.372 70.1761 cv
485.088 70.1761 li
484.658 70.1761 484.309 70.0005 484.309 69.7839 cv
484.309 67.4959 li
484.309 67.2793 484.658 67.1036 485.088 67.1036 cv
489.372 67.1036 li
489.802 67.1036 490.151 67.2793 490.151 67.4959 cv
490.151 69.7839 li
cp
.223529 .258824 .317647 rgb
f
483.595 109.946 mo
483.595 110.376 483.246 110.724 482.816 110.724 cv
482.124 110.724 li
481.693 110.724 481.345 110.376 481.345 109.946 cv
481.345 88.1351 li
481.345 87.7049 481.693 87.3561 482.124 87.3561 cv
482.816 87.3561 li
483.246 87.3561 483.595 87.7049 483.595 88.1351 cv
483.595 109.946 li
cp
.901961 .878431 .792157 rgb
f
486.711 83.7211 mo
486.711 84.0079 486.478 84.2404 486.191 84.2404 cv
485.905 84.2404 485.672 84.0079 485.672 83.7211 cv
485.672 71.258 li
485.672 70.9712 485.905 70.7387 486.191 70.7387 cv
486.478 70.7387 486.711 70.9712 486.711 71.258 cv
486.711 83.7211 li
cp
.968627 .952941 .905882 rgb
f
495.684 95.0269 mo
488.573 95.0269 li
487.742 94.4696 486.743 94.1438 485.667 94.1438 cv
484.591 94.1438 483.591 94.4696 482.76 95.0269 cv
478.886 95.0269 li
478.886 103.919 li
483.098 103.919 li
483.857 104.349 484.732 104.597 485.667 104.597 cv
486.601 104.597 487.476 104.349 488.235 103.919 cv
495.684 103.919 li
495.684 95.0269 li
cp
.482353 .592157 .14902 rgb
f
483.076 96.0655 mo
483.338 95.8896 li
484.028 95.4269 484.833 95.1824 485.667 95.1824 cv
486.5 95.1824 487.305 95.4269 487.995 95.8896 cv
488.257 96.0655 li
495.669 96.0655 li
495.669 95.5462 li
488.415 95.5462 li
488.284 95.4583 li
487.508 94.9381 486.603 94.6631 485.667 94.6631 cv
484.73 94.6631 483.825 94.9381 483.049 95.4583 cv
482.918 95.5462 li
478.791 95.5462 li
478.791 96.0655 li
483.076 96.0655 li
cp
.901961 .878431 .792157 rgb
f
487.961 102.881 mo
487.724 103.015 li
487.096 103.37 486.385 103.558 485.667 103.558 cv
484.949 103.558 484.238 103.37 483.61 103.015 cv
483.372 102.881 li
478.791 102.881 li
478.791 103.4 li
483.235 103.4 li
483.354 103.467 li
484.06 103.866 484.859 104.077 485.667 104.077 cv
486.474 104.077 487.274 103.866 487.979 103.467 cv
488.098 103.4 li
495.669 103.4 li
495.669 102.881 li
487.961 102.881 li
cp
f
484.958 74.4715 mo
484.958 81.5029 li
489.632 81.5029 li
489.632 74.4715 li
484.958 74.4715 li
cp
.482353 .592157 .14902 rgb
f
484.958 75.055 mo
484.958 75.7251 li
489.632 75.7251 li
489.632 75.055 li
484.958 75.055 li
cp
.901961 .878431 .792157 rgb
f
484.958 80.227 mo
484.958 80.8971 li
489.632 80.8971 li
489.632 80.227 li
484.958 80.227 li
cp
f
257.63 86.7659 mo
257.65 86.7659 li
257.485 86.6962 li
257.373 86.6487 li
252.881 84.7451 li
252.881 71.0741 li
252.881 69.7835 251.834 68.7373 250.544 68.7373 cv
249.253 68.7373 248.207 69.7835 248.207 71.0741 cv
248.207 84.728 li
243.397 86.7659 li
243.438 86.7659 li
242.707 87.1611 242.211 87.9338 242.211 88.8225 cv
242.211 109.565 li
242.211 110.856 243.257 111.005 244.548 111.005 cv
256.52 111.005 li
257.81 111.005 258.856 110.856 258.856 109.565 cv
258.856 88.8225 li
258.856 87.9338 258.36 87.1611 257.63 86.7659 cv
cp
f
257.383 87.2227 mo
257.384 87.2174 li
257.271 87.1691 li
257.17 87.1268 li
255.389 86.372 li
245.658 86.372 li
243.681 87.2095 li
243.685 87.2227 li
243.096 87.5412 242.73 88.1541 242.73 88.8225 cv
242.73 109.565 li
242.73 110.215 242.983 110.486 244.548 110.486 cv
256.52 110.486 li
258.085 110.486 258.337 110.215 258.337 109.565 cv
258.337 88.8225 li
258.337 88.1541 257.971 87.5412 257.383 87.2227 cv
cp
.494118 .458824 .564706 rgb
f
253.4 69.7839 mo
253.4 70.0005 253.051 70.1761 252.621 70.1761 cv
248.337 70.1761 li
247.907 70.1761 247.558 70.0005 247.558 69.7839 cv
247.558 67.4959 li
247.558 67.2793 247.907 67.1036 248.337 67.1036 cv
252.621 67.1036 li
253.051 67.1036 253.4 67.2793 253.4 67.4959 cv
253.4 69.7839 li
cp
.223529 .258824 .317647 rgb
f
246.844 109.946 mo
246.844 110.376 246.495 110.724 246.065 110.724 cv
245.372 110.724 li
244.942 110.724 244.593 110.376 244.593 109.946 cv
244.593 88.1351 li
244.593 87.7049 244.942 87.3561 245.372 87.3561 cv
246.065 87.3561 li
246.495 87.3561 246.844 87.7049 246.844 88.1351 cv
246.844 109.946 li
cp
.901961 .878431 .792157 rgb
f
249.96 83.7211 mo
249.96 84.0079 249.727 84.2404 249.44 84.2404 cv
249.153 84.2404 248.921 84.0079 248.921 83.7211 cv
248.921 71.258 li
248.921 70.9712 249.153 70.7387 249.44 70.7387 cv
249.727 70.7387 249.96 70.9712 249.96 71.258 cv
249.96 83.7211 li
cp
.968627 .952941 .905882 rgb
f
258.933 95.0269 mo
251.822 95.0269 li
250.991 94.4696 249.991 94.1438 248.915 94.1438 cv
247.84 94.1438 246.84 94.4696 246.009 95.0269 cv
242.134 95.0269 li
242.134 103.919 li
246.347 103.919 li
247.106 104.349 247.981 104.597 248.915 104.597 cv
249.85 104.597 250.725 104.349 251.484 103.919 cv
258.933 103.919 li
258.933 95.0269 li
cp
.482353 .592157 .14902 rgb
f
246.325 96.0655 mo
246.587 95.8896 li
247.277 95.4269 248.082 95.1824 248.915 95.1824 cv
249.749 95.1824 250.554 95.4269 251.244 95.8896 cv
251.506 96.0655 li
258.917 96.0655 li
258.917 95.5462 li
251.664 95.5462 li
251.533 95.4583 li
250.757 94.9381 249.852 94.6631 248.915 94.6631 cv
247.979 94.6631 247.074 94.9381 246.298 95.4583 cv
246.167 95.5462 li
242.04 95.5462 li
242.04 96.0655 li
246.325 96.0655 li
cp
.901961 .878431 .792157 rgb
f
251.21 102.881 mo
250.972 103.015 li
250.345 103.37 249.633 103.558 248.915 103.558 cv
248.198 103.558 247.486 103.37 246.859 103.015 cv
246.621 102.881 li
242.04 102.881 li
242.04 103.4 li
246.484 103.4 li
246.603 103.467 li
247.309 103.866 248.108 104.077 248.915 104.077 cv
249.723 104.077 250.522 103.866 251.228 103.467 cv
251.347 103.4 li
258.917 103.4 li
258.917 102.881 li
251.21 102.881 li
cp
f
248.207 74.4715 mo
248.207 81.5029 li
252.881 81.5029 li
252.881 74.4715 li
248.207 74.4715 li
cp
.482353 .592157 .14902 rgb
f
248.207 75.055 mo
248.207 75.7251 li
252.881 75.7251 li
252.881 75.055 li
248.207 75.055 li
cp
.901961 .878431 .792157 rgb
f
248.207 80.227 mo
248.207 80.8971 li
252.881 80.8971 li
252.881 80.227 li
248.207 80.227 li
cp
f
552.538 81.6316 mo
552.538 74.6107 li
552.538 73.6242 551.362 72.8244 549.912 72.8244 cv
548.461 72.8244 547.286 73.6242 547.286 74.6107 cv
547.286 81.6105 li
547.286 81.6105 543.539 87.0082 543.539 88.0964 cv
543.539 109.905 li
543.539 110.891 544.338 111.005 545.325 111.005 cv
554.476 111.005 li
555.462 111.005 556.262 110.891 556.262 109.905 cv
556.262 88.0964 li
556.262 87.0082 552.538 81.6316 552.538 81.6316 cv
cp
.913725 .878431 .819608 rgb
f
547.419 82.4671 mo
545.802 84.8401 544.167 87.5319 544.134 88.0964 cv
544.134 109.905 li
544.134 110.198 544.134 110.41 545.325 110.41 cv
554.476 110.41 li
555.667 110.41 555.667 110.198 555.667 109.905 cv
555.667 88.0999 li
555.635 87.5318 554.001 84.8363 552.389 82.4671 cv
547.419 82.4671 li
cp
.482353 .592157 .14902 rgb
f
553.121 73.076 mo
553.121 73.4885 552.729 73.8228 552.246 73.8228 cv
547.432 73.8228 li
546.948 73.8228 546.556 73.4885 546.556 73.076 cv
546.556 68.7193 li
546.556 68.3068 546.948 67.9724 547.432 67.9724 cv
552.246 67.9724 li
552.729 67.9724 553.121 68.3068 553.121 68.7193 cv
553.121 73.076 li
cp
.223529 .258824 .317647 rgb
f
549.255 81.3742 mo
549.255 81.5934 548.994 81.7248 548.672 81.7248 cv
548.349 81.7248 548.088 81.5934 548.088 81.3742 cv
548.088 74.7513 li
548.088 74.532 548.349 74.3543 548.672 74.3543 cv
548.994 74.3543 549.255 74.532 549.255 74.7513 cv
549.255 81.3742 li
cp
.968627 .952941 .905882 rgb
f
547.248 83.261 mo
546.083 85.3331 544.942 87.5813 544.814 88.2041 cv
544.814 109.834 li
544.909 109.85 545.063 109.864 545.313 109.864 cv
547.226 109.864 li
547.226 88.1647 li
548.859 83.261 li
547.248 83.261 li
cp
f
357.697 81.6316 mo
357.697 74.6107 li
357.697 73.6242 356.521 72.8244 355.071 72.8244 cv
353.62 72.8244 352.445 73.6242 352.445 74.6107 cv
352.445 81.6105 li
352.445 81.6105 348.698 87.0082 348.698 88.0964 cv
348.698 109.905 li
348.698 110.891 349.497 111.005 350.484 111.005 cv
359.635 111.005 li
360.621 111.005 361.421 110.891 361.421 109.905 cv
361.421 88.0964 li
361.421 87.0082 357.697 81.6316 357.697 81.6316 cv
cp
.913725 .878431 .819608 rgb
f
352.578 82.4671 mo
350.961 84.8401 349.326 87.5319 349.293 88.0964 cv
349.293 109.905 li
349.293 110.198 349.293 110.41 350.484 110.41 cv
359.635 110.41 li
360.826 110.41 360.826 110.198 360.826 109.905 cv
360.826 88.0999 li
360.794 87.5318 359.16 84.8363 357.548 82.4671 cv
352.578 82.4671 li
cp
.878431 .690196 .188235 rgb
f
358.28 73.076 mo
358.28 73.4885 357.888 73.8228 357.405 73.8228 cv
352.591 73.8228 li
352.107 73.8228 351.715 73.4885 351.715 73.076 cv
351.715 68.7193 li
351.715 68.3068 352.107 67.9724 352.591 67.9724 cv
357.405 67.9724 li
357.888 67.9724 358.28 68.3068 358.28 68.7193 cv
358.28 73.076 li
cp
.866667 .372549 .32549 rgb
f
354.414 81.3742 mo
354.414 81.5934 354.153 81.7248 353.831 81.7248 cv
353.508 81.7248 353.247 81.5934 353.247 81.3742 cv
353.247 74.7513 li
353.247 74.532 353.508 74.3543 353.831 74.3543 cv
354.153 74.3543 354.414 74.532 354.414 74.7513 cv
354.414 81.3742 li
cp
.968627 .952941 .905882 rgb
f
352.407 83.261 mo
351.242 85.3331 350.101 87.5813 349.973 88.2041 cv
349.973 109.834 li
350.068 109.85 350.222 109.864 350.472 109.864 cv
352.385 109.864 li
352.385 88.1647 li
354.018 83.261 li
352.407 83.261 li
cp
f
570.889 86.3687 mo
570.889 72.6835 li
570.889 71.6448 569.713 70.8027 568.263 70.8027 cv
566.813 70.8027 565.637 71.6448 565.637 72.6835 cv
565.637 86.3466 li
565.637 86.3466 561.89 92.0301 561.89 93.1758 cv
561.89 109.846 li
561.89 110.885 562.689 111.005 563.676 111.005 cv
572.827 111.005 li
573.813 111.005 574.613 110.885 574.613 109.846 cv
574.613 93.1758 li
574.613 92.0301 570.889 86.3687 570.889 86.3687 cv
cp
.913725 .878431 .819608 rgb
f
565.771 87.4201 mo
564.153 89.9037 562.518 92.7208 562.485 93.3116 cv
562.485 109.881 li
562.485 110.188 562.485 110.41 563.676 110.41 cv
572.827 110.41 li
574.018 110.41 574.018 110.188 574.018 109.881 cv
574.018 93.3153 li
573.986 92.7207 572.352 89.8997 570.74 87.4201 cv
565.771 87.4201 li
cp
.494118 .458824 .564706 rgb
f
571.472 73.4269 mo
571.472 73.6088 571.08 73.7562 570.597 73.7562 cv
565.783 73.7562 li
565.299 73.7562 564.907 73.6088 564.907 73.4269 cv
564.907 71.5061 li
564.907 71.3242 565.299 71.1768 565.783 71.1768 cv
570.597 71.1768 li
571.08 71.1768 571.472 71.3242 571.472 71.5061 cv
571.472 73.4269 li
cp
.223529 .258824 .317647 rgb
f
567.606 85.6443 mo
567.606 85.8347 567.345 85.9488 567.023 85.9488 cv
566.7 85.9488 566.439 85.8347 566.439 85.6443 cv
566.439 74.6991 li
566.439 74.5087 566.7 74.3543 567.023 74.3543 cv
567.345 74.3543 567.606 74.5087 567.606 74.6991 cv
567.606 85.6443 li
cp
.968627 .952941 .905882 rgb
f
566.34 87.7663 mo
565.174 89.8385 563.293 93.5574 563.165 94.1802 cv
563.165 109.834 li
563.26 109.85 563.414 109.864 563.664 109.864 cv
565.577 109.864 li
565.577 94.1408 li
567.951 87.7663 li
566.34 87.7663 li
cp
f
149.871 86.3687 mo
149.871 72.6835 li
149.871 71.6448 148.695 70.8027 147.245 70.8027 cv
145.795 70.8027 144.619 71.6448 144.619 72.6835 cv
144.619 86.3466 li
144.619 86.3466 140.872 92.0301 140.872 93.1758 cv
140.872 109.846 li
140.872 110.885 141.672 111.005 142.658 111.005 cv
151.809 111.005 li
152.796 111.005 153.595 110.885 153.595 109.846 cv
153.595 93.1758 li
153.595 92.0301 149.871 86.3687 149.871 86.3687 cv
cp
.913725 .878431 .819608 rgb
f
144.753 87.4201 mo
143.135 89.9037 141.5 92.7208 141.467 93.3116 cv
141.467 109.881 li
141.467 110.188 141.467 110.41 142.658 110.41 cv
151.809 110.41 li
153 110.41 153 110.188 153 109.881 cv
153 93.3153 li
152.968 92.7207 151.334 89.8997 149.722 87.4201 cv
144.753 87.4201 li
cp
.494118 .458824 .564706 rgb
f
150.454 73.4269 mo
150.454 73.6088 150.063 73.7562 149.579 73.7562 cv
144.765 73.7562 li
144.281 73.7562 143.89 73.6088 143.89 73.4269 cv
143.89 71.5061 li
143.89 71.3242 144.281 71.1768 144.765 71.1768 cv
149.579 71.1768 li
150.063 71.1768 150.454 71.3242 150.454 71.5061 cv
150.454 73.4269 li
cp
.223529 .258824 .317647 rgb
f
146.589 85.6443 mo
146.589 85.8347 146.327 85.9488 146.005 85.9488 cv
145.683 85.9488 145.421 85.8347 145.421 85.6443 cv
145.421 74.6991 li
145.421 74.5087 145.683 74.3543 146.005 74.3543 cv
146.327 74.3543 146.589 74.5087 146.589 74.6991 cv
146.589 85.6443 li
cp
.968627 .952941 .905882 rgb
f
145.322 87.7663 mo
144.157 89.8385 142.275 93.5574 142.147 94.1802 cv
142.147 109.834 li
142.242 109.85 142.397 109.864 142.646 109.864 cv
144.559 109.864 li
144.559 94.1408 li
146.933 87.7663 li
145.322 87.7663 li
cp
f
531.461 76.889 mo
531.476 76.889 li
531.349 76.8337 li
531.263 76.7961 li
527.824 73.8478 li
527.817 73.41 li
527.801 72.4608 527.038 71.7043 526.111 71.7043 cv
525.185 71.7043 524.422 72.4608 524.406 73.41 cv
524.399 73.835 li
520.717 76.889 li
520.748 76.889 li
520.178 77.2037 519.766 77.8246 519.722 78.5479 cv
517.9 109.027 li
517.794 110.798 518.828 111.005 520.118 111.005 cv
532.09 111.005 li
533.381 111.005 534.414 110.798 534.309 109.027 cv
532.486 78.5479 li
532.443 77.8246 532.03 77.2037 531.461 76.889 cv
cp
.901961 .878431 .792157 rgb
f
531.56 77.4472 mo
520.648 77.4472 li
520.342 77.7214 520.145 78.1181 520.121 78.5479 cv
518.412 109.027 li
518.362 109.912 518.592 110.285 520.149 110.285 cv
532.059 110.285 li
533.616 110.285 533.846 109.912 533.797 109.027 cv
532.088 78.5479 li
532.064 78.1181 531.867 77.7214 531.56 77.4472 cv
cp
.866667 .372549 .32549 rgb
f
521.812 108.399 mo
521.795 108.948 521.454 109.396 521.052 109.396 cv
520.404 109.396 li
520.001 109.396 519.695 108.948 519.721 108.399 cv
521.114 78.5902 li
521.13 78.2571 521.394 77.9886 521.705 77.9886 cv
522.205 77.9886 li
522.516 77.9886 522.759 78.2571 522.749 78.5902 cv
521.812 108.399 li
cp
.901961 .878431 .792157 rgb
f
525.682 74.216 mo
525.681 74.4328 525.508 74.6092 525.297 74.6092 cv
525.085 74.6092 524.915 74.4328 524.918 74.216 cv
524.929 73.2429 li
524.931 73.0312 525.102 72.8602 525.31 72.8602 cv
525.519 72.8602 525.687 73.0312 525.686 73.2429 cv
525.682 74.216 li
cp
.968627 .952941 .905882 rgb
f
533.374 91.2954 mo
532.861 82.8714 li
519.347 82.8714 li
518.834 91.2954 li
533.374 91.2954 li
cp
.223529 .258824 .317647 rgb
f
532.617 87.7289 mo
519.589 90.6162 li
519.832 86.1846 li
532.38 83.5063 li
532.617 87.7289 li
cp
.901961 .878431 .792157 rgb
f
528.186 72.3143 mo
528.186 72.5516 527.931 72.744 527.617 72.744 cv
524.482 72.744 li
524.167 72.744 523.912 72.5516 523.912 72.3143 cv
523.912 69.8074 li
523.912 69.57 524.167 69.3776 524.482 69.3776 cv
527.617 69.3776 li
527.931 69.3776 528.186 69.57 528.186 69.8074 cv
528.186 72.3143 li
cp
.878431 .690196 .188235 rgb
f
471.667 110.405 mo
471.667 111.004 468.726 111.004 465.099 111.004 cv
461.471 111.004 458.531 111.066 458.531 110.405 cv
458.531 86.01 li
458.531 82.9301 461.471 77.5832 465.099 77.5832 cv
468.726 77.5832 471.667 82.9301 471.667 86.01 cv
471.667 110.405 li
cp
.494118 .458824 .564706 rgb
f
466.648 62.8491 mo
463.302 62.8491 li
462.744 80.3095 li
467.205 80.3095 li
466.648 62.8491 li
cp
f
464.045 63.3448 mo
464.045 63.3448 463.612 75.6949 463.612 78.3887 cv
463.612 79.1179 460.266 80.6813 460.266 86.01 cv
460.266 110.157 li
462.372 110.219 li
462.372 87.1872 li
462.372 81.115 464.851 80.0638 464.851 78.7605 cv
464.851 75.8483 464.851 63.3448 464.851 63.3448 cv
464.045 63.3448 li
cp
.745098 .713726 .827451 rgb
f
471.667 104.146 mo
471.667 86.5317 li
458.531 86.5317 li
458.531 104.146 li
471.667 104.146 li
cp
.901961 .878431 .792157 rgb
f
466.451 64.632 mo
466.451 65.0265 465.788 65.3463 464.971 65.3463 cv
464.154 65.3463 463.491 65.0265 463.491 64.632 cv
463.491 62.5309 li
463.491 62.1364 464.154 61.8165 464.971 61.8165 cv
465.788 61.8165 466.451 62.1364 466.451 62.5309 cv
466.451 64.632 li
cp
f
466.911 66.3258 mo
463.073 66.3258 li
463.073 62.7951 li
466.911 62.7951 li
466.911 66.3258 li
cp
.223529 .258824 .317647 rgb
f
283.134 110.405 mo
283.134 111.004 280.194 111.004 276.566 111.004 cv
272.939 111.004 269.999 111.066 269.999 110.405 cv
269.999 86.01 li
269.999 82.9301 272.939 77.5832 276.566 77.5832 cv
280.194 77.5832 283.134 82.9301 283.134 86.01 cv
283.134 110.405 li
cp
.494118 .458824 .564706 rgb
f
278.116 62.8491 mo
274.77 62.8491 li
274.212 80.3095 li
278.673 80.3095 li
278.116 62.8491 li
cp
f
275.513 63.3448 mo
275.513 63.3448 275.079 75.6949 275.079 78.3887 cv
275.079 79.1179 271.733 80.6813 271.733 86.01 cv
271.733 110.157 li
273.84 110.219 li
273.84 87.1872 li
273.84 81.115 276.319 80.0638 276.319 78.7605 cv
276.319 75.8483 276.319 63.3448 276.319 63.3448 cv
275.513 63.3448 li
cp
.745098 .713726 .827451 rgb
f
283.134 104.146 mo
283.134 86.5317 li
269.999 86.5317 li
269.999 104.146 li
283.134 104.146 li
cp
.866667 .372549 .32549 rgb
f
277.918 64.632 mo
277.918 65.0265 277.256 65.3463 276.439 65.3463 cv
275.622 65.3463 274.959 65.0265 274.959 64.632 cv
274.959 62.5309 li
274.959 62.1364 275.622 61.8165 276.439 61.8165 cv
277.256 61.8165 277.918 62.1364 277.918 62.5309 cv
277.918 64.632 li
cp
.901961 .878431 .792157 rgb
f
278.379 66.3258 mo
274.541 66.3258 li
274.541 62.7951 li
278.379 62.7951 li
278.379 66.3258 li
cp
.223529 .258824 .317647 rgb
f
191.134 110.405 mo
191.134 111.004 188.194 111.004 184.566 111.004 cv
180.939 111.004 177.999 111.066 177.999 110.405 cv
177.999 86.01 li
177.999 82.9301 180.939 75.5281 184.566 75.5281 cv
188.194 75.5281 191.134 82.9301 191.134 86.01 cv
191.134 110.405 li
cp
.494118 .458824 .564706 rgb
f
186.116 59.0824 mo
182.77 59.0824 li
182.212 78.2544 li
186.673 78.2544 li
186.116 59.0824 li
cp
f
183.513 59.578 mo
183.513 59.578 183.079 73.6398 183.079 76.3336 cv
183.079 77.0628 179.733 80.6813 179.733 86.01 cv
179.733 110.157 li
181.84 110.219 li
181.84 87.1872 li
181.84 81.115 184.319 78.0087 184.319 76.7054 cv
184.319 73.7932 184.319 59.578 184.319 59.578 cv
183.513 59.578 li
cp
.745098 .713726 .827451 rgb
f
191.134 104.146 mo
191.134 86.5317 li
177.999 86.5317 li
177.999 104.146 li
191.134 104.146 li
cp
.482353 .592157 .14902 rgb
f
185.918 60.8652 mo
185.918 61.2598 185.256 61.5796 184.439 61.5796 cv
183.622 61.5796 182.959 61.2598 182.959 60.8652 cv
182.959 58.7642 li
182.959 58.3697 183.622 58.0498 184.439 58.0498 cv
185.256 58.0498 185.918 58.3697 185.918 58.7642 cv
185.918 60.8652 li
cp
.901961 .878431 .792157 rgb
f
186.379 62.5591 mo
182.541 62.5591 li
182.541 59.0284 li
186.379 59.0284 li
186.379 62.5591 li
cp
.482353 .592157 .14902 rgb
f
393.473 110.405 mo
393.473 111.004 390.533 111.004 386.905 111.004 cv
383.278 111.004 380.337 111.066 380.337 110.405 cv
380.337 86.01 li
380.337 82.9301 383.278 77.5832 386.905 77.5832 cv
390.533 77.5832 393.473 82.9301 393.473 86.01 cv
393.473 110.405 li
cp
f
388.454 65.5233 mo
385.108 65.5233 li
384.551 80.3095 li
389.012 80.3095 li
388.454 65.5233 li
cp
f
385.852 66.019 mo
385.852 66.019 385.418 75.6949 385.418 78.3887 cv
385.418 79.1179 382.072 80.6813 382.072 86.01 cv
382.072 110.157 li
384.179 110.219 li
384.179 87.1872 li
384.179 81.115 386.657 80.0638 386.657 78.7605 cv
386.657 75.8483 386.657 66.019 386.657 66.019 cv
385.852 66.019 li
cp
.901961 .878431 .792157 rgb
f
393.473 104.146 mo
393.473 86.5317 li
380.337 86.5317 li
380.337 104.146 li
393.473 104.146 li
cp
f
388.257 67.3062 mo
388.257 67.7007 387.594 68.0205 386.777 68.0205 cv
385.96 68.0205 385.298 67.7007 385.298 67.3062 cv
385.298 65.2051 li
385.298 64.8106 385.96 64.4908 386.777 64.4908 cv
387.594 64.4908 388.257 64.8106 388.257 65.2051 cv
388.257 67.3062 li
cp
f
388.717 69 mo
384.88 69 li
384.88 65.4694 li
388.717 65.4694 li
388.717 69 li
cp
.223529 .258824 .317647 rgb
f
422.912 82.337 mo
422.932 82.337 li
422.767 82.1402 li
422.655 82.0063 li
418.163 76.6326 li
418.163 71.0741 li
418.163 69.7835 417.116 68.7373 415.826 68.7373 cv
414.535 68.7373 413.489 69.7835 413.489 71.0741 cv
413.489 76.5841 li
408.68 82.337 li
408.72 82.337 li
407.989 83.4524 407.493 85.6337 407.493 88.1425 cv
407.493 109.565 li
407.493 110.856 408.539 111.005 409.83 111.005 cv
421.802 111.005 li
423.092 111.005 424.138 110.856 424.138 109.565 cv
424.138 88.1425 li
424.138 85.6337 423.642 83.4524 422.912 82.337 cv
cp
.901961 .878431 .792157 rgb
f
422.665 83.6264 mo
422.666 83.6114 li
422.553 83.475 li
422.452 83.3558 li
420.671 81.2251 li
410.94 81.2251 li
408.964 83.5892 li
408.967 83.6264 li
408.378 84.5254 408.012 86.2558 408.012 88.1426 cv
408.012 109.565 li
408.012 110.215 408.265 110.486 409.83 110.486 cv
421.802 110.486 li
423.367 110.486 423.619 110.215 423.619 109.565 cv
423.619 88.1426 li
423.619 86.2558 423.253 84.5254 422.665 83.6264 cv
cp
.223529 .258824 .317647 rgb
f
418.682 69.7839 mo
418.682 70.0005 418.333 70.1761 417.903 70.1761 cv
413.619 70.1761 li
413.189 70.1761 412.84 70.0005 412.84 69.7839 cv
412.84 67.4959 li
412.84 67.2793 413.189 67.1036 413.619 67.1036 cv
417.903 67.1036 li
418.333 67.1036 418.682 67.2793 418.682 67.4959 cv
418.682 69.7839 li
cp
f
412.126 109.946 mo
412.126 110.376 411.777 110.724 411.347 110.724 cv
410.655 110.724 li
410.224 110.724 409.876 110.376 409.876 109.946 cv
409.876 86.202 li
409.876 84.9876 410.224 84.0031 410.655 84.0031 cv
411.347 84.0031 li
411.777 84.0031 412.126 84.9876 412.126 86.202 cv
412.126 109.946 li
cp
.901961 .878431 .792157 rgb
f
415.242 73.7418 mo
415.242 74.5514 415.009 75.2077 414.722 75.2077 cv
414.436 75.2077 414.203 74.5514 414.203 73.7418 cv
414.203 71.258 li
414.203 70.9712 414.436 70.7387 414.722 70.7387 cv
415.009 70.7387 415.242 70.9712 415.242 71.258 cv
415.242 73.7418 li
cp
.968627 .952941 .905882 rgb
f
424.138 97.5441 mo
424.138 87.8082 li
407.493 93.7692 li
407.493 103.505 li
424.138 97.5441 li
cp
.866667 .372549 .32549 rgb
f
32.0646 81.6316 mo
32.0646 74.6107 li
32.0646 73.6242 30.889 72.8244 29.4387 72.8244 cv
27.9885 72.8244 26.8128 73.6242 26.8128 74.6107 cv
26.8128 81.6105 li
26.8128 81.6105 23.0657 87.0082 23.0657 88.0964 cv
23.0657 109.905 li
23.0657 110.891 23.8654 111.005 24.8519 111.005 cv
34.0029 111.005 li
34.9894 111.005 35.7891 110.891 35.7891 109.905 cv
35.7891 88.0964 li
35.7891 87.0082 32.0646 81.6316 32.0646 81.6316 cv
cp
.913725 .878431 .819608 rgb
f
26.9464 82.4671 mo
25.3292 84.8401 23.6937 87.5319 23.6611 88.0964 cv
23.6611 109.905 li
23.6611 110.198 23.6611 110.41 24.8519 110.41 cv
34.0029 110.41 li
35.1937 110.41 35.1937 110.198 35.1937 109.905 cv
35.1938 88.0999 li
35.162 87.5318 33.5278 84.8363 31.9159 82.4671 cv
26.9464 82.4671 li
cp
.866667 .372549 .32549 rgb
f
32.6482 73.076 mo
32.6482 73.4885 32.2563 73.8228 31.7729 73.8228 cv
26.9587 73.8228 li
26.4752 73.8228 26.0833 73.4885 26.0833 73.076 cv
26.0833 68.7193 li
26.0833 68.3068 26.4752 67.9724 26.9587 67.9724 cv
31.7729 67.9724 li
32.2563 67.9724 32.6482 68.3068 32.6482 68.7193 cv
32.6482 73.076 li
cp
.482353 .592157 .14902 rgb
f
28.7822 81.3742 mo
28.7822 81.5934 28.521 81.7248 28.1987 81.7248 cv
27.8764 81.7248 27.6151 81.5934 27.6151 81.3742 cv
27.6151 74.7513 li
27.6151 74.532 27.8764 74.3543 28.1987 74.3543 cv
28.521 74.3543 28.7822 74.532 28.7822 74.7513 cv
28.7822 81.3742 li
cp
.968627 .952941 .905882 rgb
f
26.7749 83.261 mo
25.6098 85.3331 24.4691 87.5813 24.341 88.2041 cv
24.341 109.834 li
24.436 109.85 24.5903 109.864 24.8398 109.864 cv
26.7531 109.864 li
26.7531 88.1647 li
28.3861 83.261 li
26.7749 83.261 li
cp
f
114.872 82.337 mo
114.892 82.337 li
114.728 82.1402 li
114.616 82.0063 li
110.123 76.6326 li
110.123 71.0741 li
110.123 69.7835 109.077 68.7373 107.786 68.7373 cv
106.496 68.7373 105.45 69.7835 105.45 71.0741 cv
105.45 76.5841 li
100.64 82.337 li
100.68 82.337 li
99.9499 83.4524 99.4537 85.6337 99.4537 88.1425 cv
99.4537 109.565 li
99.4537 110.856 100.5 111.005 101.79 111.005 cv
113.762 111.005 li
115.053 111.005 116.099 110.856 116.099 109.565 cv
116.099 88.1425 li
116.099 85.6337 115.603 83.4524 114.872 82.337 cv
cp
.901961 .878431 .792157 rgb
f
114.625 83.6264 mo
114.627 83.6114 li
114.513 83.475 li
114.413 83.3558 li
112.632 81.2251 li
102.901 81.2251 li
100.924 83.5892 li
100.927 83.6264 li
100.339 84.5254 99.973 86.2558 99.973 88.1426 cv
99.973 109.565 li
99.973 110.215 100.225 110.486 101.79 110.486 cv
113.762 110.486 li
115.327 110.486 115.58 110.215 115.58 109.565 cv
115.58 88.1426 li
115.58 86.2558 115.214 84.5254 114.625 83.6264 cv
cp
.223529 .258824 .317647 rgb
f
110.643 69.7839 mo
110.643 70.0005 110.294 70.1761 109.864 70.1761 cv
105.579 70.1761 li
105.149 70.1761 104.8 70.0005 104.8 69.7839 cv
104.8 67.4959 li
104.8 67.2793 105.149 67.1036 105.579 67.1036 cv
109.864 67.1036 li
110.294 67.1036 110.643 67.2793 110.643 67.4959 cv
110.643 69.7839 li
cp
f
104.086 109.946 mo
104.086 110.376 103.738 110.724 103.307 110.724 cv
102.615 110.724 li
102.185 110.724 101.836 110.376 101.836 109.946 cv
101.836 86.202 li
101.836 84.9876 102.185 84.0031 102.615 84.0031 cv
103.307 84.0031 li
103.738 84.0031 104.086 84.9876 104.086 86.202 cv
104.086 109.946 li
cp
.901961 .878431 .792157 rgb
f
107.202 73.7418 mo
107.202 74.5514 106.97 75.2077 106.683 75.2077 cv
106.396 75.2077 106.164 74.5514 106.164 73.7418 cv
106.164 71.258 li
106.164 70.9712 106.396 70.7387 106.683 70.7387 cv
106.97 70.7387 107.202 70.9712 107.202 71.258 cv
107.202 73.7418 li
cp
.968627 .952941 .905882 rgb
f
116.099 98.2941 mo
116.099 88.5582 li
99.4537 94.5192 li
99.4537 104.255 li
116.099 98.2941 li
cp
.866667 .372549 .32549 rgb
f
223.572 82.337 mo
223.592 82.337 li
223.428 82.1402 li
223.316 82.0063 li
218.823 76.6326 li
218.823 71.0741 li
218.823 69.7835 217.777 68.7373 216.486 68.7373 cv
215.196 68.7373 214.15 69.7835 214.15 71.0741 cv
214.15 76.5841 li
209.34 82.337 li
209.38 82.337 li
208.65 83.4524 208.154 85.6337 208.154 88.1425 cv
208.154 109.565 li
208.154 110.856 209.2 111.005 210.49 111.005 cv
222.462 111.005 li
223.753 111.005 224.799 110.856 224.799 109.565 cv
224.799 88.1425 li
224.799 85.6337 224.303 83.4524 223.572 82.337 cv
cp
.901961 .878431 .792157 rgb
f
223.325 83.6264 mo
223.327 83.6114 li
223.213 83.475 li
223.113 83.3558 li
221.332 81.2251 li
211.6 81.2251 li
209.624 83.5892 li
209.627 83.6264 li
209.039 84.5254 208.673 86.2558 208.673 88.1426 cv
208.673 109.565 li
208.673 110.215 208.925 110.486 210.49 110.486 cv
222.462 110.486 li
224.027 110.486 224.28 110.215 224.28 109.565 cv
224.28 88.1426 li
224.28 86.2558 223.914 84.5254 223.325 83.6264 cv
cp
.482353 .592157 .14902 rgb
f
219.342 69.7839 mo
219.342 70.0005 218.994 70.1761 218.564 70.1761 cv
214.279 70.1761 li
213.849 70.1761 213.5 70.0005 213.5 69.7839 cv
213.5 67.4959 li
213.5 67.2793 213.849 67.1036 214.279 67.1036 cv
218.564 67.1036 li
218.994 67.1036 219.342 67.2793 219.342 67.4959 cv
219.342 69.7839 li
cp
.223529 .258824 .317647 rgb
f
212.786 109.946 mo
212.786 110.376 212.438 110.724 212.007 110.724 cv
211.315 110.724 li
210.885 110.724 210.536 110.376 210.536 109.946 cv
210.536 86.202 li
210.536 84.9876 210.885 84.0031 211.315 84.0031 cv
212.007 84.0031 li
212.438 84.0031 212.786 84.9876 212.786 86.202 cv
212.786 109.946 li
cp
.901961 .878431 .792157 rgb
f
215.902 73.7418 mo
215.902 74.5514 215.67 75.2077 215.383 75.2077 cv
215.096 75.2077 214.864 74.5514 214.864 73.7418 cv
214.864 71.258 li
214.864 70.9712 215.096 70.7387 215.383 70.7387 cv
215.67 70.7387 215.902 70.9712 215.902 71.258 cv
215.902 73.7418 li
cp
.968627 .952941 .905882 rgb
f
314.861 86.7659 mo
314.88 86.7659 li
314.716 86.6962 li
314.604 86.6487 li
310.111 84.7451 li
310.111 76.682 li
310.111 75.3914 309.065 74.3452 307.775 74.3452 cv
306.484 74.3452 305.438 75.3914 305.438 76.682 cv
305.438 84.728 li
300.628 86.7659 li
300.668 86.7659 li
299.938 87.1611 299.442 87.9338 299.442 88.8225 cv
299.442 109.565 li
299.442 110.856 300.488 111.005 301.779 111.005 cv
313.75 111.005 li
315.041 111.005 316.087 110.856 316.087 109.565 cv
316.087 88.8225 li
316.087 87.9338 315.591 87.1611 314.861 86.7659 cv
cp
.901961 .878431 .792157 rgb
f
314.613 87.2227 mo
314.615 87.2174 li
314.501 87.1691 li
314.401 87.1268 li
312.62 86.372 li
302.889 86.372 li
300.912 87.2095 li
300.916 87.2227 li
300.327 87.5412 299.961 88.1541 299.961 88.8225 cv
299.961 109.565 li
299.961 110.215 300.214 110.486 301.779 110.486 cv
313.75 110.486 li
315.315 110.486 315.568 110.215 315.568 109.565 cv
315.568 88.8225 li
315.568 88.1541 315.202 87.5412 314.613 87.2227 cv
cp
.878431 .690196 .188235 rgb
f
310.631 75.3919 mo
310.631 75.6085 310.282 75.7841 309.852 75.7841 cv
305.568 75.7841 li
305.137 75.7841 304.789 75.6085 304.789 75.3919 cv
304.789 73.1038 li
304.789 72.8872 305.137 72.7116 305.568 72.7116 cv
309.852 72.7116 li
310.282 72.7116 310.631 72.8872 310.631 73.1038 cv
310.631 75.3919 li
cp
.223529 .258824 .317647 rgb
f
304.075 109.946 mo
304.075 110.376 303.726 110.724 303.296 110.724 cv
302.603 110.724 li
302.173 110.724 301.824 110.376 301.824 109.946 cv
301.824 88.1351 li
301.824 87.7049 302.173 87.3561 302.603 87.3561 cv
303.296 87.3561 li
303.726 87.3561 304.075 87.7049 304.075 88.1351 cv
304.075 109.946 li
cp
.901961 .878431 .792157 rgb
f
307.19 83.7211 mo
307.19 84.0079 306.958 84.2404 306.671 84.2404 cv
306.384 84.2404 306.152 84.0079 306.152 83.7211 cv
306.152 76.8659 li
306.152 76.5792 306.384 76.3467 306.671 76.3467 cv
306.958 76.3467 307.19 76.5792 307.19 76.8659 cv
307.19 83.7211 li
cp
.968627 .952941 .905882 rgb
f
305.438 77.5665 mo
305.438 81.5029 li
310.111 81.5029 li
310.111 77.5665 li
305.438 77.5665 li
cp
.878431 .690196 .188235 rgb
f
305.438 78.15 mo
305.438 78.82 li
310.111 78.82 li
310.111 78.15 li
305.438 78.15 li
cp
.901961 .878431 .792157 rgb
f
305.438 80.227 mo
305.438 80.8971 li
310.111 80.8971 li
310.111 80.227 li
305.438 80.227 li
cp
f
316.087 105.123 mo
316.087 91.5431 li
299.442 91.5431 li
299.442 105.123 li
316.087 105.123 li
cp
f
62.9761 102.441 mo
61.8093 102.441 li
61.8093 174.392 li
62.9761 174.392 li
62.9761 102.441 li
cp
1 1 1 rgb
f
71.7269 207.469 mo
71.7269 173.614 li
71.7269 168.352 67.4608 164.086 62.1982 164.086 cv
56.9357 164.086 52.6696 168.352 52.6696 173.614 cv
52.6696 207.469 li
71.7269 207.469 li
cp
.0509804 .0156863 .0352941 rgb
f
68.0044 207.469 mo
68.0044 173.614 li
68.0044 168.352 64.9572 164.086 61.1982 164.086 cv
57.4393 164.086 54.3921 168.352 54.3921 173.614 cv
54.3921 207.469 li
68.0044 207.469 li
cp
.278431 .27451 .278431 rgb
f
64.9005 165.447 mo
64.9005 145.155 li
64.9005 143.689 63.8123 142.5 62.4698 142.5 cv
61.1273 142.5 60.039 143.689 60.039 145.155 cv
60.039 165.447 li
64.9005 165.447 li
cp
.698039 .462745 .121569 rgb
f
63.8449 183.55 mo
63.8449 166.79 li
61.0947 166.79 li
61.0947 183.55 li
63.8449 183.55 li
cp
.937255 .784314 .482353 rgb
f
69.6649 164.28 mo
69.6649 168.254 66.4435 171.475 62.4698 171.475 cv
58.496 171.475 55.2747 168.254 55.2747 164.28 cv
55.2747 160.306 58.496 157.085 62.4698 157.085 cv
66.4435 157.085 69.6649 160.306 69.6649 164.28 cv
cp
.807843 .576471 .203922 rgb
f
68.3036 162.127 mo
68.3036 164.275 65.638 163.877 62.4698 163.877 cv
59.3015 163.877 56.8304 164.275 56.8304 162.127 cv
56.8304 159.979 59.3987 158.238 62.567 158.238 cv
65.7352 158.238 68.3036 159.979 68.3036 162.127 cv
cp
.937255 .784314 .482353 rgb
f
61.8611 164.85 mo
61.8611 165.499 60.7484 166.025 59.3758 166.025 cv
58.0032 166.025 56.8906 165.499 56.8906 164.85 cv
56.8906 164.2 58.0032 163.674 59.3758 163.674 cv
60.7484 163.674 61.8611 164.2 61.8611 164.85 cv
cp
f
67.4361 167.822 mo
67.4361 169 65.5133 170.135 63.1415 170.358 cv
60.7696 170.58 58.8468 169.806 58.8468 168.628 cv
58.8468 167.45 60.4296 167.658 62.8014 167.436 cv
65.1733 167.213 67.4361 166.644 67.4361 167.822 cv
cp
.698039 .462745 .121569 rgb
f
69.5716 142.007 mo
72.1027 129.154 69.2114 125.718 62.5057 125.718 cv
55.8 125.718 52.9087 129.154 55.4398 142.007 cv
56.9144 149.495 59.8645 153.603 62.5057 153.603 cv
65.1469 153.603 68.097 149.495 69.5716 142.007 cv
cp
.0509804 .0156863 .0352941 rgb
f
62.8325 146.724 mo
62.2203 136.892 62.9507 130.546 65.0346 127.05 cv
64.2593 126.855 63.3998 126.773 62.4629 126.773 cv
56.5133 126.773 53.9271 129.942 56.1219 141.941 cv
57.4208 149.042 60.081 152.973 62.4753 152.973 cv
62.8125 152.973 63.1496 152.897 63.4835 152.755 cv
63.202 151.05 62.977 149.044 62.8325 146.724 cv
cp
.156863 .152941 .156863 rgb
f
59.5841 151.87 mo
59.5829 151.9 li
59.5829 153.64 li
59.5829 154.307 59.9881 154.849 60.4879 154.849 cv
64.522 154.849 li
65.0218 154.849 65.427 154.307 65.427 153.64 cv
65.427 151.9 li
65.4259 151.87 li
59.5841 151.87 li
cp
.752941 .752941 .752941 rgb
f
45.4746 104.969 mo
45.4746 95.5182 53.1361 87.8566 62.5872 87.8566 cv
72.0382 87.8566 79.6998 95.5182 79.6998 104.969 cv
79.6998 114.42 72.0382 122.082 62.5872 122.082 cv
53.1361 122.082 45.4746 114.42 45.4746 104.969 cv
cp
f
47.7109 104.969 mo
47.7109 96.7533 54.3712 90.0929 62.5872 90.0929 cv
70.8031 90.0929 77.4635 96.7533 77.4635 104.969 cv
77.4635 113.185 70.8031 119.846 62.5872 119.846 cv
54.3712 119.846 47.7109 113.185 47.7109 104.969 cv
cp
1 1 1 rgb
f
76.2564 105.726 mo
49.5582 114.692 li
48.7235 104.31 li
75.4216 95.3434 li
76.2564 105.726 li
cp
.482353 .592157 .14902 rgb
f
98.712 102.441 mo
97.5453 102.441 li
97.5453 174.392 li
98.712 174.392 li
98.712 102.441 li
cp
1 1 1 rgb
f
107.463 207.469 mo
107.463 173.614 li
107.463 168.352 103.197 164.086 97.9342 164.086 cv
92.6717 164.086 88.4056 168.352 88.4056 173.614 cv
88.4056 207.469 li
107.463 207.469 li
cp
.0509804 .0156863 .0352941 rgb
f
103.74 207.469 mo
103.74 173.614 li
103.74 168.352 100.693 164.086 96.9342 164.086 cv
93.1753 164.086 90.128 168.352 90.128 173.614 cv
90.128 207.469 li
103.74 207.469 li
cp
.278431 .27451 .278431 rgb
f
100.636 165.447 mo
100.636 145.155 li
100.636 143.689 99.5482 142.5 98.2057 142.5 cv
96.8633 142.5 95.775 143.689 95.775 145.155 cv
95.775 165.447 li
100.636 165.447 li
cp
.698039 .462745 .121569 rgb
f
99.5809 183.55 mo
99.5809 166.79 li
96.8306 166.79 li
96.8306 183.55 li
99.5809 183.55 li
cp
.937255 .784314 .482353 rgb
f
105.401 164.28 mo
105.401 168.254 102.179 171.475 98.2057 171.475 cv
94.232 171.475 91.0107 168.254 91.0107 164.28 cv
91.0107 160.306 94.232 157.085 98.2057 157.085 cv
102.179 157.085 105.401 160.306 105.401 164.28 cv
cp
.807843 .576471 .203922 rgb
f
104.04 162.127 mo
104.04 164.275 101.374 163.877 98.2057 163.877 cv
95.0375 163.877 92.5664 164.275 92.5663 162.127 cv
92.5663 159.979 95.1347 158.238 98.3029 158.238 cv
101.471 158.238 104.04 159.979 104.04 162.127 cv
cp
.937255 .784314 .482353 rgb
f
97.597 164.85 mo
97.597 165.499 96.4843 166.025 95.1118 166.025 cv
93.7392 166.025 92.6265 165.499 92.6265 164.85 cv
92.6265 164.2 93.7392 163.674 95.1118 163.674 cv
96.4843 163.674 97.597 164.2 97.597 164.85 cv
cp
f
103.172 167.822 mo
103.172 169 101.249 170.135 98.8774 170.358 cv
96.5056 170.58 94.5828 169.806 94.5828 168.628 cv
94.5828 167.45 96.1655 167.658 98.5374 167.436 cv
100.909 167.213 103.172 166.644 103.172 167.822 cv
cp
.698039 .462745 .121569 rgb
f
105.308 142.007 mo
107.839 129.154 104.947 125.718 98.2417 125.718 cv
91.536 125.718 88.6447 129.154 91.1757 142.007 cv
92.6503 149.495 95.6005 153.603 98.2417 153.603 cv
100.883 153.603 103.833 149.495 105.308 142.007 cv
cp
.0509804 .0156863 .0352941 rgb
f
98.5685 146.724 mo
97.9563 136.892 98.6866 130.546 100.771 127.05 cv
99.9953 126.855 99.1358 126.773 98.1989 126.773 cv
92.2493 126.773 89.6631 129.942 91.8579 141.941 cv
93.1568 149.042 95.8169 152.973 98.2113 152.973 cv
98.5484 152.973 98.8856 152.897 99.2194 152.755 cv
98.938 151.05 98.713 149.044 98.5685 146.724 cv
cp
.156863 .152941 .156863 rgb
f
95.3201 151.87 mo
95.3189 151.9 li
95.3189 153.64 li
95.3189 154.307 95.7241 154.849 96.2239 154.849 cv
100.258 154.849 li
100.758 154.849 101.163 154.307 101.163 153.64 cv
101.163 151.9 li
101.162 151.87 li
95.3201 151.87 li
cp
.752941 .752941 .752941 rgb
f
81.2105 104.969 mo
81.2105 95.5182 88.8721 87.8566 98.3231 87.8566 cv
107.774 87.8566 115.436 95.5182 115.436 104.969 cv
115.436 114.42 107.774 122.082 98.3231 122.082 cv
88.8721 122.082 81.2105 114.42 81.2105 104.969 cv
cp
f
83.4468 104.969 mo
83.4468 96.7533 90.1072 90.0929 98.3231 90.0929 cv
106.539 90.0929 113.199 96.7533 113.199 104.969 cv
113.199 113.185 106.539 119.846 98.3231 119.846 cv
90.1072 119.846 83.4468 113.185 83.4468 104.969 cv
cp
1 1 1 rgb
f
111.992 105.726 mo
85.2942 114.692 li
84.4594 104.31 li
111.158 95.3434 li
111.992 105.726 li
cp
.866667 .372549 .32549 rgb
f
134.448 102.441 mo
133.281 102.441 li
133.281 174.392 li
134.448 174.392 li
134.448 102.441 li
cp
1 1 1 rgb
f
143.199 207.469 mo
143.199 173.614 li
143.199 168.352 138.933 164.086 133.67 164.086 cv
128.408 164.086 124.141 168.352 124.141 173.614 cv
124.141 207.469 li
143.199 207.469 li
cp
.0509804 .0156863 .0352941 rgb
f
139.476 207.469 mo
139.476 173.614 li
139.476 168.352 136.429 164.086 132.67 164.086 cv
128.911 164.086 125.864 168.352 125.864 173.614 cv
125.864 207.469 li
139.476 207.469 li
cp
.278431 .27451 .278431 rgb
f
136.372 165.447 mo
136.372 145.155 li
136.372 143.689 135.284 142.5 133.942 142.5 cv
132.599 142.5 131.511 143.689 131.511 145.155 cv
131.511 165.447 li
136.372 165.447 li
cp
.698039 .462745 .121569 rgb
f
135.317 183.55 mo
135.317 166.79 li
132.567 166.79 li
132.567 183.55 li
135.317 183.55 li
cp
.937255 .784314 .482353 rgb
f
141.137 164.28 mo
141.137 168.254 137.915 171.475 133.942 171.475 cv
129.968 171.475 126.747 168.254 126.747 164.28 cv
126.747 160.306 129.968 157.085 133.942 157.085 cv
137.915 157.085 141.137 160.306 141.137 164.28 cv
cp
.807843 .576471 .203922 rgb
f
139.775 162.127 mo
139.775 164.275 137.11 163.877 133.942 163.877 cv
130.773 163.877 128.302 164.275 128.302 162.127 cv
128.302 159.979 130.871 158.238 134.039 158.238 cv
137.207 158.238 139.775 159.979 139.775 162.127 cv
cp
.937255 .784314 .482353 rgb
f
133.333 164.85 mo
133.333 165.499 132.22 166.025 130.848 166.025 cv
129.475 166.025 128.363 165.499 128.363 164.85 cv
128.363 164.2 129.475 163.674 130.848 163.674 cv
132.22 163.674 133.333 164.2 133.333 164.85 cv
cp
f
138.908 167.822 mo
138.908 169 136.985 170.135 134.613 170.358 cv
132.242 170.58 130.319 169.806 130.319 168.628 cv
130.319 167.45 131.901 167.658 134.273 167.436 cv
136.645 167.213 138.908 166.644 138.908 167.822 cv
cp
.698039 .462745 .121569 rgb
f
141.044 142.007 mo
143.575 129.154 140.683 125.718 133.978 125.718 cv
127.272 125.718 124.381 129.154 126.912 142.007 cv
128.386 149.495 131.336 153.603 133.978 153.603 cv
136.619 153.603 139.569 149.495 141.044 142.007 cv
cp
.0509804 .0156863 .0352941 rgb
f
134.304 146.724 mo
133.692 136.892 134.423 130.546 136.507 127.05 cv
135.731 126.855 134.872 126.773 133.935 126.773 cv
127.985 126.773 125.399 129.942 127.594 141.941 cv
128.893 149.042 131.553 152.973 133.947 152.973 cv
134.284 152.973 134.621 152.897 134.955 152.755 cv
134.674 151.05 134.449 149.044 134.304 146.724 cv
cp
.156863 .152941 .156863 rgb
f
131.056 151.87 mo
131.055 151.9 li
131.055 153.64 li
131.055 154.307 131.46 154.849 131.96 154.849 cv
135.994 154.849 li
136.494 154.849 136.899 154.307 136.899 153.64 cv
136.899 151.9 li
136.898 151.87 li
131.056 151.87 li
cp
.752941 .752941 .752941 rgb
f
116.946 104.969 mo
116.946 95.5182 124.608 87.8566 134.059 87.8566 cv
143.51 87.8566 151.172 95.5182 151.172 104.969 cv
151.172 114.42 143.51 122.082 134.059 122.082 cv
124.608 122.082 116.946 114.42 116.946 104.969 cv
cp
f
119.183 104.969 mo
119.183 96.7533 125.843 90.0929 134.059 90.0929 cv
142.275 90.0929 148.935 96.7533 148.935 104.969 cv
148.935 113.185 142.275 119.846 134.059 119.846 cv
125.843 119.846 119.183 113.185 119.183 104.969 cv
cp
1 1 1 rgb
f
147.728 105.726 mo
121.03 114.692 li
120.195 104.31 li
146.893 95.3434 li
147.728 105.726 li
cp
.223529 .258824 .317647 rgb
f
576.655 172.266 mo
576.675 172.266 li
576.51 172.197 li
576.398 172.149 li
571.906 170.245 li
571.906 156.574 li
571.906 155.284 570.86 154.238 569.569 154.238 cv
568.278 154.238 567.232 155.284 567.232 156.574 cv
567.232 170.228 li
562.423 172.266 li
562.463 172.266 li
561.732 172.661 561.236 173.434 561.236 174.323 cv
561.236 195.066 li
561.236 196.356 562.282 196.505 563.573 196.505 cv
575.545 196.505 li
576.835 196.505 577.881 196.356 577.881 195.066 cv
577.881 174.323 li
577.881 173.434 577.385 172.661 576.655 172.266 cv
cp
.901961 .878431 .792157 rgb
f
576.408 172.723 mo
576.409 172.718 li
576.296 172.669 li
576.195 172.627 li
574.414 171.872 li
564.683 171.872 li
562.707 172.71 li
562.71 172.723 li
562.121 173.041 561.755 173.654 561.755 174.323 cv
561.755 195.066 li
561.755 195.715 562.008 195.986 563.573 195.986 cv
575.545 195.986 li
577.11 195.986 577.362 195.715 577.362 195.066 cv
577.362 174.323 li
577.362 173.654 576.996 173.041 576.408 172.723 cv
cp
.878431 .690196 .188235 rgb
f
572.425 155.284 mo
572.425 155.501 572.076 155.676 571.646 155.676 cv
567.362 155.676 li
566.932 155.676 566.583 155.501 566.583 155.284 cv
566.583 152.996 li
566.583 152.779 566.932 152.604 567.362 152.604 cv
571.646 152.604 li
572.076 152.604 572.425 152.779 572.425 152.996 cv
572.425 155.284 li
cp
.223529 .258824 .317647 rgb
f
565.869 195.446 mo
565.869 195.876 565.52 196.225 565.09 196.225 cv
564.398 196.225 li
563.967 196.225 563.619 195.876 563.619 195.446 cv
563.619 173.635 li
563.619 173.205 563.967 172.856 564.398 172.856 cv
565.09 172.856 li
565.52 172.856 565.869 173.205 565.869 173.635 cv
565.869 195.446 li
cp
.901961 .878431 .792157 rgb
f
568.985 169.221 mo
568.985 169.508 568.752 169.741 568.466 169.741 cv
568.179 169.741 567.946 169.508 567.946 169.221 cv
567.946 156.758 li
567.946 156.471 568.179 156.239 568.466 156.239 cv
568.752 156.239 568.985 156.471 568.985 156.758 cv
568.985 169.221 li
cp
.968627 .952941 .905882 rgb
f
577.958 180.527 mo
570.847 180.527 li
570.016 179.97 569.017 179.644 567.941 179.644 cv
566.865 179.644 565.865 179.97 565.034 180.527 cv
561.16 180.527 li
561.16 189.419 li
565.372 189.419 li
566.131 189.849 567.006 190.097 567.941 190.097 cv
568.875 190.097 569.75 189.849 570.509 189.419 cv
577.958 189.419 li
577.958 180.527 li
cp
.482353 .592157 .14902 rgb
f
565.35 181.566 mo
565.612 181.39 li
566.302 180.927 567.107 180.683 567.941 180.683 cv
568.774 180.683 569.579 180.927 570.269 181.39 cv
570.531 181.566 li
577.943 181.566 li
577.943 181.046 li
570.689 181.046 li
570.558 180.958 li
569.782 180.438 568.877 180.163 567.941 180.163 cv
567.004 180.163 566.099 180.438 565.323 180.958 cv
565.192 181.046 li
561.065 181.046 li
561.065 181.566 li
565.35 181.566 li
cp
.901961 .878431 .792157 rgb
f
570.236 188.381 mo
569.998 188.515 li
569.37 188.87 568.659 189.058 567.941 189.058 cv
567.223 189.058 566.512 188.87 565.884 188.515 cv
565.646 188.381 li
561.065 188.381 li
561.065 188.9 li
565.509 188.9 li
565.628 188.967 li
566.334 189.367 567.133 189.578 567.941 189.578 cv
568.748 189.578 569.548 189.367 570.253 188.967 cv
570.372 188.9 li
577.943 188.9 li
577.943 188.381 li
570.236 188.381 li
cp
f
567.232 159.972 mo
567.232 167.003 li
571.906 167.003 li
571.906 159.972 li
567.232 159.972 li
cp
.482353 .592157 .14902 rgb
f
567.232 160.555 mo
567.232 161.225 li
571.906 161.225 li
571.906 160.555 li
567.232 160.555 li
cp
.901961 .878431 .792157 rgb
f
567.232 165.727 mo
567.232 166.397 li
571.906 166.397 li
571.906 165.727 li
567.232 165.727 li
cp
f
493.311 167.132 mo
493.311 160.111 li
493.311 159.124 492.136 158.325 490.686 158.325 cv
489.235 158.325 488.06 159.124 488.06 160.111 cv
488.06 167.111 li
488.06 167.111 484.313 172.508 484.313 173.597 cv
484.313 195.405 li
484.313 196.391 485.112 196.505 486.099 196.505 cv
495.25 196.505 li
496.236 196.505 497.036 196.391 497.036 195.405 cv
497.036 173.597 li
497.036 172.508 493.311 167.132 493.311 167.132 cv
cp
.913725 .878431 .819608 rgb
f
488.193 167.967 mo
486.576 170.34 484.94 173.032 484.908 173.597 cv
484.908 195.405 li
484.908 195.698 484.908 195.91 486.099 195.91 cv
495.25 195.91 li
496.441 195.91 496.441 195.698 496.441 195.405 cv
496.441 173.6 li
496.409 173.032 494.775 170.337 493.163 167.967 cv
488.193 167.967 li
cp
.878431 .690196 .188235 rgb
f
493.895 158.576 mo
493.895 158.989 493.503 159.323 493.02 159.323 cv
488.205 159.323 li
487.722 159.323 487.33 158.989 487.33 158.576 cv
487.33 154.219 li
487.33 153.807 487.722 153.473 488.205 153.473 cv
493.02 153.473 li
493.503 153.473 493.895 153.807 493.895 154.219 cv
493.895 158.576 li
cp
.866667 .372549 .32549 rgb
f
490.029 166.874 mo
490.029 167.094 489.768 167.225 489.446 167.225 cv
489.123 167.225 488.862 167.094 488.862 166.874 cv
488.862 160.251 li
488.862 160.032 489.123 159.855 489.445 159.855 cv
489.768 159.855 490.029 160.032 490.029 160.251 cv
490.029 166.874 li
cp
.968627 .952941 .905882 rgb
f
488.022 168.761 mo
486.857 170.833 485.716 173.081 485.588 173.704 cv
485.588 195.335 li
485.683 195.35 485.837 195.364 486.087 195.364 cv
488 195.364 li
488 173.665 li
489.633 168.761 li
488.022 168.761 li
cp
f
306.128 167.132 mo
306.128 160.111 li
306.128 159.124 304.952 158.325 303.502 158.325 cv
302.051 158.325 300.876 159.124 300.876 160.111 cv
300.876 167.111 li
300.876 167.111 297.129 172.508 297.129 173.597 cv
297.129 195.405 li
297.129 196.391 297.928 196.505 298.915 196.505 cv
308.066 196.505 li
309.052 196.505 309.852 196.391 309.852 195.405 cv
309.852 173.597 li
309.852 172.508 306.128 167.132 306.128 167.132 cv
cp
.913725 .878431 .819608 rgb
f
301.009 167.967 mo
299.392 170.34 297.757 173.032 297.724 173.597 cv
297.724 195.405 li
297.724 195.698 297.724 195.91 298.915 195.91 cv
308.066 195.91 li
309.257 195.91 309.257 195.698 309.257 195.405 cv
309.257 173.6 li
309.225 173.032 307.591 170.337 305.979 167.967 cv
301.009 167.967 li
cp
.482353 .592157 .14902 rgb
f
306.711 158.576 mo
306.711 158.989 306.319 159.323 305.836 159.323 cv
301.022 159.323 li
300.538 159.323 300.146 158.989 300.146 158.576 cv
300.146 154.219 li
300.146 153.807 300.538 153.473 301.022 153.473 cv
305.836 153.473 li
306.319 153.473 306.711 153.807 306.711 154.219 cv
306.711 158.576 li
cp
.866667 .372549 .32549 rgb
f
302.845 166.874 mo
302.845 167.094 302.584 167.225 302.262 167.225 cv
301.939 167.225 301.678 167.094 301.678 166.874 cv
301.678 160.251 li
301.678 160.032 301.939 159.855 302.262 159.855 cv
302.584 159.855 302.845 160.032 302.845 160.251 cv
302.845 166.874 li
cp
.968627 .952941 .905882 rgb
f
300.838 168.761 mo
299.673 170.833 298.532 173.081 298.404 173.704 cv
298.404 195.335 li
298.499 195.35 298.653 195.364 298.903 195.364 cv
300.816 195.364 li
300.816 173.665 li
302.449 168.761 li
300.838 168.761 li
cp
f
185.596 171.869 mo
185.596 158.184 li
185.596 157.145 184.42 156.303 182.97 156.303 cv
181.52 156.303 180.344 157.145 180.344 158.184 cv
180.344 171.847 li
180.344 171.847 176.597 177.53 176.597 178.676 cv
176.597 195.347 li
176.597 196.385 177.397 196.505 178.383 196.505 cv
187.534 196.505 li
188.521 196.505 189.32 196.385 189.32 195.347 cv
189.32 178.676 li
189.32 177.53 185.596 171.869 185.596 171.869 cv
cp
.913725 .878431 .819608 rgb
f
180.478 172.92 mo
178.861 175.404 177.225 178.221 177.192 178.812 cv
177.192 195.381 li
177.192 195.688 177.192 195.91 178.383 195.91 cv
187.534 195.91 li
188.725 195.91 188.725 195.688 188.725 195.381 cv
188.725 178.816 li
188.693 178.221 187.059 175.4 185.447 172.92 cv
180.478 172.92 li
cp
.494118 .458824 .564706 rgb
f
186.18 158.927 mo
186.18 159.109 185.788 159.256 185.304 159.256 cv
180.49 159.256 li
180.007 159.256 179.615 159.109 179.615 158.927 cv
179.615 157.006 li
179.615 156.824 180.007 156.677 180.49 156.677 cv
185.304 156.677 li
185.788 156.677 186.18 156.824 186.18 157.006 cv
186.18 158.927 li
cp
.223529 .258824 .317647 rgb
f
182.314 171.145 mo
182.314 171.335 182.052 171.449 181.73 171.449 cv
181.408 171.449 181.147 171.335 181.147 171.145 cv
181.147 160.199 li
181.147 160.009 181.408 159.855 181.73 159.855 cv
182.052 159.855 182.314 160.009 182.314 160.199 cv
182.314 171.145 li
cp
.968627 .952941 .905882 rgb
f
181.047 173.267 mo
179.882 175.339 178 179.058 177.872 179.68 cv
177.872 195.335 li
177.967 195.35 178.122 195.364 178.371 195.364 cv
180.285 195.364 li
180.285 179.641 li
182.658 173.267 li
181.047 173.267 li
cp
f
36.7347 162.389 mo
36.7497 162.389 li
36.6228 162.334 li
36.5364 162.296 li
33.0985 159.348 li
33.0911 158.91 li
33.0751 157.961 32.3115 157.205 31.3854 157.205 cv
30.4592 157.205 29.6957 157.961 29.6799 158.91 cv
29.6728 159.335 li
25.9912 162.389 li
26.0215 162.389 li
25.4524 162.704 25.0396 163.325 24.9963 164.048 cv
23.1737 194.528 li
23.0679 196.298 24.1017 196.505 25.3923 196.505 cv
37.364 196.505 li
38.6546 196.505 39.6884 196.298 39.5825 194.528 cv
37.7599 164.048 li
37.7167 163.325 37.3038 162.704 36.7347 162.389 cv
cp
.901961 .878431 .792157 rgb
f
36.834 162.947 mo
25.9222 162.947 li
25.6156 163.222 25.4186 163.618 25.3945 164.048 cv
23.6856 194.528 li
23.636 195.412 23.8663 195.786 25.4232 195.786 cv
37.333 195.786 li
38.8898 195.786 39.1202 195.412 39.0706 194.528 cv
37.3617 164.048 li
37.3376 163.618 37.1406 163.222 36.834 162.947 cv
cp
.878431 .690196 .188235 rgb
f
27.0862 193.899 mo
27.069 194.448 26.7284 194.896 26.3256 194.896 cv
25.6774 194.896 li
25.2746 194.896 24.9691 194.448 24.9947 193.899 cv
26.388 164.09 li
26.4036 163.757 26.6681 163.489 26.9789 163.489 cv
27.4791 163.489 li
27.7899 163.489 28.0334 163.757 28.023 164.09 cv
27.0862 193.899 li
cp
.901961 .878431 .792157 rgb
f
30.9558 159.716 mo
30.9549 159.933 30.7824 160.109 30.5706 160.109 cv
30.3588 160.109 30.1892 159.933 30.1917 159.716 cv
30.203 158.743 li
30.2054 158.531 30.3762 158.36 30.5844 158.36 cv
30.7926 158.36 30.9606 158.531 30.9598 158.743 cv
30.9558 159.716 li
cp
.968627 .952941 .905882 rgb
f
38.6479 176.796 mo
38.1353 168.372 li
24.6208 168.372 li
24.1082 176.796 li
38.6479 176.796 li
cp
.223529 .258824 .317647 rgb
f
37.8914 173.229 mo
24.8626 176.117 li
25.1056 171.685 li
37.6541 169.007 li
37.8914 173.229 li
cp
.901961 .878431 .792157 rgb
f
33.4605 157.814 mo
33.4605 158.052 33.2053 158.244 32.8906 158.244 cv
29.7561 158.244 li
29.4413 158.244 29.1861 158.052 29.1861 157.814 cv
29.1861 155.308 li
29.1861 155.07 29.4413 154.878 29.7561 154.878 cv
32.8906 154.878 li
33.2053 154.878 33.4605 155.07 33.4605 155.308 cv
33.4605 157.814 li
cp
.878431 .690196 .188235 rgb
f
523.5 195.905 mo
523.5 196.504 520.559 196.504 516.932 196.504 cv
513.305 196.504 510.364 196.566 510.364 195.905 cv
510.364 171.51 li
510.364 168.43 513.305 163.083 516.932 163.083 cv
520.559 163.083 523.5 168.43 523.5 171.51 cv
523.5 195.905 li
cp
.494118 .458824 .564706 rgb
f
518.481 148.349 mo
515.135 148.349 li
514.578 165.81 li
519.039 165.81 li
518.481 148.349 li
cp
f
515.879 148.845 mo
515.879 148.845 515.445 161.195 515.445 163.889 cv
515.445 164.618 512.099 166.182 512.099 171.51 cv
512.099 195.657 li
514.206 195.719 li
514.206 172.688 li
514.206 166.615 516.684 165.564 516.684 164.261 cv
516.684 161.348 516.684 148.845 516.684 148.845 cv
515.879 148.845 li
cp
.745098 .713726 .827451 rgb
f
523.5 189.647 mo
523.5 172.032 li
510.364 172.032 li
510.364 189.647 li
523.5 189.647 li
cp
.901961 .878431 .792157 rgb
f
518.284 150.132 mo
518.284 150.527 517.621 150.847 516.804 150.847 cv
515.987 150.847 515.325 150.527 515.325 150.132 cv
515.325 148.031 li
515.325 147.637 515.987 147.317 516.804 147.317 cv
517.621 147.317 518.284 147.637 518.284 148.031 cv
518.284 150.132 li
cp
f
518.744 151.826 mo
514.907 151.826 li
514.907 148.295 li
518.744 148.295 li
518.744 151.826 li
cp
.223529 .258824 .317647 rgb
f
330.289 195.905 mo
330.289 196.504 327.349 196.504 323.722 196.504 cv
320.094 196.504 317.154 196.566 317.154 195.905 cv
317.154 171.51 li
317.154 168.43 320.094 163.083 323.722 163.083 cv
327.349 163.083 330.289 168.43 330.289 171.51 cv
330.289 195.905 li
cp
.494118 .458824 .564706 rgb
f
325.271 148.349 mo
321.925 148.349 li
321.367 165.81 li
325.828 165.81 li
325.271 148.349 li
cp
f
322.668 148.845 mo
322.668 148.845 322.234 161.195 322.234 163.889 cv
322.234 164.618 318.889 166.182 318.889 171.51 cv
318.889 195.657 li
320.995 195.719 li
320.995 172.688 li
320.995 166.615 323.474 165.564 323.474 164.261 cv
323.474 161.348 323.474 148.845 323.474 148.845 cv
322.668 148.845 li
cp
.745098 .713726 .827451 rgb
f
330.289 189.647 mo
330.289 172.032 li
317.154 172.032 li
317.154 189.647 li
330.289 189.647 li
cp
.866667 .372549 .32549 rgb
f
325.073 150.132 mo
325.073 150.527 324.411 150.847 323.594 150.847 cv
322.777 150.847 322.114 150.527 322.114 150.132 cv
322.114 148.031 li
322.114 147.637 322.777 147.317 323.594 147.317 cv
324.411 147.317 325.073 147.637 325.073 148.031 cv
325.073 150.132 li
cp
.901961 .878431 .792157 rgb
f
325.534 151.826 mo
321.696 151.826 li
321.696 148.295 li
325.534 148.295 li
325.534 151.826 li
cp
.223529 .258824 .317647 rgb
f
245.266 195.905 mo
245.266 196.504 242.325 196.504 238.698 196.504 cv
235.071 196.504 232.13 196.566 232.13 195.905 cv
232.13 171.51 li
232.13 168.43 235.071 161.028 238.698 161.028 cv
242.325 161.028 245.266 168.43 245.266 171.51 cv
245.266 195.905 li
.494118 .458824 .564706 rgb
f
240.247 144.583 mo
236.901 144.583 li
236.343 163.755 li
240.805 163.755 li
240.247 144.583 li
cp
f
237.645 145.078 mo
237.645 145.078 237.211 159.14 237.211 161.834 cv
237.211 162.563 233.865 166.182 233.865 171.51 cv
233.865 195.657 li
235.972 195.719 li
235.972 172.687 li
235.972 166.615 238.45 163.509 238.45 162.206 cv
238.45 159.293 238.45 145.078 238.45 145.078 cv
237.645 145.078 li
.745098 .713726 .827451 rgb
f
245.266 189.647 mo
245.266 172.032 li
232.13 172.032 li
232.13 189.647 li
245.266 189.647 li
.482353 .592157 .14902 rgb
f
240.05 146.365 mo
240.05 146.76 239.387 147.08 238.57 147.08 cv
237.753 147.08 237.09 146.76 237.09 146.365 cv
237.09 144.264 li
237.09 143.87 237.753 143.55 238.57 143.55 cv
239.387 143.55 240.05 143.87 240.05 144.264 cv
240.05 146.365 li
cp
.901961 .878431 .792157 rgb
f
240.51 148.059 mo
236.673 148.059 li
236.673 144.529 li
240.51 144.529 li
240.51 148.059 li
cp
.482353 .592157 .14902 rgb
f
549.68 195.905 mo
549.68 196.504 546.74 196.504 543.113 196.504 cv
539.485 196.504 536.545 196.566 536.545 195.905 cv
536.545 171.51 li
536.545 168.43 539.485 163.083 543.113 163.083 cv
546.74 163.083 549.68 168.43 549.68 171.51 cv
549.68 195.905 li
cp
f
544.662 151.024 mo
541.316 151.024 li
540.758 165.81 li
545.219 165.81 li
544.662 151.024 li
cp
f
542.059 151.519 mo
542.059 151.519 541.625 161.195 541.625 163.889 cv
541.625 164.618 538.28 166.182 538.28 171.51 cv
538.28 195.657 li
540.386 195.719 li
540.386 172.688 li
540.386 166.615 542.865 165.564 542.865 164.261 cv
542.865 161.348 542.865 151.519 542.865 151.519 cv
542.059 151.519 li
cp
.901961 .878431 .792157 rgb
f
549.68 189.647 mo
549.68 172.032 li
536.545 172.032 li
536.545 189.647 li
549.68 189.647 li
cp
f
544.464 152.806 mo
544.464 153.201 543.802 153.521 542.985 153.521 cv
542.168 153.521 541.505 153.201 541.505 152.806 cv
541.505 150.705 li
541.505 150.311 542.168 149.991 542.985 149.991 cv
543.802 149.991 544.464 150.311 544.464 150.705 cv
544.464 152.806 li
cp
f
544.925 154.5 mo
541.087 154.5 li
541.087 150.97 li
544.925 150.97 li
544.925 154.5 li
cp
.223529 .258824 .317647 rgb
f
218.081 167.837 mo
218.101 167.837 li
217.936 167.641 li
217.824 167.507 li
213.332 162.133 li
213.332 156.574 li
213.332 155.284 212.286 154.238 210.995 154.238 cv
209.705 154.238 208.658 155.284 208.658 156.574 cv
208.658 162.084 li
203.849 167.837 li
203.889 167.837 li
203.159 168.953 202.662 171.134 202.662 173.643 cv
202.662 195.066 li
202.662 196.356 203.709 196.505 204.999 196.505 cv
216.971 196.505 li
218.262 196.505 219.308 196.356 219.308 195.066 cv
219.308 173.643 li
219.308 171.134 218.812 168.953 218.081 167.837 cv
cp
.901961 .878431 .792157 rgb
f
217.834 169.127 mo
217.835 169.112 li
217.722 168.975 li
217.622 168.856 li
215.84 166.725 li
206.109 166.725 li
204.133 169.089 li
204.136 169.127 li
203.548 170.026 203.182 171.756 203.182 173.643 cv
203.182 195.066 li
203.182 195.715 203.434 195.986 204.999 195.986 cv
216.971 195.986 li
218.536 195.986 218.788 195.715 218.788 195.066 cv
218.788 173.643 li
218.788 171.756 218.423 170.026 217.834 169.127 cv
cp
.878431 .690196 .188235 rgb
f
213.851 155.284 mo
213.851 155.501 213.503 155.676 213.072 155.676 cv
208.788 155.676 li
208.358 155.676 208.009 155.501 208.009 155.284 cv
208.009 152.996 li
208.009 152.779 208.358 152.604 208.788 152.604 cv
213.072 152.604 li
213.503 152.604 213.851 152.779 213.851 152.996 cv
213.851 155.284 li
cp
.223529 .258824 .317647 rgb
f
207.295 195.446 mo
207.295 195.876 206.947 196.225 206.516 196.225 cv
205.824 196.225 li
205.394 196.225 205.045 195.876 205.045 195.446 cv
205.045 171.702 li
205.045 170.488 205.394 169.503 205.824 169.503 cv
206.516 169.503 li
206.947 169.503 207.295 170.488 207.295 171.702 cv
207.295 195.446 li
cp
.901961 .878431 .792157 rgb
f
210.411 159.242 mo
210.411 160.052 210.179 160.708 209.892 160.708 cv
209.605 160.708 209.372 160.052 209.372 159.242 cv
209.372 156.758 li
209.372 156.471 209.605 156.239 209.892 156.239 cv
210.179 156.239 210.411 156.471 210.411 156.758 cv
210.411 159.242 li
cp
.968627 .952941 .905882 rgb
f
219.308 182.794 mo
219.308 173.058 li
202.662 179.02 li
202.662 188.755 li
219.308 182.794 li
cp
.482353 .592157 .14902 rgb
f
444.28 167.837 mo
444.3 167.837 li
444.135 167.641 li
444.023 167.507 li
439.531 162.133 li
439.531 156.574 li
439.531 155.284 438.484 154.238 437.194 154.238 cv
435.903 154.238 434.857 155.284 434.857 156.574 cv
434.857 162.084 li
430.047 167.837 li
430.088 167.837 li
429.357 168.953 428.861 171.134 428.861 173.643 cv
428.861 195.066 li
428.861 196.356 429.907 196.505 431.198 196.505 cv
443.17 196.505 li
444.46 196.505 445.506 196.356 445.506 195.066 cv
445.506 173.643 li
445.506 171.134 445.01 168.953 444.28 167.837 cv
cp
.901961 .878431 .792157 rgb
f
444.033 169.127 mo
444.034 169.112 li
443.921 168.975 li
443.82 168.856 li
442.039 166.725 li
432.308 166.725 li
430.331 169.089 li
430.335 169.127 li
429.746 170.026 429.38 171.756 429.38 173.643 cv
429.38 195.066 li
429.38 195.715 429.633 195.986 431.198 195.986 cv
443.169 195.986 li
444.734 195.986 444.987 195.715 444.987 195.066 cv
444.987 173.643 li
444.987 171.756 444.621 170.026 444.033 169.127 cv
cp
.482353 .592157 .14902 rgb
f
440.05 155.284 mo
440.05 155.501 439.701 155.676 439.271 155.676 cv
434.987 155.676 li
434.557 155.676 434.208 155.501 434.208 155.284 cv
434.208 152.996 li
434.208 152.779 434.557 152.604 434.987 152.604 cv
439.271 152.604 li
439.701 152.604 440.05 152.779 440.05 152.996 cv
440.05 155.284 li
cp
.223529 .258824 .317647 rgb
f
433.494 195.446 mo
433.494 195.876 433.145 196.225 432.715 196.225 cv
432.022 196.225 li
431.592 196.225 431.244 195.876 431.244 195.446 cv
431.244 171.702 li
431.244 170.488 431.592 169.503 432.022 169.503 cv
432.715 169.503 li
433.145 169.503 433.494 170.488 433.494 171.702 cv
433.494 195.446 li
cp
.901961 .878431 .792157 rgb
f
436.61 159.242 mo
436.61 160.052 436.377 160.708 436.09 160.708 cv
435.803 160.708 435.571 160.052 435.571 159.242 cv
435.571 156.758 li
435.571 156.471 435.803 156.239 436.09 156.239 cv
436.377 156.239 436.61 156.471 436.61 156.758 cv
436.61 159.242 li
cp
.968627 .952941 .905882 rgb
f
167.068 172.266 mo
167.088 172.266 li
166.923 172.197 li
166.811 172.149 li
162.319 170.245 li
162.319 162.182 li
162.319 160.892 161.273 159.846 159.982 159.846 cv
158.691 159.846 157.645 160.892 157.645 162.182 cv
157.645 170.228 li
152.836 172.266 li
152.876 172.266 li
152.145 172.661 151.649 173.434 151.649 174.323 cv
151.649 195.066 li
151.649 196.356 152.695 196.505 153.986 196.505 cv
165.958 196.505 li
167.248 196.505 168.295 196.356 168.295 195.066 cv
168.295 174.323 li
168.295 173.434 167.798 172.661 167.068 172.266 cv
cp
.901961 .878431 .792157 rgb
f
166.821 172.723 mo
166.822 172.718 li
166.709 172.669 li
166.609 172.627 li
164.827 171.872 li
155.096 171.872 li
153.12 172.71 li
153.123 172.723 li
152.534 173.041 152.169 173.654 152.169 174.323 cv
152.169 195.066 li
152.169 195.715 152.421 195.986 153.986 195.986 cv
165.958 195.986 li
167.523 195.986 167.775 195.715 167.775 195.066 cv
167.775 174.323 li
167.775 173.654 167.41 173.041 166.821 172.723 cv
cp
.878431 .690196 .188235 rgb
f
162.838 160.892 mo
162.838 161.109 162.489 161.284 162.059 161.284 cv
157.775 161.284 li
157.345 161.284 156.996 161.109 156.996 160.892 cv
156.996 158.604 li
156.996 158.387 157.345 158.212 157.775 158.212 cv
162.059 158.212 li
162.489 158.212 162.838 158.387 162.838 158.604 cv
162.838 160.892 li
cp
.223529 .258824 .317647 rgb
f
156.282 195.446 mo
156.282 195.876 155.933 196.225 155.503 196.225 cv
154.811 196.225 li
154.38 196.225 154.032 195.876 154.032 195.446 cv
154.032 173.635 li
154.032 173.205 154.38 172.856 154.811 172.856 cv
155.503 172.856 li
155.933 172.856 156.282 173.205 156.282 173.635 cv
156.282 195.446 li
cp
.901961 .878431 .792157 rgb
f
159.398 169.221 mo
159.398 169.508 159.165 169.741 158.878 169.741 cv
158.592 169.741 158.359 169.508 158.359 169.221 cv
158.359 162.366 li
158.359 162.079 158.592 161.847 158.878 161.847 cv
159.165 161.847 159.398 162.079 159.398 162.366 cv
159.398 169.221 li
cp
.968627 .952941 .905882 rgb
f
157.645 163.067 mo
157.645 167.003 li
162.319 167.003 li
162.319 163.067 li
157.645 163.067 li
cp
.878431 .690196 .188235 rgb
f
157.645 163.65 mo
157.645 164.32 li
162.319 164.32 li
162.319 163.65 li
157.645 163.65 li
cp
.901961 .878431 .792157 rgb
f
157.645 165.727 mo
157.645 166.397 li
162.319 166.397 li
162.319 165.727 li
157.645 165.727 li
cp
f
168.295 190.624 mo
168.295 177.043 li
151.649 177.043 li
151.649 190.624 li
168.295 190.624 li
cp
f
gsave
220.646 207.453 mo
220.646 207.453 li
220.694 206.661 222.977 206.002 226.018 205.838 cv
226.701 204.688 226.871 202.882 226.871 200.849 cv
226.871 200.383 226.901 200.001 226.901 199.674 cv
226.901 200.001 226.871 200.383 226.871 200.849 cv
226.871 202.883 226.701 204.688 226.018 205.838 cv
222.977 206.002 220.694 206.661 220.646 207.453 cv
clp
220.646 199.674 mo
226.901 199.674 li
226.901 207.453 li
220.646 207.453 li
cp
.866667 .823529 .760784 rgb
f
grestore
227.253 196.761 mo
226.572 196.761 225.911 196.697 225.489 196.546 cv
223.622 195.875 220.913 192.799 220.74 189.494 cv
220.74 188.91 li
220.807 187.941 221.247 187.093 221.711 186.199 cv
221.972 185.694 222.243 185.172 222.448 184.619 cv
222.752 183.795 222.623 181.798 222.533 180.79 cv
231.564 180.79 li
231.564 187.503 li
231.564 195.072 li
230.829 195.819 230.038 196.354 229.321 196.546 cv
228.828 196.678 228.028 196.761 227.253 196.761 cv
.792157 .741176 .701961 rgb
f
231.564 195.072 mo
231.564 187.503 li
231.564 180.79 li
232.13 180.79 li
232.13 194.441 li
231.947 194.664 231.757 194.875 231.564 195.072 cv
220.74 189.494 mo
220.735 189.384 220.732 189.274 220.732 189.163 cv
220.732 189.078 220.735 188.994 220.74 188.91 cv
220.74 189.494 li
.752941 .721569 .698039 rgb
f
232.13 194.441 mo
232.13 180.79 li
232.13 189.647 li
233.865 189.647 li
233.865 191.354 li
233.484 192.476 232.856 193.555 232.13 194.441 cv
.847059 .835294 .866667 rgb
f
233.865 191.354 mo
233.865 189.647 li
234.233 189.647 li
234.185 190.214 234.056 190.79 233.865 191.354 cv
.921569 .913725 .94902 rgb
f
234.233 189.647 mo
233.865 189.647 li
232.13 189.647 li
232.13 180.79 li
232.352 180.79 li
232.261 181.779 232.136 183.714 232.44 184.514 cv
232.657 185.083 232.944 185.617 233.221 186.134 cv
233.753 187.122 234.254 188.056 234.254 189.163 cv
234.254 189.323 234.247 189.485 234.233 189.647 cv
234.767 189.163 mo
234.767 187.306 233.533 185.94 232.92 184.332 cv
232.559 183.384 232.92 180.277 232.92 180.277 cv
232.13 180.277 li
232.92 180.277 li
232.92 180.277 232.56 183.384 232.92 184.332 cv
233.533 185.94 234.767 187.306 234.767 189.163 cv
234.767 189.163 li
.843137 .878431 .741176 rgb
f
227.93 199.695 mo
227.929 198.926 228.088 198.457 229.165 197.893 cv
229.666 197.63 230.142 197.331 230.589 197 cv
230.589 197 li
230.142 197.331 229.666 197.63 229.165 197.893 cv
228.088 198.457 227.929 198.926 227.93 199.695 cv
.827451 .768627 .686274 rgb
f
230.589 197 mo
230.589 197 li
231.007 196.691 231.398 196.355 231.763 195.995 cv
231.763 195.995 231.763 195.995 231.763 195.995 cv
231.398 196.355 231.007 196.691 230.589 197 cv
.72549 .654902 .603922 rgb
f
231.763 195.995 mo
231.763 195.995 231.763 195.995 231.763 195.995 cv
231.888 195.871 232.011 195.744 232.13 195.615 cv
232.13 195.615 li
232.011 195.744 231.888 195.871 231.763 195.995 cv
.67451 .631373 .6 rgb
f
232.13 195.615 mo
232.13 195.615 li
232.84 194.841 233.427 193.975 233.865 193.052 cv
233.865 193.052 li
233.427 193.975 232.84 194.841 232.13 195.615 cv
.796078 .784314 .827451 rgb
f
233.865 193.052 mo
233.865 193.052 li
234.377 191.975 234.686 190.82 234.753 189.647 cv
234.753 189.647 li
234.686 190.82 234.377 191.975 233.865 193.052 cv
.898039 .886274 .929412 rgb
f
234.34 207.453 mo
220.646 207.453 li
220.694 206.661 222.977 206.002 226.018 205.838 cv
226.701 204.688 226.871 202.883 226.871 200.849 cv
226.871 200.383 226.901 200.001 226.901 199.674 cv
226.901 198.914 226.738 198.447 225.659 197.895 cv
225.133 197.626 224.647 197.326 224.198 197 cv
230.589 197 li
230.142 197.331 229.666 197.63 229.165 197.893 cv
228.088 198.457 227.929 198.926 227.93 199.695 cv
227.93 200.017 227.957 200.392 227.957 200.849 cv
227.957 202.88 228.196 204.682 228.878 205.832 cv
231.964 205.988 234.291 206.653 234.34 207.453 cv
.945098 .929412 .905882 rgb
f
230.589 197 mo
224.198 197 li
222.502 195.767 221.352 194.152 220.74 192.36 cv
220.74 189.494 li
220.913 192.799 223.622 195.875 225.489 196.546 cv
225.911 196.697 226.572 196.761 227.253 196.761 cv
228.028 196.761 228.828 196.678 229.321 196.546 cv
230.038 196.354 230.829 195.819 231.564 195.072 cv
231.564 195.717 li
231.564 195.824 231.632 195.916 231.763 195.995 cv
231.398 196.355 231.007 196.691 230.589 197 cv
220.74 188.91 mo
220.74 187.004 li
221.126 186.139 221.639 185.325 221.966 184.441 cv
222.086 184.115 222.126 183.542 222.126 182.924 cv
222.126 181.691 221.966 180.277 221.966 180.277 cv
231.564 180.277 li
231.564 180.79 li
222.533 180.79 li
222.623 181.798 222.752 183.795 222.448 184.619 cv
222.243 185.172 221.972 185.694 221.711 186.199 cv
221.247 187.093 220.807 187.941 220.74 188.91 cv
.917647 .898039 .882353 rgb
f
231.763 195.995 mo
231.632 195.916 231.564 195.824 231.564 195.717 cv
231.564 195.072 li
231.757 194.875 231.947 194.664 232.13 194.441 cv
232.13 195.615 li
232.011 195.744 231.888 195.871 231.763 195.995 cv
220.74 192.36 mo
220.392 191.339 220.218 190.261 220.218 189.163 cv
220.218 188.376 220.441 187.675 220.74 187.004 cv
220.74 188.91 li
220.735 188.994 220.732 189.078 220.732 189.163 cv
220.732 189.274 220.735 189.384 220.74 189.494 cv
220.74 192.36 li
232.13 180.79 mo
231.564 180.79 li
231.564 180.277 li
232.13 180.277 li
232.13 180.79 li
.901961 .890196 .878431 rgb
f
232.13 195.615 mo
232.13 194.441 li
232.856 193.555 233.484 192.476 233.865 191.354 cv
233.865 193.052 li
233.427 193.975 232.84 194.841 232.13 195.615 cv
.937255 .933333 .945098 rgb
f
233.865 193.052 mo
233.865 191.354 li
234.056 190.79 234.185 190.214 234.233 189.647 cv
234.753 189.647 li
234.686 190.82 234.377 191.975 233.865 193.052 cv
.968627 .964706 .980392 rgb
f
234.753 189.647 mo
234.233 189.647 li
234.247 189.485 234.254 189.323 234.254 189.163 cv
234.254 188.056 233.753 187.122 233.221 186.134 cv
232.944 185.617 232.657 185.083 232.44 184.514 cv
232.136 183.714 232.261 181.779 232.352 180.79 cv
232.13 180.79 li
232.13 180.277 li
232.92 180.277 li
232.92 180.277 232.559 183.384 232.92 184.332 cv
233.533 185.94 234.767 187.306 234.767 189.163 cv
234.767 189.325 234.763 189.486 234.753 189.647 cv
.937255 .952941 .898039 rgb
f
228.036 206.268 mo
227.922 206.586 227.812 206.907 227.708 207.229 cv
233.551 207.229 li
233.509 206.764 231.56 206.376 228.94 206.268 cv
228.036 206.268 li
cp
1 1 1 rgb
f
228.157 184.47 mo
228.558 186.036 228.937 187.515 228.937 189.269 cv
228.937 191.737 228.432 194.362 227.73 196.512 cv
228.345 196.521 228.993 196.442 229.386 196.305 cv
230.997 195.742 233.109 192.179 233.109 189.035 cv
233.109 187.945 232.73 187.026 232.329 186.052 cv
232.12 185.544 231.903 185.018 231.74 184.457 cv
231.51 183.669 231.605 181.764 231.673 180.79 cv
227.697 180.79 li
227.697 182.518 li
227.839 183.19 227.997 183.842 228.157 184.47 cv
cp
f
245.396 207.453 mo
245.396 207.453 li
245.444 206.661 247.727 206.002 250.768 205.838 cv
251.451 204.688 251.621 202.882 251.621 200.849 cv
251.621 200.383 251.651 200.001 251.651 199.674 cv
251.651 200.001 251.621 200.383 251.621 200.849 cv
251.621 202.883 251.451 204.688 250.768 205.838 cv
247.727 206.002 245.444 206.661 245.396 207.453 cv
.866667 .823529 .760784 rgb
f
252.003 196.761 mo
251.322 196.761 250.661 196.697 250.239 196.546 cv
250.093 196.493 249.942 196.426 249.787 196.345 cv
249.788 196.345 li
249.942 196.426 250.093 196.493 250.239 196.546 cv
250.661 196.697 251.323 196.761 252.003 196.761 cv
252.779 196.761 253.578 196.678 254.071 196.546 cv
255.78 196.088 257.91 193.678 258.694 191.097 cv
251.88 191.097 li
251.88 187.503 li
251.88 180.79 li
257.101 180.79 li
257.011 181.779 256.886 183.714 257.19 184.514 cv
257.407 185.083 257.694 185.617 257.971 186.134 cv
258.503 187.122 259.004 188.056 259.004 189.163 cv
259.004 192.355 256.206 195.974 254.071 196.546 cv
253.578 196.678 252.778 196.761 252.003 196.761 cv
.792157 .741176 .701961 rgb
f
249.787 196.345 mo
247.898 195.358 245.482 192.332 245.482 189.163 cv
245.482 188.086 245.957 187.169 246.461 186.199 cv
246.722 185.694 246.993 185.172 247.198 184.619 cv
247.502 183.795 247.373 181.798 247.283 180.79 cv
251.88 180.79 li
251.88 187.503 li
251.88 191.097 li
245.768 191.097 li
246.462 193.498 248.29 195.563 249.788 196.345 cv
249.787 196.345 li
.752941 .721569 .698039 rgb
f
259.517 189.163 mo
259.517 187.306 258.283 185.94 257.67 184.332 cv
257.309 183.384 257.67 180.277 257.67 180.277 cv
251.88 180.277 li
257.67 180.277 li
257.67 180.277 257.31 183.384 257.67 184.332 cv
258.283 185.94 259.517 187.306 259.517 189.163 cv
259.517 189.163 li
.792157 .741176 .701961 rgb
f
252.68 199.695 mo
252.679 198.926 252.838 198.457 253.915 197.893 cv
254.416 197.63 254.892 197.331 255.339 197 cv
255.339 197 li
254.892 197.331 254.416 197.63 253.915 197.893 cv
252.838 198.457 252.679 198.926 252.68 199.695 cv
.827451 .768627 .686274 rgb
f
255.339 197 mo
255.339 197 li
257.904 195.102 259.517 192.168 259.517 189.163 cv
259.517 189.163 li
259.517 192.168 257.904 195.102 255.339 197 cv
.72549 .654902 .603922 rgb
f
259.09 207.453 mo
245.396 207.453 li
245.444 206.661 247.727 206.002 250.768 205.838 cv
251.451 204.688 251.621 202.883 251.621 200.849 cv
251.621 200.383 251.651 200.001 251.651 199.674 cv
251.651 198.914 251.488 198.447 250.409 197.895 cv
249.883 197.626 249.397 197.326 248.948 197 cv
255.339 197 li
254.892 197.331 254.416 197.63 253.915 197.893 cv
252.838 198.457 252.679 198.926 252.68 199.695 cv
252.68 200.017 252.707 200.392 252.707 200.849 cv
252.707 202.88 252.946 204.682 253.628 205.832 cv
256.714 205.988 259.041 206.653 259.09 207.453 cv
.945098 .929412 .905882 rgb
f
255.339 197 mo
248.948 197 li
248.7 196.82 248.464 196.631 248.239 196.435 cv
248.813 196.413 249.332 196.384 249.787 196.345 cv
249.942 196.426 250.093 196.493 250.239 196.546 cv
250.661 196.697 251.322 196.761 252.003 196.761 cv
252.778 196.761 253.578 196.678 254.071 196.546 cv
256.206 195.974 259.004 192.355 259.004 189.163 cv
259.004 188.056 258.503 187.122 257.971 186.134 cv
257.694 185.617 257.407 185.083 257.19 184.514 cv
256.886 183.714 257.011 181.779 257.101 180.79 cv
251.88 180.79 li
251.88 180.277 li
257.67 180.277 li
257.67 180.277 257.309 183.384 257.67 184.332 cv
258.283 185.94 259.517 187.306 259.517 189.163 cv
259.517 192.168 257.904 195.102 255.339 197 cv
.917647 .898039 .882353 rgb
f
248.239 196.435 mo
246.713 195.104 245.724 193.425 245.266 191.6 cv
245.266 189.647 li
245.266 187.56 li
245.651 186.48 246.32 185.512 246.716 184.441 cv
246.836 184.115 246.876 183.542 246.876 182.924 cv
246.876 181.691 246.716 180.277 246.716 180.277 cv
251.88 180.277 li
251.88 180.79 li
247.283 180.79 li
247.373 181.798 247.502 183.795 247.198 184.619 cv
246.993 185.172 246.722 185.694 246.461 186.199 cv
245.957 187.169 245.482 188.086 245.482 189.163 cv
245.482 192.332 247.898 195.358 249.787 196.345 cv
249.332 196.384 248.813 196.413 248.239 196.435 cv
.901961 .890196 .878431 rgb
f
245.266 191.6 mo
245.106 190.964 245.011 190.31 244.98 189.647 cv
245.266 189.647 li
245.266 191.6 li
.937255 .933333 .945098 rgb
f
245.266 189.647 mo
245.266 189.647 li
244.98 189.647 li
244.972 189.486 244.968 189.325 244.968 189.163 cv
244.968 188.59 245.086 188.063 245.266 187.56 cv
245.266 189.647 li
.937255 .952941 .898039 rgb
f
252.786 206.268 mo
252.672 206.586 252.562 206.907 252.458 207.229 cv
258.301 207.229 li
258.259 206.764 256.31 206.376 253.69 206.268 cv
252.786 206.268 li
cp
1 1 1 rgb
f
252.003 196.761 mo
251.323 196.761 250.661 196.697 250.239 196.546 cv
250.093 196.493 249.942 196.426 249.788 196.345 cv
251.1 196.233 251.88 196.043 251.88 195.717 cv
251.88 191.097 li
258.694 191.097 li
257.91 193.678 255.78 196.088 254.071 196.546 cv
253.578 196.678 252.779 196.761 252.003 196.761 cv
.862745 .701961 .290196 rgb
f
249.788 196.345 mo
248.29 195.563 246.462 193.498 245.768 191.097 cv
251.88 191.097 li
251.88 195.717 li
251.88 196.043 251.1 196.233 249.788 196.345 cv
.854902 .698039 .290196 rgb
f
252.907 184.47 mo
253.308 186.036 253.687 187.515 253.687 189.269 cv
253.687 191.737 253.182 194.362 252.48 196.512 cv
253.095 196.521 253.743 196.442 254.136 196.305 cv
255.747 195.742 257.859 192.179 257.859 189.035 cv
257.859 187.945 257.48 187.026 257.079 186.052 cv
256.87 185.544 256.653 185.018 256.49 184.457 cv
256.26 183.669 256.355 181.764 256.423 180.79 cv
252.447 180.79 li
252.447 182.518 li
252.589 183.19 252.747 183.842 252.907 184.47 cv
cp
1 1 1 rgb
f
478.558 194.628 mo
478.558 193.361 479.589 192.33 480.856 192.33 cv
482.123 192.33 483.153 193.361 483.153 194.628 cv
483.153 195.895 482.123 196.926 480.856 196.926 cv
479.589 196.926 478.558 195.895 478.558 194.628 cv
460.002 188.949 mo
460.002 198.92 li
460.002 202.85 462.496 206.188 465.984 207.464 cv
472.228 207.464 li
475.716 206.188 478.211 202.85 478.211 198.92 cv
483.067 200.394 484.281 196.52 484.281 194.628 cv
484.281 192.736 482.747 191.203 480.855 191.203 cv
479.784 191.203 478.839 191.705 478.211 192.476 cv
478.211 188.949 li
460.002 188.949 li
f
477.496 199.652 mo
467.654 199.652 li
467.654 188.949 li
461.648 188.949 li
461.601 189.372 461.568 189.803 461.568 190.245 cv
461.568 198.61 li
461.568 198.973 461.585 199.321 461.618 199.652 cv
460.616 199.652 li
460.571 199.321 460.548 198.973 460.548 198.61 cv
460.548 190.245 li
460.548 189.803 460.593 189.372 460.658 188.949 cv
477.454 188.949 li
477.519 189.372 477.563 189.803 477.563 190.245 cv
477.563 198.61 li
477.563 198.973 477.54 199.321 477.496 199.652 cv
.917647 .898039 .87451 rgb
f
477.563 199.652 mo
477.563 199.892 li
477.563 203.684 473.754 205.258 469.056 205.258 cv
464.357 205.258 460.548 203.684 460.548 199.892 cv
460.548 199.652 li
477.563 199.652 li
.427451 .313726 .207843 rgb
f
467.654 205.253 mo
466.823 205.241 466.032 205.113 465.311 204.857 cv
466.04 205.033 466.827 205.149 467.654 205.209 cv
467.654 205.253 li
1 1 1 rgb
f
467.654 199.652 mo
461.618 199.652 li
461.585 199.321 461.568 198.973 461.568 198.61 cv
461.568 190.245 li
461.568 189.803 461.601 189.372 461.648 188.949 cv
467.654 188.949 li
467.654 199.652 li
.94902 .937255 .92549 rgb
f
467.654 205.209 mo
466.827 205.149 466.04 205.033 465.311 204.857 cv
463.338 204.157 461.896 202.501 461.618 199.652 cv
467.654 199.652 li
467.654 205.209 li
.654902 .588235 .52549 rgb
f
283.252 204.119 mo
284.12 204.224 li
288.989 164.195 li
288.12 164.089 li
283.252 204.119 li
.878431 .690196 .188235 rgb
f
283.316 204.279 mo
284.19 204.319 li
286.001 164.035 li
285.127 163.996 li
283.316 204.279 li
.866667 .372549 .32549 rgb
f
285.494 207.59 mo
276.46 207.59 li
275.41 207.185 274.626 206.158 274.561 204.935 cv
274.144 197 li
274.959 197 li
275.237 204.179 li
275.297 205.717 276.219 206.935 277.297 206.935 cv
279.682 206.935 li
279.578 206.556 279.517 206.137 279.514 205.693 cv
279.531 204.774 li
284.506 204.774 li
285.537 204.774 286.423 203.911 286.481 202.851 cv
286.798 197 li
287.809 197 li
287.392 204.935 li
287.327 206.158 286.543 207.185 285.494 207.59 cv
.784314 .709804 .607843 rgb
f
287.809 197 mo
286.798 197 li
287.292 187.854 li
287.725 179.854 li
287.084 179.854 li
287.156 179.26 li
288.743 179.26 li
287.809 197 li
274.959 197 mo
274.144 197 li
273.21 179.26 li
284.44 179.26 li
284.414 179.854 li
279.999 179.854 li
280.01 179.26 li
274.273 179.26 li
274.296 179.854 li
274.228 179.854 li
274.465 184.243 li
274.959 197 li
.654902 .568627 .505882 rgb
f
284.506 207.775 mo
277.448 207.775 li
277.103 207.775 276.77 207.71 276.46 207.59 cv
285.494 207.59 li
285.183 207.71 284.85 207.775 284.506 207.775 cv
.52549 .509804 .501961 rgb
f
286.203 179.854 mo
285.29 179.854 li
285.316 179.26 li
286.275 179.26 li
286.203 179.854 li
.654902 .568627 .505882 rgb
f
287.084 179.854 mo
286.203 179.854 li
286.275 179.26 li
287.156 179.26 li
287.084 179.854 li
.941176 .847059 .596078 rgb
f
285.29 179.854 mo
284.414 179.854 li
284.44 179.26 li
285.316 179.26 li
285.29 179.854 li
.933333 .686274 .662745 rgb
f
287.292 187.854 mo
286.111 187.854 li
287.084 179.854 li
287.725 179.854 li
287.292 187.854 li
285.23 187.854 mo
284.93 187.854 li
285.29 179.854 li
286.203 179.854 li
285.23 187.854 li
.792157 .741176 .701961 rgb
f
286.111 187.854 mo
285.23 187.854 li
286.203 179.854 li
287.084 179.854 li
286.111 187.854 li
.964706 .909804 .756863 rgb
f
284.054 187.854 mo
279.848 187.854 li
279.999 179.854 li
284.414 179.854 li
284.054 187.854 li
274.465 184.243 mo
274.228 179.854 li
274.296 179.854 li
274.465 184.243 li
.792157 .741176 .701961 rgb
f
284.93 187.854 mo
284.054 187.854 li
284.414 179.854 li
285.29 179.854 li
284.93 187.854 li
.960784 .811765 .796078 rgb
f
284.506 204.774 mo
279.531 204.774 li
284.506 204.774 li
285.537 204.774 286.423 203.911 286.481 202.851 cv
286.797 197 li
286.798 197 li
286.481 202.851 li
286.423 203.911 285.537 204.774 284.506 204.774 cv
.541176 .615686 .239216 rgb
f
286.798 197 mo
286.797 197 li
287.292 187.854 li
287.292 187.854 li
286.798 197 li
.517647 .588235 .219608 rgb
f
284.506 204.774 mo
279.531 204.774 li
279.677 197 li
283.643 197 li
283.365 203.19 li
283.252 204.119 li
283.323 204.127 li
283.316 204.279 li
284.19 204.319 li
284.237 203.264 li
284.999 197 li
286.797 197 li
286.481 202.851 li
286.423 203.911 285.537 204.774 284.506 204.774 cv
.560784 .639216 .270588 rgb
f
286.797 197 mo
284.999 197 li
286.111 187.854 li
287.292 187.854 li
286.797 197 li
283.643 197 mo
279.677 197 li
279.848 187.854 li
284.054 187.854 li
283.643 197 li
284.754 191.765 mo
284.93 187.854 li
285.23 187.854 li
284.754 191.765 li
.545098 .623529 .258824 rgb
f
283.323 204.127 mo
283.252 204.119 li
283.365 203.19 li
283.323 204.127 li
284.237 203.264 mo
284.754 191.765 li
285.23 187.854 li
286.111 187.854 li
284.999 197 li
284.237 203.264 li
.580392 .654902 .270588 rgb
f
284.19 204.319 mo
283.316 204.279 li
283.323 204.127 li
283.365 203.19 li
283.643 197 li
284.054 187.854 li
284.93 187.854 li
284.754 191.765 li
284.237 203.264 li
284.19 204.319 li
.576471 .635294 .278431 rgb
f
279.682 206.935 mo
277.297 206.935 li
276.219 206.935 275.297 205.717 275.237 204.179 cv
274.959 197 li
275.156 197 li
275.472 202.851 li
275.53 203.911 276.416 204.774 277.447 204.774 cv
279.531 204.774 li
279.514 205.693 li
279.517 206.137 279.578 206.556 279.682 206.935 cv
.894118 .854902 .803922 rgb
f
275.156 197 mo
274.959 197 li
274.465 184.243 li
275.156 197 li
279.999 179.854 mo
274.296 179.854 li
274.273 179.26 li
280.01 179.26 li
279.999 179.854 li
.827451 .784314 .752941 rgb
f
275.472 202.851 mo
275.156 197 li
275.156 197 li
275.472 202.851 li
.937255 .913725 .882353 rgb
f
275.156 197 mo
275.156 197 li
274.465 184.243 li
274.296 179.854 li
279.999 179.854 li
279.848 187.854 li
274.661 187.854 li
275.156 197 li
.898039 .870588 .85098 rgb
f
279.531 204.774 mo
277.447 204.774 li
276.416 204.774 275.53 203.911 275.472 202.851 cv
275.472 202.851 li
275.156 197 li
279.677 197 li
279.531 204.774 li
.780392 .819608 .635294 rgb
f
279.677 197 mo
275.156 197 li
274.661 187.854 li
279.848 187.854 li
279.677 197 li
.772549 .811765 .631373 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: (??????? ??????) ()
%%Title: (1505.m00.i125.n045.P.c25.254601262 Bar interior in flat style design.eps)
%%CreationDate: 5/29/2015 2:21 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2N<de<Q`Y3YujB-AE)Qr`Yb,f/-#OI1\$fb\+6!tO2IjdaG?G^fNo<K^P9?D*^MN"*gK-Ad.T/X<-3;H9]l?<Gir%pIM0
%lZBK3n(!A^=`uAIj'*^;rUI(FKkL)W>&Scp.r/;!=J9"<1i'5m?FO4>om6FWUYY=>B(A10Xit\Y'RhKD51CL1p0X647_*OLcfB8^
%ULLo6/%3(7E^/Ss/HVIfHMC2FSq7==1Z?0t:(s:Q>/(T45i'rXrq7[W&uieK(-d3WD"0OTr6Kq0_nRi%l[96E+oh6)O+j4@4MY]P
%42,P)T[kQ9bPcb!"V%SG"T5_75@t81PObBoQh4f^.JVPFOMNCfAR9Kjl-WEn&0^7%9Dp6QM(f/+J'.onDi0O'_U!DFageXI]tFKU
%@ES_dQ#St^fiAW>OTlA",U.5M%r9EbUYN'#>WOQq?=qlfJ+sgc)!6S\/dpFV7QsLo'P)VV'?IBL7?o_];#@S*qeJ(\XB)LT\n\*`
%h>T_=5;8kJ2]:Nq"n)s?[I0Mb]ar"-.uNCUm'`t&#'A<V?>Pj?g0$)nDcPf$gc_e4JQ^`e!RASt-B)/S3G=`$5AS?&68e>6;emD^
%h\)X+:&s>;7lW_nB4iFCd1bX;n57j.%%?mo!dn6S*8ooE!JeDSekbV6eR]RK0CfkHDKkDH_n+3".0$"[ZQ]2Zks(&%k]X^JCMCqF
%I?`W#6==AK&$Y/t<]/cPiqW9;lXgT>!6Jo]:XuZ2$iL90$p(C="<>*k_ZTQI<rC"Q?HV0BUV4YIIbaA"#G%F:8c+Qu/`s)#j'(S^
%XjV-3@7I;c=3'4WbCe"_$#&J*>HU43n3&Cf/_<&p/u]EYfr\iHYOF)kec2Ll*[DF6M5`b7>HL,*NHU(W/BalhEN`5WQ+Iq1+g/%K
%rtBi1_`4&6Z!a^65#n/h.ifHBWeJS(eUKjcp/@EW9(gb+'nhjarP.(BF.BILX_^sURS"+9C]2E/E4$&O3u.4Lqe*,ie6:C/4;RLg
%).sq9M5@1+?Z%^cVqlCVXBs"bFpG^eb[J->Lhe+(He]86NIJ_l;g+pClaC--A:I'Q<<\*r"T9[>RGl`VVoH+I5@16goY>9Cl_'t!
%LuO,"%fRp[c^3q;WL356BCiXhW:ua#m2Xd]af/>[[=b*bIP$h&3iEU0j2NMC;`me^^="G.mT+;\:?jF8&i']EHG='&Zeau@c'^RO
%.sG_b6Fu6/WR<k[FcES/bKH6TBYoos*k^;5"k?-?A0q5F=bUe_G=sU*pn5reH3J/BEqe`C5HSK4s4qLui5]CGJ8Y=1d'&!E>CqI;
%DRV`5VK,^U<4fORQ*<%p40Y6n5N6&KT@e#UED]ih_Lp(T!E@c69c!T3g_ctfJ(:UuZO+TSjeaR4"K6?61YnJ*>5e)pT;"9Ui3^(Z
%VDJ6Id>re'Fr,V)keb[1FeMP'-hC1gn'MGu48BmGqN`NmX^:.5N]r)Np=\u+cVEDIG's)F>"@TChU\_V3f/QVdWJsK<+LL*4U+-V
%<N07f(@nFt7jG0a3^T7B]Z[p->jg."h:dnjoK8+h%[EYek?@8*IN;+[b<+@OEYsF",Gg7Fe*<HOH*:D(k,V+hr+E$)n\Wc?'8kE'
%h<NR;K1;:u>8Ku4CaRO\/u&14"e^$`RF5J"?TdmXR2!$:0C*/\;sTacF\+;:VWbCsm%?N*<bgC;k>&:Z:$R4;9l&"beC7]d1e+bm
%p=/2X>d>D2Bdq!^2c2kqf]<7;'P]"`[CKp/F.J_GG-f_Q\S!k=St.t;lqY-'Y^RNEg\'FJna05!luUcrp0>3Di])/Lk-!Oq[@=dO
%F4]h%mb2qe`j=)3X8Al^$W_FgNrOQLgdVqs9Q;o4/c")ki4BF_H@Z2^.-(d2d?D"#'b&TE^+(qrTcjf<g&<d]"V2$g8B3*;kqU7j
%;TnnM\,;Df^U.K<jeim<abVh/ap8OW[PI>b%6h\ECR>0KH*?IB)L9p<Vrio6R)7n;Be"a'Q(+B2eOgulj[s+2*+8V])J3N6Vq%ni
%j0/%"'XIq68&*hRl(c=_e*9i7e#914X%Kp"_(=daI546heL=2:3iTS8gQ79&lI<uT_B=j0_TGVJ)5bdoePs5]:9u#rP`9^P'T$k<
%>/qoK1b'\%3`Qungo<;3l*M?#p8)i#CNRkE2o%9\dY.V"L"`/A3^/`Wp;`(eX'`o,M$!Z8"(a:DSR:cLr3#h6G'VI#e]Y)>ah=-[
%*H:$_IOY).f!X1r".*)Gpe@ST'clRd2412;Y&WD"C4XT3dfLs"L?FaYU%i/+TrApQ.Jhtul%:c\T<hbjT/CE_1a7FO[.;b#J*+.[
%)I?(3OO'i'O422JUjaZe+JuhEVY4E#eJaj-a8W?%jE976\Dl:M70cS/:3UL0di&_Y1j<mb(%XTLq&]*S&,B;q+f@;$1uCZ\fk%mQ
%4T.ER;I?qlCg1[(<S;cWpj_1dq7cBAff-oVj)U$Ul?qK6^2H-k2brHgbkI*0-'gLI2kKIWchEEKdr`gFn>?c%*e;(iApHt4SlW%D
%dWN$cGHHEDSY<i>"n+TKdC\?BApE%0ookS*YEj+9^j'and;U=+9[/&]Yp'Xg-X[ggjiV-(C%Y+.n-rQc;YOiG+]BoKFbl-U;N'-k
%9I<ht[F9#qelm_!]XA"sEW*8Xp1M(pW:ecR[H^r->Ad0j=II4Uk4,d'r%++"RE*XV<W((1a3Wo<ZemYmIYnT6=p)L8N&S#I;j3S&
%7A%a&WAb']DA8"%:,u!HW08`68p>F1ddJH7*0$,e9WobshiNp3R)M!EZ>rlr&,?,:Y\^qdmI\6]:7(8Af"X<)0r,/1NBT,*%]3?0
%1ppD@oo2-j&%p*g0E4,[$,\;Ln=lX2'RuMU?KQg*H/N6TGaSeCk(/kEi+3sSR;UqoH7%Rpan(pg!7HF=Gcl/ll,I"0EM]>HbX]Zj
%g1f@"*\s1]At!(/JPAr3_MU0uQsWrM<F'ch/e1[pCpSS#7@IF>B)T`,oGN:f^HOR@I<lq4HuYZ0Nq;"qr]uHPHGQ6LF`Dkodql+D
%=7h0Lc.Y.l`T_!jicKm"S_r?^^VOVfCb!)eoRb[oS[gX3G[2(Di"`H[3\c-+lR^itk5";:04/&bKf=U/55aWUnu=CV$-]g=^N_Q%
%VlgI:-@&epTG*>E/KgG?SYG^k0;bB"42:JuVR4,J3Q$qFpoA,[mckK&mkfG`@mj=pBLT=):3s<38jg'g9t>7mD,ckggs&]&Y:f+d
%Coa\%7_;rk=nSi9NH4-./L-s4Vd-4qJ$)u.<;+,RF9d8*\S:S>b/4>57ZLC?kIQIH&K1%@9$rVk5>01&ZYn(d2p:DBfL*0rej8c+
%>]'M+^KJ/8HKPam&Ei1fhWadd=fMQgfD"3K$?pB:V;JAFWh3Y_G@La3rXCt@jeS!UlZQBF$L_X'?09V[S<fUN[kfhkgeG8)DQ78e
%6grd?_K@]eo=gdfrVIsK[kft#Y(ok2[u#Po+nHB.ZP^QOT-0cf#la`)q93T*RrCo9IY)s%2=jO8(nI9AT8f%To+U3V`GlZ(IF]4T
%q$HU0?6&,UaCf6nS=^prYDq.QD7kl@jSpi60te'ek/:Tn,l+OdbjS\uY0VLn<[t6u8"=\EQ%$:6Z<^8dDoq/pjbpYFWH9S)V:b/q
%0)',"DXGK;euGN+"u]G0>((1o&,PsJA^W22iZnnt401A=]fI<6H<QlO@VC/?NTLojB5>kA"lf8hW]B'mVq%ca62,WN!#\>$/?YJe
%G%oiG>E_"h:gJtE*Nk)+(E#mE2ssV'>i&]`:7+]OWs`5=adRM2[gc.-0$*.c``dtSoB]d/CU:,iDUp"Y;m5ukr?pU%.7;_dNf;j3
%gR-8\=",,dRD1:_q'Om_n`kUG*d4"#IuQ+L\8f'%="r-9?Anb@Z?$I58T60\4,"0]bu4hu4,Mm1F#3D#,dM-El<Hi+RSQn?dtH=I
%MQXWYI?W5*jL+_0[;N8+SRVM,en2F!5#*oGf-37iB2Z\AWP`Z'L*%)*VlWUMK2uR`>,m^S`+7OD@qBO=Rr-L)Ct`\PDS@m\S8*'M
%\N"ipq64(@ohNrJJRJb.rl0XUY%FQU][_;hZT-P\n0*-9>t]JbqA;.QPk(,U2!,k)J'5%e'[,Bt@elKA\5=nTq?O\L7Ki"!0Wo`f
%$bd6#Kun\j0>G,MRD2dkq"6c@GP3eA/&1jbKCacR?T'^TBt%Vb4*/m$I^dmEs-Z44_ZE$D[NA]9)q1;'1qK2anYKH>8NjSjF$o&e
%\#]`^(?fq1jgdP!"g!u@mE1^:TK-\Mds/ig_UIdN\a`bsk9Oo9<0I3#2l2h)-)]:i7_MePVmoj:;JoHWgM-RP<chN9Wjf"9PBnb0
%9rm)RVcN4%dd3h%ZIA*-Q\,19WB*tKAiF*C)s&os+3N,K]jIDALa=lG>]cikP*9dqR:`_#@OVbIh\-2C\*D4;b5(c8@]oSoXW+a5
%P00ktFmn]VhTL.l2AtYNe&rV_Jr2J#8fI^419_TTT,lgTYEO,mHl9=:$i#a0cSYW@XeQSC'Q1JaqEHsF2,/Y6E[p3Vk'jY\V/W#E
%]$-ufK"9+MAT"ftTdU)1PVq?])ekl[bMK$f#6-t5Q=:-2j_B4*-Le2H:<OEUeh7<E>ur]@2dTNIea/6<[r^,<ZqjWeA^30j0@tUN
%>k=d/K":$5CVI@ARsiO/>\i;=#5P<+:%b)'<GkuVT<9t_[</SmM@31[43Mf9m\IDO@Z'naV!CF;[&b^R@S-FsliPM!WJ(A^$Tr,^
%"Mp3/:Zrl%pF&b%dg\5Ok1<C70s3:&]UDeQ<kWAU0!>.%q&An=gGB^(c2)9U2rV%kF&2\XPP&^=a].i=c)W;N%c-IN9_[g_=`1ZL
%QC1f_2u/`io@I-CRBHAOXKRDsZ0YUo$5T"O^KF[<\hW6:1V!Ia]()C,h>#=GD2c/OIK%g_GuE_\>Y/Sbf"$WUXId2/HKI'"r.UZB
%&'jhDE+<7rH.1VN4b"t0lbetEauOqrk<EQu]T,bV<?f-.-N.HR-I-Bh+2=(uGs9UQR]%b"F3IQ?rgr"3j487.1TL%GNL@'&k,B9*
%+Z8jjNEJp)R(jI(-G*p*kG<d^a"<[dRCT:e-g&.sNUt\<f%CMqAt@`h?Ae0pHk&c;:<[qeb!.hZ0u*VXL.*psS@b=^1hOb>R7B)G
%6YaIW&CF%tLNu9tqD(9rBZq\>ZSjW2LrMQOEEsb,ekM$8V!?13M.k[p]-qR49bdW3BEhc/M0EeBq:Tg_KZ!QGSQnH7^Q%_iMuCi%
%8EXn$Tr0L`NO\O.?))>_hsGP<hsH]G=hSus`Bs++H1'tq]aD)g?mQh[c$[HHrapkp^Gko]k5O5mhjaLi^W#)'i>C?lJ+#k@bW/,O
%mbHcj4bk]0[*9W*\\g@MpuW(Dgu8-C4+-$73IEdP](qhWZ(,Q$k!%\HpjA[G:ETNtr7?'kp+h)hT?(=Qfb@$5o69Rqs,s@NP%+E[
%E\_:80>C\?r%:Y7MJk\IX0K2Rq[LCtlcSNP"`.eY06?541G^cOP-KBJY4XbLi=K69q4<1^o=G/')S^U[7W+ut0Xg,uBX>1-Q:`II
%qFZr\C]<&T"WjT3?EVPi1PKTFk1c:_=5[$Ie*PtES`0oH0C=\2VY`iditPe052,9<+75KA<_&$!WVfo0eZ(J:C5lCC?-I!SO_OK,
%5K1@qeb_<%aHTbq6G:ubPUj.RXju;\GHU%jdk!k/.5hmDLSp?`s(+Y`MT!QY4%paF(o4b$9P_S72]>T4UTVo]Q(g(d`M1Z<)eaFK
%;A-=<hbq_<X@l'P(OTQ4HbNA\#Hj-;cOV0MSoebUs.kI?T%"^=FEpH;ktPguO^_UR)h1F"\?p0AjepYN'MR8"V_S,';`+@uR;"dt
%>rtcWk#Js+Ff!W+V%B8>V(u]o/kA#o0H)H(X_sCCJ!GM\QmL,<rGjin[[/;<eYPaK<@auW%^AoL<-I#1DP^f2Vkso$bY^7Bm?P!,
%[(=YeO^F\HOK-iW^]%jq0oCn7YSDE2D)]qFX&No8Sjg1iDl1ri9>?C:RrBP:%Ie5#Do-XuQ(+"pP,:%e-%%Gn7%(%Lm/.3oV<aP,
%P"I+GqGJP9K`/)[/kY4PjeAR8b]R'7Y'DYBNKEp7r&";]-n.jNCQaTR\Oj=[Bf\&r7@E>5r%D*?GqR7@q)T<>T\RarPZ/Q@k)G+b
%P`(^%1Y9U?^@&N[WTI[@V;nH8U/Z#./kVSX>SjC>Q+Jm)0rHAK>[B^39QMhipPZ@UAU)I4iqcqUEIB1n[o+qT$?"@qL3/]Kj2n@&
%ko-m9rbA/X*Ncq3GQ61(P=>5W?N"qD?P%LjCM2demdDU9'JCiKl&%+4&BkmF>g^e2*@SLQglAV![T_3`i=Y2qFS)lpg4NT*:snj>
%_Da2JTE"K&^Ku*I[o!(4f,2<\YNYO^e5b&mE@nNM*V@W4]B*)h'NF@uDA?itm)P(_2.(5XlDKeJ<7/U,]<MEe%k;4%IU7;]aXVn8
%'1m4n6e<[3LHV"m+o[4c&[n/@Q:6;m5?i##r-IoYq-1#V5Nr,`e9W5H03[bX>4`7m@dt,96[@&BIf[j2P;+=;#PD],;2YfbR900M
%hE\pWhNni-LVL-WYhd+>=P4f*I+s8a^5,*'J.GN8qLNt\I1Dk\qV+gDp)H8E#OF)\M9Kl"dhaN5r<%N(7q$p;W^+a6)>]!pCR42C
%/pn-sn2^"9biccci.Hqpi"(5/i<RtdcQ<"8Ifo_cmq?*5TdR'oJ`GHJI.0J[nNuSgA-G/G&5HV[3!R58Sfc>bc]*B^mqGgR'A/g]
%c5_2m7]kROaj08o?X_Z-FDW0+e@"Dr\hKM&OT4TsFZgRDm,@jAa=0^Xcl`;AX,J"i`Qs+3Mo.pe33bf:rd/]0CUXCK]<Bj3dDBAl
%1!Bt%q#GnN49e)O5O<6UnW$-4C/S06p\G3<q_*2=PRh<,s.u<;Q%4<Gpt7cI2mB=^a&e'?FA`LHT7qH"JD9(;EZ[bsiFkX^-t;s/
%@;Q"[9T_%o:L;_JE4iXZYH%CeX\?#$(61#STGEP'n$RI3J!R^[[7fm7.#^AqC@&sioTERbrD9=Og]upZmE0_A;V-^Qd7'C6U4^L/
%H:,O1>D,fgGik[M:NKX(.,r3q,uaa?6+P?9?8tP9'_V$:MJR5W,L&nXSIr$-'NY6-Y84A/CbS!FZSLb;gW^U4J%q7;=*nL89lUUG
%3D@bursQ@t\GV$+s-fOK--Eob^Li#2YCS%h2<pHrUW.`*b$()7_m3W"2_O<;WqUQH+m'5>e*ilD=dSh5h93Bc#kkj4l1aT9Sm@dO
%-X34*r[at8X@pI%7)7+dkn8g&B"NIgIu`93YUiDSPQ%V#4iR(?7*Oj^1Lih7G*F_*HC<H&=:qdIblf'3>/+;GoBI,''E)cWmSm2F
%,SeY1dKFi!<4<h6j)SYEeep;j3kLS)Vp.]5<o$9Rq3En0r;!SQRJ\;83WIX9>ru#Vcg=,gEjpPR/pF@a$Dn;Gm*)^`CU8'[DRn<`
%Pe20l3-3fU=#7PdIoqn4:pFQ/go5GT=1V8LF@f/B<3N-ikBN1>'@:JGT"do+G@R9FdN4mPQe$J1Kn8=G$Ju/\\?M!rjiabjbIn!6
%Nl$aM&=L4LX]Oif=j%f9rnYn:<U9VSEP56<ru>HF.NZXs^pkG-1.<&YI]WcP61sk+/2@dC#SOjUl^_V\bIrA,>Q55Y=D#>!CGuIr
%1&Qh<]GgE(KDoGC#W"H8`0JKIdm<f:QJ$%t"s'gVLDLd4=#?qPg8S_m9qiaIB$E>rYK?*pX4:XMCmKG2_cXHHmgY>'YLDnYJ^*Rm
%EeAg&mc>9dLMgh*cIAQ^jaIXUUdbBVMbB\Og6M7fN8\K[*I!!1KNXH!OeMC%:3"WokcoJ=l_98e?Sr4Gn\"5)Dk1&8YM\";iB/<L
%Z1[QLdl<O!UQ.m09ra:L=tdE!)7@AGlf1:5nZ:LN\kDE_\Uf^kUB9IWe$q6YCTY3I8<i5N+/8(W9cGiFLY50&0R`Ne6b>BSSq>2&
%T[Np=k[iVAeR>IarE8H00H<9p=NKJoG]4F)&'?;AR8WFu>%>d`>+(RVdU5];d]6%`"EmI9T+rreqXk9H>jeGiZe+ZScYL5AY4KM9
%in!3Ul,6j3(7$]rY.h,k8u(5DV1l14ItK@9Km=]$NM/j'=u3SZ(`H0b32b3m<bp5?XHH_3g$U5;f5"%d.*j=W\l0HdB4Du@U9\6%
%[[$=Kj/ghOY\K^aDP3k]b>JSfNJ;nZ2kjYLT"s0#<jOZWjt?-s[o[@o2L.>-/h,@5YBQ"8<mNF5)73n$T:ODC[%cL8jR`*8:@"^H
%@?P`c5Yl.W\DD.iOW,Vu(VG.Y[!A6+7YT8S3QXl<>d(aQb;[W#oA3%6EMJ`!IaG-H_BANJVfVCWB1HA#Q(Rm=q"V:&f=X],LEBbo
%^.FZsZY7s9h#-3RenD;?Ji\pb?GDW)apg_,gmA8bf8IUJ3G(<Y:ps;>Ju3=jdSnPm?<XB<eXDZ]-6BOm.X09^5U"[\?@X4Qle#][
%)TqWT8*GhH1pLR8MD1XNTN&T217E'qb*K2@^YMIMV_$Y8,[=$F/>(kW7GpOD]0I\H\t4;+1]E<68H4#6V9Tr]J-mN^$M`5="a*k>
%k>#DdUnKZcnk64Zn,uE;Fnst=b1c,]WQV:\/iUX;</d?.9/I^3:A^jD)"q:U(-GXSp#T2>HW%sk\gUfEb2$g@h*'#S?.@Uu2qp1_
%bG6>IFpf(O5$G$(o`9uj.l==G'tnA7_:[a8?ldJ,nn#C;pI0!V$#=!)\kXL<oJfk@mnVX]Z>hM\OX\FH/E';OH9/>c)387*BQp7c
%i/KCX1oeJr\aO+W<bd2fH''$4AV'N0$9I2P'$Hl3_29'a!/F0("Boj-M^/X%_&2l[Vu>UA9er%KX>$ebX*.[,n,8c\)YCgE5jLa\
%Eru#+)geC%8ZSKN%?>cOFUuYp)kHCggK:<48<W)%Yba$?\Cs_UgoMqR$=CAD-1%,hV/'J5\=k0:i?T`0%4qp-*1+8RZ6L,QLB>D?
%8>D+sMe7)P/CR62n+,mO?jZ*b=kfFuD(nl7^Z*GoKU!6EK;.hdqi-NY1J&ip88LGX888[!_(I6;CSC?(]kA0Q.>)MSPWQ-Z^9lgP
%WtCT^f,H',0i!b)Nj#fB'M;N,e#6p`E9VuEk64T>.KE60Kl[6s?S>W$[FuF[e]_c0[bX0+%J4Y+"16`[nUnS1Hk:AWfG/p?fD]gZ
%+uR;0W&0!1jOO>8m7qeC5mc60TN/Oq+4))*)"lHKj$HK50&fH;.`mm4^&@?Cbg'8G(Qn/>gPJbX8=/(t8-Y2QBjX'E#u:\P4Bj)u
%C:'c#Z^3C)[*+Es^g]blI@fNs!E#2n>L9iPlo1jF@m:\(8H]C@R\827YC>3:9REMdJ/7I@[CcId?He(3ST_3^C.h##Ek6'6).e_Y
%5b8;Cma_>CC[BT_-acR`&CYW.@:sUBR;G'NK>l$9WerWo[E4S-Pq_-]lcQ+RqE5a'::)<&>C-TVDbN?\VR7oZZh^OsT3eKVhOuZ/
%(I.<<WqAZA[Dt:'5C#gGT7n)d2`V9tk*"LGq#3sfD8LIaHAb+>a:u5.^uKj^.V0$9jfOIkD@RW$j84+`Lf[p><S:@*^<4l6`fsCt
%oN[7J4N9_Z.MfUfLkR0G)Rfsk%s4Q9=2XQ*1"(gbRN*nAIW39qKT.g8=aZ;&-AK?5GM4S^k0$SRLOZDL:89Nd@h(t+"u-$X_)1N4
%?D2V>pV[mp\1n1&kK=mV4]WXBQ_B:QX@R5<iJp:+^F*)-,[mn4W5hBM=;UH6&bkhPVXDTE]@F'SFkb/EU&A%c-4c+dSdR$0qn)M/
%A&7]FJUZ<ER+A$%9;::\$VbGCZj=?p=$(k8YPj`\1iW1A\iZmJfOnO9U5[r,^rskk<^hc74Veq,Ot4'okaJ^n`Rfk?fX4^.Wm6d?
%N),N\Gj9,"h?0LH:s@"lWVsUdIGcTU!^HSQ@4W&p)+Bp(j=:_pM-.3h,YqPk,q^@XUUD5BYp8STF]h-_]LY7l:>\r="WZ&@'#gdf
%!f'L)/(EKj1X"7BW!:/iKpct$/T$m>8>rAa`jU<Me7ftd\?%><_0SFjGa0=i(lu1AJj%B`957MfY5*sj\97(jUas=eh)1b`7>W_`
%O/"$Z'iD]/8]Gr6HK.TD;\`AF0e/j7:9.3TA>80Vdmj;`=rmY92*VLF.-DsAV_lL3EBTq]Qq`5'd`:E*SnP4C[>2bb3&E^*l-P=#
%;!V,mohJ,MR9)\V>kc,!8O<f%?FKO&8NH!e"^18"[!/5p54$ji=4;jL':"tNK1j+UG.fN*_3QpB4.WnB7ADcR<IRfkBFfR`ilFs/
%I)omkOQ@7ST_hHe7deFXAYBFdbVlWRjaQUdCsY:^Q0SlRRt&gQh=An)$%]gh[k8%9%F=E'^/o>0'2**dhelH)F*9"mKABI$B06Vf
%Og&mZ()WE6A"^&7\<sjU)>F$M8/iKNNEM2uJr3qGJS>&5m[de2mrhB3T(W;5_u4VrD@CL]bB.P*pZZ_=m6<8ph2N.Aqm8?)LFc`]
%Rio]7Eia_2ls`NJi-4Eo,q%nc4r>p`';d-oNld!=KMm&GH$hK8gAc*QEMj.M6N*^/@2?nZO\uKR3[SK8E%8kLGD%@"<:7\iAgu\=
%jXT*[EOfF+s/a39qdP/4eADR2=.:>mFJP=r&a(a"\ko5I=qrai;X2*AZ`u,fI$3edOrLP^4@qp$6Fdu&Q]'j2_n%=/HKQ#+gQ\4q
%'EGl2VOs>gp>*6V/kj1s(OGHRK4CF9G,rB=,GTt2]?HMT[hH#?hf0U.gd["/'=kgn2aF]4eA>C$&Uom(4s,P_F?F6CY%'c.KDa"i
%kS7hI4R%F3\kc\hqt+S#h;eBJjnDEoSU7Q+2`J>&c*PsLeue,S>>'nKoC[.4GLq?9Cs0T"]('D0afbM_[Ij:omRDCs$&Vs\DR^fo
%pPrhX$Ju5h9@hpY[BJ8=)s^.fhF?sf]`QGpXHd[GFfFR&c-p=/9,m27m3#bcr1m63B()@PZrO,TJ-LWmEFCa"\D8fcs0Cm<>[GQ1
%gSJ4okFd=uk_Xe%:b9,#hedg\gj]RR'Mbama(&ns)al'igXi&]k77+:\!(%Xj]9-4XIg<DCom?9bt!JaKgB]u]6XP'd!-;?JSH[)
%I!HNE2DuKB=&1a#qY@JUUI^?b[sNgd./he#IsV-cX9aXMjhIC9D8W8u570L&SQhT,iV0spKB50H8]:LHFTBZSh\RA7[OU/"`Vc-N
%['lQ1E:,mCI(An:d74-7Rps)iGkg@eo/gT#PtLil5LgimSWqE1e&#9;#Mo74Dl`Q7c`<OpKr=[3]8o,dEi"D85Hk5#2V+Il3RE`"
%p@c[!Y#W$iI.VZ-D'`kEIU!D8Q/7@]lW/2IU[qIt='6t7n%FF;$guVuGE,[/Xlid.0Zdeun`'+;D6ji@2.[jnPSQ1J46q+ID(S0t
%hL\YXq;gFY''.eS+0E;[ITj.?msLgTT<oB,92GJ@GAp_Lq="75/KCc<S*(=[A]:<\X!LDd\[,LB.BhVZhKnh!Mp;%l_cNjlMEiuK
%na.?`^-$^>>Z[QKheg&gjmu,LhdgTt#C?\8pq?@aacihQ]C>IbZ)[$Dj7ThFpQo6$2IhW<^/peqD?`^M5*&;1@Rq&gO8#nYbpCTG
%[95J`i<Fr4WU#'+^K5H2L$t'0-S$j!CmE3<mr&!BDdKV3.i^^o*M-:-\\5V?h;"^k+:I7^0-BVt6e.6%n%V"+`1nTG2o2V'cV87b
%,MRXD-ga:5E,r0_V'1P=b7>XW\[2!)c4\\:c"nDW7rL?BpWna:h<rr8GBNZ9;jsQ0X*8uZ_1t[E2VZX2iR(>BSI`CT.QP%A'f<8j
%kj`&c=D3LblaaJ3Ir/D4=j[o_\@o.jfY<t=I,5s(Non])ZD#mVs1WgfYs[#T5I0t;n5'SfUKV[-?KXWRbhrH1F_n0E/C_8e-*+KK
%GV,d\N^u8PV=!'cF$Vpt^AP*h,5WQgf_HSQPnoIf)BSfi^<""a]")%hT0*W9n`%&^bZC8U8<](%L[E?@s7i.ah!^RNJ)#EpGj"T.
%&^Us5;0u<q5$t6S>HcXUff7R)lFZa<]u/q]n7el:h77qR7??$TQU>8g[aT#ajQjLj:TAL3e"6NrcH\5pYI3*L]dChmrW?]:h+*Nu
%IseD'4oGdMc%04<8e8E.8(D5>i7mk?9)\9h;-%XVs-]K@ghi[$]KP%!(Uq95n"H0B8(Q8SGXOSs9C8'hnXdMl*[Z=ID,nl2gs[j:
%TJXeh:#Ghi^BD.=nbq6lU[sS6HX2()Wpm_Am%6Gbk$EEpBL+FJU[%tO)i)8C=8C:*6]kJ;*o8E;jR.Ll/.)3mimEB_B@IMi^o\N2
%Q?PI`X(DA`E1U0Wf]*KN=l!t6/KIk5_a(qb#9s0Hm\;.jI><9r*@u'7o(DkF.X(4q(-*qYGk#U\\A%&fTO4ZWV[m";r8I(`_Ihi=
%Q,WRqA-@&BRK%`lh0=:Z''qdYY`F:I!NpnL`4:*XD@Slo[;*b$Vh)=iGA'4Nqn580dU.IhFF,*u5r_YIi$#.7SeT4PbF>fGgj6?p
%LVheuY9Liuec8o,q?J<n&-$qb[=$5Wm<g>fO1j3\98e(3H514@PCmIt[bX<(f;QjePAGsZP[kf!T"L@R/1nTi^j;VLK36kAWXZ!i
%TGHNof;T$4K*@j@>(<Qm_:k2B!+U)+boC+]?;iZRdAQk1+Srcf*uiF4i=0V^Po6EC+?-5)XuH+peOF'/rA\/1'p%,`h,`L2lj0t[
%UBXHif^tJDJ`rmWilBWDR?ZdqOGIP+nTt,O9HUZmJ'kTLVMJi8U&IdQ*6rY_I[.R!KMe#3lVmmm%pgNlmf8in0="5*(K*\jE`qKn
%gl-WNW2)JQS7]UX:ZDfQVQ\>Td^r"<9j<Ip-#8q*N8\kM^>[Kf7^R8ULi8Y?iJbilM-9OE11CC)%'sDo@WIR&;P.HbQ/*FKIE!pt
%-8i<T-fcC`L6c>+$l*jBj<9o?s*a7mHHZd:Z.aK'=?r$'NiQVtH]l`d<g!%UB4!ls7Mq!<UG8PVQ?-!YT\o+2O.?@F`\_0b.-?=5
%6k8F??GVTZ,USjo.<V(!j?piJP(R6S\m0irP.\p0!GWc0Sel*Noajh>N>L,,,ZXJ:COl^D!rm-2"BLlX%^!q,N/2MVh#>F[$S[-=
%FG<i'gu7!(/Z;+.D_GoK!CqBm4u8i9Y8>cJ8,^>\)f+$]X[cT6h`oR_mIFOmnt>$ZCmSSNNYa!#7bUsP,WoPMUklh$HEl_l#8?dH
%VfCQ81dbdWCEH3gS9'/R3Vb8K/j1D6->YoUK!".2'=[Jjkms+>Z[#NnmC*S^j:;#Jc)jL4Q,Vgf%;;WK&M8+3(UX4X3/k.sSPP#*
%Ej,&'Ha+189T0F*c"JXTqoT>A@'0!3T0._Och@gn]+;Z9X!?djqm)E4na?'?7GF;coBkD8>$%,j-%?RZMpL)/e&dXAFO7=M/bl]E
%%b;BuDna_-'M`!/%T_kAT7BSDIcR>Di7PM'%68?;5UH?;<6gtF<7s8L(O2R!<@iNIGEf:\pK,p@RL?$$M*D\.-;V@LGR"&q2A3N9
%$oqm?+#L]jf(S"r6-r;/=6T,J5r:Ob>TrJ>q%)LF`fn:(nq3jGL"FV6DdZAT\t;36oHCtIJ+@habnl<P3e_1E'$erd#XGh3r:e.N
%m6.3nJ6&4&)"]4J``ESk.$6+n1c+D#h0U>+hMB&*Zc650XX%0e2PnfHm6r)-<..aDG4[%0Cju^c2U<I]fr3BdD0L36hUf4XHlhHN
%kuPR4/tBS"6s:O1KBea:7ImU$22n=8qmq7FS=W"9*#5`Oq";hJ42n>Qi1%Ck2+(i(oqf8NT>I7!HG93$DZb=WU%qU*,mGG,Ej&gk
%]Iam?<:pcVkM,_^AE`X$nX`a,ESN:_rG]9brcil>J+i]hlD#`]7n9#_^1:X^ZS+5_G9;AXZ?Kc2G85`u?T6<ua1(7;c-UG9_cj0#
%)\t%`06,3#:6*h/V.o$\%C^dpdoq>bg"2:V^+KB3/K=s6CG.m,#*8NF<jH)BHKG^GX5@?'*d@"22n'te&!%M3Fq#>X7/l]JX>cf?
%Na@?eKk=`/D(H\#[Z3E.G[p-cr@Elsfj<_4g<!akHg^Atq#`5PlW^D!X8$tX!K*I#a1?RVp_#HAm?:+f=iBE21$2K0_k'Vd*O@5%
%,0%'`]2pt8CBm=f8_K&fA4?u"o'*(3K>#9.Z/C&;+$KGhjl'm<(Bc*>eu@XBXPOSRjNZ-#R3'f>K0jar]"G<Eo)!^FAf^`WMljW!
%D?:1uGCHpbKpDCJ)gY'Dj%[<>B=4r#E)_1A_!T!KV,#o2p2KQ22k."BGR7U8V7ZP<i-^3_hX>;EHK_!*pnQe3j<jopSKB#0]3!ng
%W3;aS4$MJ&I:$5e[E0^\"s'FJ>/JmX55<I&Ejh@9En95N`TpT5%R7*2C7SEP1,/Vf-'B4#mD=e!h:m[;i,,62#`ITh]3@d+lV$3t
%Y]-nUeD;5,]T(^EXiau1_2oD.JubdWkFc+UgHfc>jkJR!B`j&DU8ro:aBr<0kUoAXgtr%QQdtran,t*;h*Z)NaMmE6$8>3=+kS?<
%h\;.&c;o[([@dA1_DInA_En(hZr/]piKOdliGn$;/"XF[;AdW"G^/u'EcJ?)4W+#]*1(hb;aJ(Q,/l4%2]GKWK]_FYq+(J,lDkF7
%CRn"TG"rdKE^BK3rUAejX4?M*O.daqDE]ZhXQ\^C@_Uusk7.l2Z.TEOKU0=DUV=#0l?,I6OA[t]]L85@O"9Z`Jaa@sF8L_35DC"C
%2KPd_Y<Un2D6+Khb5P?>rHA0OrpA1eE`?k[?E\`+lr<]Q2ViS#Iq88fhRNe?M=nHiq#"hTHM4o%=4V@2mXCZ0G'i2O]ssOn.@f8j
%iWcHSC`_r=qSSHL:24WV]MIi(mOfJ&PHSmFYC,[^2d7P9iShJ^#K<H"pX#+Y:-SNep%<[H6@mY6J`#m6*H+,H>hshhI**HNhRf'2
%Q_uob]d4D';nPtjas6?!gZmr.N:Q=10q\=Ek2XJ,qdO!ud#4ZjP2>Cb[rn&GUA`Q^rO1C4DJiY<MNFeIV/U,sUG):J\[?MrRr+3,
%E20"rDlc1f]\@80XF"IBW,8-`mm#]O5MU_Zm."`_rj]\BhB]\5m(YqWMqQFGNUr^-i1"Pj\H)IFD-S0TA%Zsc`7VU&m_d)d<3Rjh
%>;'u!HgkIIT6p)o<7rBYIds^IW&CEI"Ds'ioO"/])Jq$*Er4UZa$_iBMNPLEdED6-dV7,#7cF,NI3C(gl`M%FNRhs(l43=nm8'n!
%bccCH]Qg]q+q6O/otbZg9:ROK=*+8Jop!0pKSA?'`ID.:4k]HD3ZdZXPoC)Ug8M:N!!_Z14t>-"iPj+0r/_bt0+IV='K<,m&PRT<
%\9R>uOoR`@%6bBW+@4:3&B:WAZ#%MUH+<W73hX;tn5XDJD(LWCQts[[SRsK8qu$"[Z*:]a:gE4oTP*-3:,e]fO00'eAK"-p2Pq:-
%:$.%[48BloH+'ulS:*)g)(]fH)e7`sTu`NU.VX+PF7/&MS#sZdnJ>.Q,-d%VqdoGd512QD&2/O#d*+didsc7V89Kk>MYk`#kZGU@
%[Ei/B,hFMXkbQ]<M<kD_T&BTm)rVHIB]+9kL%<(RB666O[_IL22s19D^0`@=!>a=t9.#PMI.]FA$e\Tol\p+]pe1#6_ZrguQq$KF
%GT%M1g-T)G7?t>s>L@s"-Ku3k_A,l6inDiJ0s:N>3o6j-'Gk+m7spb^?XJ;sK0M36\398M8>"?(DkCo*Dhm5<!O_I!UI<M22q6&5
%B>#:d]mdAU3uGW87kG:U>M*Z@Ha&<C2UNtTS2^B*\(uaOZ;pC/FaZKh>:nYK5NgbI#c%)cAa?l)CjDsa/2sHiiOsGB[`[KNDJqET
%h&E\4`s0Z7Qg\@olRXVrW%'$?fZZm1EIg,1K"6:&n-<(V4"m!KrSG6f^3FSCWGT5!9lNS;+_Rr>'ko:TTMDgtNQpqLpGN@?e^sTI
%LViZ%`?Oa>m`<)G>bg("MeT5ADs*F(HE:CV)J@hT$b(J\MVP\*Hi<H4Jf6[WBaV#5T+CeLcDU(&EKU?79BC-cjk&NYn_7-WM4E_H
%W<+/%2a+<\R`D'=P'Au($eG,$=>&G`(/F:?meH_srPumP7WsJC;uaFN$8^+W(p&17FFY<8O+ui;H-gTI88ua4p\t,7,i64"a!2C<
%p\L6p!Ogi[q>EeO_>Du@(XKko.+Hh_hG-bu2]('3P7D8hcR]"[nZ."NT9TW1[g3tXB?uH*r@c@5NVg-$j;t'NdBqB,#HRO;nlZ5-
%/o>NV$kGR@*?XG#'i)GhFed';"rf<X@aud4QC=*kRM"7Vc(BDfs&%#-D0/g&H\6JsPj&!/7'p="jNH_?L\6p)YjQ>X[Q^;LC`s2M
%O=$5R!80Rbic8&EL!/0((c^379'hDLpG"Z*p2$R-)!#A>oei*[pQl9,<c/^SeADN\kA0D,b%=5p8$U?<d!#_I_l?:(8_!Y6p87SW
%\?]+?/Y"THWI@"CUP;n\hj`DM]Ca?to&IQsi=1[ti(.eC?S?7JIG)7:O5!C8ZV0<^$hEIA4SeJliV7h<+2mThZgA8nSSt;X@kjE+
%oI=F*<Z)WWHjgpA\Tl0`^4,biCndi#Y[@=\jSo/E`BJ=m])QBG\cO)QAuW9_(;[V3]t[NkId=oj/_n1mdsq8T,Y*b\EM4)J:9&\<
%]_Cs'<B+]BGsm4\Z%6hiq):YL.3EF<ZCS20(EX`P#o:<%L\k;@_<nGbX(T^dj=EH$.ip:U>tm-m=*1t&*a-O//`6,sB>sbXV,,?p
%XeXopkLr.H/""9GWplkai=;?\=;@o$0>H=#rD,E-YJDpL/`,Ak-pGQA-MEqEK6h`#>Bp/2NlRW,o^?ZtNgHd0eN?i6oCb>;r?J]/
%ee8)T0>YZ^fB#<d0HV9cB3GHlHt=1:3HFLlX_8!)'fh2_[>hRID`37!cClY63W3FM%N69:\i.nSHW:WqqDr^X@A7WSmqnCP-M&^6
%lX#7T*5;HcId/"-J,!\qh-/Z?3GVX<GGEW2?(gp0?GO'"o(?4ZmVb77=SYgumOkt^anK]7*t%KRR^^*NG]UNWiRS1kr83]&i`"Yk
%hXm+Z77Uj6R0$ZaRljb5HkGF*X5"Rbd_q*kU%?R#E\"l#jhJ>cY223Xo_R65HOq8IdDsUX>3?cNCCrd\*^l=)Lj#^q/DkGEA^B,n
%+BRLdZ[7BMhV?ME:CSDNjqWn@DL>:[ZaMr/o]r&;/N7cET^Le.=Q\i-?DH9oF4tkTKt0\5TS@`\nX5oT0dFhI-oU_OV?MA;'@+rH
%m,_*/b:R's-IgeonF%LB#Wp8WgU8jYU8?m7rj>:n+(RtqRTlG$gkGWDFp]qT\u_D_lNdj4M(`a7,*246@It2?pOE/3Y6!(5lf^:9
%AKBOql"+IE)#?.>#V?Y8#KLjiHr69o]7GYh$?JYs>PNY$>DU)he/R7tH4Ac.Y@`\Gl)-&[Rol+CQ/kT^8utGORkAi8"M9[=>R0.e
%(3gn7F"N>;4%-mYIJMGLa,34,jmOq1X<<1O%)MdGEaBSpKlAik!k9:B&si>s11+<KlbNN3MOt`@WQ.aZ"MZ,r"fc2+]u7[D#Y>PK
%72M]hfb9gp!=af9^ph>Bn3"n1&!:foJa[FH>nI9#JI_Vha2@L9hkBRZ,29!bE4i7m_)s@QP-mWD?^quRGjpP,>2gqeRe:(H&WJ:X
%$hEIprg_>lJl'0E01&hdhfkTHhEr[g&3i,TE#]KC2!;.>$a:btGCn\Vc&F##IXE\+6LE[l2IUma0EcAfO?9naZ':[>a.pCsG_IZR
%,hr]Xa#>u/\@@:`ki`l`>o&0@Zdb0ac!stJ5[@X4Gk@=51MG,dr]Wa@fETA0B5/9Erc2&Jh&pJ6LF,S6hr"XsiYoh3^ODD7d*^^3
%Xr-'Q"PRr$A&2Nuac6Y4e=S#*iu/n1RX'?EqTDC]na%gj=F3RZO)8h;EH)HJd9k2>%]lQ$#Zlt'Dut$!%HGiC50C#;c+mL@7.St7
%`tN*#(m"ZB<d)/1)Zh0SR`DlsJ\&@Gn`[.uk/[]^/f7L/iu=LR>[50koTq?iN#J)F@Rqr/Df@gYVM=X)0-=bE-aJ<b77iZ_2`QAu
%\;'P;Y@hHd7>Al(gXpbfki!+]Lr_N)r%#o@501Bd7k\Qd1T/Z(1qo5pLMRdH=ufFMF%Li#2Bkd>SYldmIZ=U\'UIkV1dHU.d4;=>
%clkA6T`1I3\BY1G`.)KOOJiccO#IsX(P!9!<9gZE:b*AQdWh!>H8<d&N1CUK9,c[k<M=BLA;0&@j'j?JipUo7dbQbI#sW3\?D,;.
%J%OJNAgN4G*KZnSSiq>b<p4idSPeU5HLX9$8AEfo&h!c),kV?6,-<'2n&];:/3E/$%O_gk3BRo-,QS)`3!<*uZU?^/,"-D*>b;Sd
%_2%+pb(`2iBCbg?>2[1o0o1tp*K3>[N$,i94U,1nQ4/.JA-fHedmaI^0Hi+kZAH@$LH1Eac3+$%_\E;.>dfaZ0*WHDK:t@0JiVpr
%_k7"Q4,T2o%j,1]LHmd;3oL?VKjg&G4XAJa7mKRp@RA!@d;F^#-*f+X&D)mInF1;dWdBk>q\$ijMVJKi_RF&1a,Ylc$Q53NN'Ru?
%'?c_A`$"]g"*Y7@LG<oXnSOXs6lZ`8<[1Q_BNE:g#/o64#\`i)Z[d9GO)b+&;.SbLK*kQ\Q\Ia1`e@D'?&/7$0Idd28b:>IdpPb!
%NX`iV#8]QH@`'+Z-@e/"&=OtHRfjB\Wkeg"`?6k+Cc-lc#X^hmmKa#W2hX2qqA\D0muG3&6jji!PT8iI@hQ^DLL-eBZL,Gq"JT#P
%Ta$AMM.!96:5R"]6!-E\UkP._IM+-G7LbpI)CD.3j7*]&^.q!>>eYtjJIA!#,O0lKl,u%,W&mcTjMQQR/"V<*_Jrbp@PDIe.P;8j
%LS70D`f2ZC;j6CuP#IAhR!JBNPYIaK?nA5o67rX(W$pW9G!]Un;"52-"oO7Kf0!^C:,])R$*d>.0ig`i'g\)2ed+<ff$1.q$*go;
%7W"-@ND4J2D0t1Wg;6X!CBb^I@\D-"$oH\lJ4s0'0\4e]9ZsjFRC5k@Uob40,KVaq)A+>0@7"6E(ud:jX)"XGL-ZuYXqQUlf*jM$
%RXn)%;Z2Vo)jQ<e\5PtAD0s?57))UN#Wcu4MP#SKeeYoE%2`Yn0Vb[/L8p\BX`Q7l^o1uLI5aiuC'7,I`2X`<^^4kQWY:1heHS]@
%-NiCSO"np&)GIA5%!&5'6-c&VW3nj/5A5O[1*Jg]"qDK+8J#PK/mA;e&\.(;"P+]-!AGYF$j^#K[Q>Ne]&%V$Cde1X$.QOMnb=NR
%<P<[,&o(B/Y@/'D<MSgE,h+@F%+Vp,#MucgY1GDr-QE^E(BE4!ZaOGWaTV[P=(l(Db<-gr<RZbTfE/ic7QI,"ZIB#A:L7;B=>78c
%GT[W"8Bbe#C*7k/5p-4emeE%ajIfV$)%VEqg,TZ>&.TkV\0YU2N_=/Ue:4V(6.->F/k0!L@=Vb<&r6uLPC?8YSe#_E#W)uF-t$eg
%Ft8YH05s49L^<X`@Y?4PZBjnQ#,KE.XR"i0RqH/36a@MNoaDreW%nfsE_Ac-#]lUme^J2VfQ0c@7MKP<2f^aP.#TeO66ckA&qSE9
%Ho:aWAhg$W-nh3V+ASc2.!%a0H%"*T!k4*s+M`DU(>lDaaFt\<8c20><Y*]TkJD2%Me7nd:ui\CCI0:/+-fYZA.l`*5RgsB4L>Qr
%X/6=.Bj.H%NG>Id#uLA5Lm:19K0*$B"]Q"51BAtc7`=gJf5NPjJnuLJd0P>1&hum<<3)o7g.;:5T4<hb1WPU5W+PNe$qCp2QChPs
%#A\9HP*loh+q?['!ER:WeBS*>bQ_V%S,eD6:%arL%2Fhi&WEf9]]:UekQd5gfGP:I#sH2O$o.*b5fV(Z#b&f3g]3)"@uRb#!B$od
%^ts8tcDD)-A)u?eP+<WNa8I&Daj5tXp)=kok&DJ2`hnG<DT"f!T+/s<R=Vqj0p=AQ*bAu\`riQL!Yms$i[@=5JB1?cO?*D-2j-eR
%$Ge\j!2`;eYK-_V8g&\cU+liTf/9ot?!.S>W8RbrKF#ZMU2UJKHSuGf0o]"@50B"'^leh;1m\dWBuXe:)*J`.5kE#(>\)!m+;K86
%eo/b*GVL$]nF_'$co4Td:^e'?"(0=b'k#km_VmY^J;J]HFclb^'NA3DW^/-EJWY^r.&bu0/33^H(4m)72S$I-:R\0c`;+LA8K+gB
%,StG3/'O;g8-i]*jkoW<`-#hj1a$cclJDT=46`U<BSSS8O?s24F;)(oed&kRP8/#-#1LF""`M7#M@upaK::q#!n:KpiFo4;"_n6#
%Zjfqm,o?eLj(a.::$@@eWtU<OC'GTZ:4P=_=FC``N/%QcehB_cP<d/9ne:@8cs:ZP;[ZP\^;nk@&MSs0"BPu<+[S]g@UMpROB,VO
%^aN)76j4,BH6PobXPRifaH/Q8'gBKLj%aV[F#=%/=!p8mC967u/Rc.-&J-oT_:8a#>V3bB()00d;pQ#meHTPhbs96g_M*j:,Ar\N
%YhWM%:1@H[cs.\8PI%[4^3^V3$;^r"Bl/p=@1^?-#%VPp5i&o:I2Q7Mo!Hj1\G$W0:n[+\L+Olt#KAHn$:#C3._as$XO=m25r.(X
%W\Jir@r?tD!UG_tSj+EbKq.MiXpRdm'?\E_7"C.;WC7A(PSbrCd'cak,A>i?#":d8&qHbp&92C.$%OlXKb/;*&3,eg!?=+1'J^fJ
%5jALU?-Rl-k8M^5l][5Z^?:#?KpG+07\LA"OYL5J^^#a$YQYp'!'4dc!s7M#'B53nkD4aqUE5XBL,#DnBIX]%.i]B9oW/=4nUmN'
%Weh'+$p^(dY$bcZYU&rr!uL?qpefhoUhGOd4U)T0H+!$rQmT8+`-g=%&'DJggUQqo&i??IM?6h[,XL[#j1re\!sDtk5_Di?(a=.a
%R5n0Q=gh-Z&/YD11^nDL8KIpaYcV:9Zol;MOst5ao1Nr?\;1Dq^GLGhJA;k'Zu.Wb!72'l)A41F#X5h\>.>:1$e3E-cj!)7aeT'o
%anHd7g3Pmk:gBqg<6K)LKU/AU!Tg-h>!YJFQ*dbC:s[,U#mIfu7U0,@3AGgTXQu&BaQO\r*`AuIBF9=1Tofap2Ci7pI,NG);-Y!n
%#L')?[;d$sE_Fr>TG?DoNX*Bg6o?e0K)66n>d/8tT>SXp,d=ri()%OHN^7&)FD6J,,K7WLN0)J"Y-*U+e0)co%EM'Bd#sBK"'KPj
%e7@Wl0au<0i_4T!mMF;`55?ZfD\5kPhQDoO0c7.!L's$Wg1gAcUb2j;;[:%l)2^_aBi-"D+VZoPG(to!a+V5C/spq$Z=>5%jG:C]
%`t04f18G"2;(fdmMdQT3>=GP$a9df&hA69o?7/%'Hr)dT)#dQdCej,uMoZHjk2gaiXJ0#lRO2WP`%5qBbTn?Dj4ZO0A$^'JBNVd3
%NX$$Z-9u$")u&ZGj93_li2"3K.bk0q;YhDg\l^ZqOLP=pMBSF4)9?O0$m:$4aLb)Lio)TR7'n@WhR-eU_4e.DmfHF<^8<J$`OcO5
%]ZWPrhZi/C_,/%]*)sRdULtJ`TA#DP$4Pl=RF_WN/+fB#_8npO.[U4Tbf`7H@>sd&(sjri!u:F]\68/1U6p.X9-s2HH4/9]Y-JS!
%L7V*""jdQq]n2XW_aPK;!.)/l:B4+X%Y>J9Y9niZP*Q6uOG>k#L@K6ae)qB4KT60&8SJ=`O>+Oogge=M^@c>D;%0Dccl-Lu9NN(H
%iee-!G`_S5^`[`o&^^65@jiP]9*6,dd'>*T$BbMP!&Xh;&>*P?CbbW(o,T&E*WmW[*OLVgN3R_E)i^W.*5:JNL'g'3io;_;@(?T#
%3"BV,*)M`8T0YH2&_I5X[N&74+C7&[UQB@/l"2=g0h-G,3(X!CJm`!^huuS6/@T.Lis'"LCba/2P't/qLD^Pt!J[`u`_iFGi4.4n
%[<u]g4&c6WM2VUhNU8D(*EubK!ZOQq+IGB,F?@:ODAZ!a`dK(%VK-ncWF1l>(rLSZaV4j&oIYshkc,&c>0P1VfGKQ]$S`uZ0$8F#
%ob[Eg$LJuj^q;[AZ!*G-9F$mrZ;!VnUI'0D_=20fc]br.+[uJgd-*"_EqRFKUOYA''X33_.?.`:6uc%OgVcLV!d5b`DHsDd^_@I_
%(^n=ZQ[t[B)!-0#T[CL_7/]c;i1h5<#LN3QJKNiMahTP*2jBban\QuS^_),7)UK<>-oQD(ElU(Yr%Q,1>[dg-.m_r&#pW*?omkU%
%-/uKk?lNKm(p,+R!$'5&7BH`OQ8CL0O=,<n:aUI]1ZPJT-CNq+A#N<caXf)eKL1t^J3`0W/kbcp8=\aP5aLJB5b3R^eRJqaS>V)/
%'[B2ma%P=pT]7;=]S+G#1sZNYloqW0+=tRVJ1Sa!K9YD-Wn07;L'j7,-'/SKA;V12^97md'JD_a:rTDFMAJeB'X&@lq6YgT%GW/]
%YNBXHcl7.\+]'T!)u(6"!WoeqFW8[3J7&Y;=>?X*0:u0NLsC:=/!D*Y##=+O_^N]K12*3>"9^&=?*9i*L`pum[5#bk%INAQj>`i(
%j@D9t*^sUV(l7R!)\b[t&1U+(#'I\95oVrg%H<t@"=#i0.0>6!>80r`QLL^olZkJ/,8rg]"u)$Ma33f\`fSmr6q?$RoKF$_,0&f"
%S(J`L$d&(3G]V6NX^"imHFK@GH?1d[f]F<sE;PYhYJBMn@H4.3fZkV>*$n&D`ZS4o\nmSb_37-Mfg=lZj'=s1nP)<(aZVpqF1`ft
%S*)kb(mEuahBbaj*a#rpkb&gRYjK4C@(Ut.A"/$m!3898/+J(V!R,.`N:G.X"6t:qA8jbqg4@K8"[gBQ(i8o*Dlr(#GHsOFK$A%U
%-=.Yr$t7n@1!"M=%Al1_q2fFo%We\0l3Ie^Ofc`+2ZuFC"Grr`6!1c?Z]l']W.g.q1.3Zc04mkF!<#PYnYOH[Cai#-[$2.(L:UO1
%KYS%r0UVrs`E]O2Be;[toHT[+S3Z^M`^$kr0i0G[<55Y?()rD;*VC&'),@#&q1riA_qF[q.-/]XR/A1Rr@qas1Bs;e/-4a>`i<+`
%'ViMrActShRomoH'M]ptC.?E<hM>L_&r9l=%*2I*E!JX6#X>S5&K&((&.&3n-sm?`1B^+E/6,lu%)Q%$#(jtX-r,Xc1^tJMXUI(f
%)+4'hK*6dhi<d*4nj-P,Q7-S)VE@0u.E9I!^6dIt&f?:FK[1Sl&6mEg)IWu^g7!mb0XO9Ap4Eceei3cOK8-72BK9[0;7^V,>e*<m
%?E+(*!CjqM&ukpta&NE\=qqT>=n>f3+C]\8BN,!U<`0U`5dBM1\H8W7%*3Ku3@JrW!HH6JLiZu*EO7.4\ZiRq&-Y04f(Mt?GX`>l
%O>n'-J1MMfJ3$gJlfXQ_!k'tV$7hc"d?%@dT^=5:,+g.h1LaB:6Wc+F!Eh<3#:U\E<3ObZ%2CE7<oB:9+!_O$Pn\g!!^qDtEf;25
%+E9GY$o17:#JrUT9/%3753<q66/92pKhF-O!cg(mo<^fN+u!CK+k**(Y,&k'nUMRZ?k),kWM,8u)f7]aaAt_N%_P4'RI/o>B5q.@
%5s-5F7[_=90^bNb.=Y*'7KB:3&U$KO7n$@6XFm!6O_aN8RhBd1-kaY:#f7eJ,nfJTZiZ^;Ij2f@9Kp.B8h[Q7q=MH4G\AFd:2_hM
%Y&#eUf5*.)!$,Q50GEjS-SUL5._CpRQ7mI[%-Aep]#0nj):&Su'TBtI%Wq^?PZrZA)hV/#4fGq,OCTI>Xr<lZQhHE"g'GVAJ_5Mf
%:BohT@k5,-BOTPRWje(XE1[hgV%AciO[c9-.iWb[f@:@2cfl]n^n8U;FC\@ioeV9B:ph`K&R64U4g_%fr>p\\SI?`1+]KDl7M./J
%C(#YbW5/XT,fGQf5Z&IF1eiic"nMJ"TUGQlj;ao1"=qG6kIDGjbSc$oQehaA!7YTNe.dJ-4UT?e7\*0_DFW3rA%ck74[Vmq4Tk4Z
%OK(uaBV)`j#\Z%76acVR;?B(F8IioJg-J+%[>k\Pl9o&Y`M(5&N,TL:XHO*VH0l#L.ZU9Yn/,\!1mlB/B:p;#nhA^1Tb6s`f8!7f
%VdAWFl6$&s'1Z&0rJ$N9Y(M#s["T4Qk*^>f;*-!)`aC4r@dksKi=q#UhZO*!//O^LfTt=2_n_+JaemQ!V7(tSk5,`X9/8lb$.-PI
%;9),cfQ0b+*)X(NKa'DF,A7HW^#NLN6$$I"a/.j'.Y_ObX:QAgK8)!IHl34U)[-aSAO.*Xg@@-JP#%+F"DRYH#dn@T'F5q=8K8mh
%J3u%7*)m(4b%.\FB/d$__Kn0Y^"EdG$>?0^%[6"sF8L1dOfYc(/L=4Moi4,3UHW#%i+F`,18%#AKKRK4__atY=:p0bEdL3/=,`GU
%\ibp=^`W;&'JkM'_B;8VeJP'OE^9SbXJH4O["I$u$M?(fI0/V`a".bdnE7id\@il]bK8`N-@rD,gS<)U6ZEufijMg)a.o$#*=ZLT
%.jb\`;$GPrcG=',X`,8*8u*%_$u$u21D'aY-5]>iL)BAL`kf&eGi93kR9Q@JK)0_BICKK?aB>3"N+,C[j:%`LCal+;H<kIl4Pa"i
%iWA;'Pf7K^baS\_P5["MhW!g]3PZD!f`d*RKfYMl)$:HQ<J@T6hF<H%;K4t=jJ#:t7pcmjMn9d)@>m7oSOdsqUB:G;YXTVfqf1DM
%+\!]%R0=X>.\T/5_>qoWj.<])R^Ua[[>Wd15X\:P5-%LSG\J#frBR6ZK8H<FZCr[DSaJ,'Ts8]?2gY=ld)1i5WGn3XVP#,-MB`aq
%RQ^>F7bLHkP];CC3<q:'EE`L(3Kp.qM[bO`n#1oW&C1HADhdG.*U+jpC0RBp)/sma;MsCNg'XQJIC'l*\!`m;Os?#2;4E0;>i$%"
%CjR"q4DBSoYgLLrUbdf@69_*O\`tll_0D3D:Q2nt$M%d3&WfS=#s=5$pD+F@j3o"O4sj(*8[OTRnAYSZK_306)H`<\+i.GYfCpTV
%7psai'ErR]d)A\7-jf^Z*U;j$2+i5#l<4OIi^Pq1_UOAT.EJfo&`!#VF\>)IH+S[q;mO/-.9MR6jE*'uI[p,KI@E14+@T"25-%OL
%Gq"TE0s>?ANSs;&NJ8>T.2lLDj_.4_:ALQ'^ccs!KI,Z.1bF_H"O[.H)ANT7&?.K#]Ij2[7'.=Bf$,?X;;-=mTJC13]JlUM6t$i)
%L`R)5;n3'^QOUHj/u;8G2kk^oDA44+=r+"*f\BHAj0?$F8<%RZ;1fKh:doUX$0i!=:<&F3N;!im\R%]\/Bg)YrM2Cu;%a+eX=0$p
%3.Nd*8u%P@"."!1/L)MM#Xri/-^FrH)/8$-OTpgq7[8tS2,:D4&`\XO5c@0-$k/Z%1a$O[PSRsS7k_i('9*jM8-;AA1iQDc")gR^
%3N'kf"1Ug'3YKDcJVm>8@k8#oq1307@7W^g(`:DK_+(76;0&Yu'b84"^d'4T**%B$K0'W5ghaDDOC6fbOp-Va9C*g)^pliN-EM)T
%fNHpbMOS"0OTYb)6"$)F)e3;'#@lClXUTO=,@1G*+-Do3:m`1t*J+UF%C/;(@b)&V%W.UWj91c-"G-S)G>f?9.B+N@2&auP0lbN@
%f0:BegN\7)P%(PT5uaO*PL'_AP,WVun<Kg_i?8S^6pT$*5QRJ.'UStqV]oT+Z3Y<k,nl,ei8V74Z8t+Q5^G7Q%A#>8U*49'#d``"
%hALk!OE[&o1bO(LTE<XTQA.XpeJ1\(*TmM<nh?FsTj,r2Q9$+!:n1urSshpf+dDD!J6<2EaD_F2on),:9bbOI5d8Oh*_3)MEBc+L
%D+`+B!Y<B*Zj\_+^r4DeaC'N1%%5fe,p&+4s0s9##_NgKP]I\:Rds>heQj/+pCAbF$MC)EMn35b@H#;_80@;3db.-8"N25\;8Ehh
%H`kJV&t"kLTS(A4PS@PQ6kCE5pVEiFo+1DF(T-NWjqk1paA&K*2-;&!##Og9SIDMC,^bS[";MJ0#ZZ"lPS+"`495TS1cL,4<-262
%l-^Dln,u4VGUEhu3Zs#H]DKZb#fu&uaG%.l3-YmdVlW-6dV#?FQ5C'?'ojr"6*u#m\@Iqk4BEP0O"j/-,,GEu2ji#"D;_cl\U$I-
%;#oT*Y=0V11%F,pOFadUAA^+k.#bT6drG$b;,kp-&qcA&dL[2287kQ_QqS'#(dFl`+c7sG_N."2j`hT%X*(C;c[oT(%I?@4&oh/7
%8[:5d\U$;J%QK?(Ai.au#_jQH9W4._8_iS?M<d%RdcN4=[%OrKpPEi2R4Kj8#;QfC(]k`);j:(WAP8>B,sN:LD*/']9&WgUGM?.i
%ZkS84XZii4UD-Ni*-oj@c@a:Ob"%(!_MT14P&g!C$j3mFmY/]]7pYM-L'F%G-1?rU`/^i+\YOi@U*h#(!HdhP+5I6\pS$##4(tnP
%l6)UY1,BN]A%2<]*1h0D-A#n;W8JErko>U/0PQea$b.L'0q]Z9QDBOU#Za7<:)N$!'*\?9e:OPUL/=XYW#Lh\-Tk5uZF]QSla=OX
%?BXRV8oq%&do/1HGle)KA;#6,OjJHJ]2ouoHCdVjL4L=i0+p8Z#/q8\FdgXL@$Goe#`;BTd.]U?e<a5VH@i<>Lcl`:iF)L/*LMh[
%MEJT8;4a4*BVRHHM@#AZ(F_9kVpV0M57D\o4/"WkVstsVBJH5t$62X,Nl6u6Yfa/Y@6'\J)WPW=PLX3jPKb&@IRNoT9gB.P+DU^_
%5>ONRD^SCk7gCgtHt!]4ZOWud2rIM$D?E>Q:dL?*-rCpN1ikI7'1f0A0H&sm#Lt0<BG@iuIu(WUj;^44W0s.KOJN<7bfq<Kg`/2q
%^ei$1$t[Z-;8q>#RqKp#Ve/aF?e^T05V]a#M%'LKD24,j]D_rSn2<WoM$E(t@Ar.%N[in/E!K'S)J\+M_nqSGl,kb:J+2_^W)R*,
%O!h`aK#_t2&ZS80Y?iJa@lt*8f]_=[j>CA>T_9_*Gf,6HF>/9W(auf^!0_NonFRSFeP`grI]MB?(/C1!IWiL9FaX0J8#R:tn;'A"
%Ob5[Sd:AL9'MpJ=a.Pb2Vr9WO=/TuQ]NHKh*j5:@,I:-mMLqn"'oj,;k,=\qL,)5,.-"m!.UKR2QkUb$iI]*i<!1lCVrXO,]M$Lh
%CmPsVb:P,8Ik5,tRA$-?KC]!qe4Ep%Vbpi6%k5O</_j1g$9UF+b-QA9-NffqjQ.MJj5ln-M;"8jU.e=TelV2c?0F6KFmpS$[;Jne
%0ptuS;(#7cpb3D`FhH??N%;QGd$#"^)?DW4#)tTK+h0r"d6"p'fbD?1$Z;?1b<W()>TjcZ+V;'J#h9heFP@#IE5XGfWEE,Y!,3o!
%Kl3BA[NoU%JK#orQ\[o-BtD="5g0F@-sO"eb1CiiEZ9\*g'5A$2PPk"`pjM'n]Ye\gl)b,Nu.F:j)R9!/<C_0"NDSQMZK7A@6dHi
%_XUqn8&i8?6i4CL1<R7%6dt/]jL0B785l7c`PI^0J#)]H6sUtqbX2sF.Q$:\KhRRqYn=QD8#A1JOfO(i[Nj+1f`D[A&[u.Aa&Y3N
%0o3QO8hi1GVR(uDbQs)%VT@,@%.mp1Sg9EF.s0X"\.QcH4.UW4;rl?4^625bOqQ%Oj9O,0B.2CK?D(>`"DVHG(IGRcb5o\)I@$l=
%D(B',en@LWTqtSed@qAljc<nf;;NrD2j/]IR_4#KTpkQ#0H-Ve^`%2AZPQXt6]Hg7NP`+eL8l/eaAq9aKsi6T;L=LMYrf+S$rYQP
%BT1rqatV>YG3&IS,aSOh#sQ8*Xfd#il[&aUS43d39sVnqU?Ej6b_rf,G@EDE;_3s3:P"npUr(OaN*L'.%\]8>JI<0(9C[ELgN(^>
%jH*"2'lLg2BU$;W5pGj:`loOVUj-8\$rXH/NcU-`BR=tRaZ2h5^P>Y0l]8[q[E821e5K:Sj*NChllN>J_7O8qbbq9G%D4A$2\=$n
%$?_@9G84@$&U`h7&C=Vh>eKeR7X]\i$hkqk@RJ@Hp+YA/+aJ[n_`R/Qi!f!ZKGq`".Z>5&8g=#k0\3#eif?Bko"[Mu\W-q(:REk@
%n1L91EHE+Og8d`nN?T+qU.p'&558kkT=4`_OA9\$-qeGKU6KmfNQC%8:/>h+L1EU^bAM9=Fd:R>Zg7la"^SlU*ln&NoUk/5&s1CV
%?ms398>;?`_&C^(*fM#',=6'Wq$^7[qXWcPSRR0^R&4lK"%J.bA9&_.MDK+mS0?+`$\T`ARq\+="<>?)\ahY$=;<9"LQENY.W>D$
%lR*esD\Z9mC1ELiH>uo\@:@?NCKrhp-D7>+34=>&ianL^pS[W`$B=F@M5OXl<D;/pZ4.#+<%iu@_FmI"pCQ^rMu8?T*)KaK*fD)D
%r)aP3HW^@rda87%,uDYj!'$u6/J,5Let^O2&9rVabi`V1<J1Ro8KN\FOQV70OA8irM'E/BaWQgSJrjQl9,r)?$h%Q%q`/oH$:@sF
%$V*oD9G5m$1E=AtGj=W06dZ&Y.>j5pIg!_-Vn?%[M-?:iNDQ:V?L`G*[NGj'0*U%CZmr<7l7-U<Bcd^*f@--Q(1$E;+?,JH*n@T7
%*,Z9LI=E8->r8a`&Xh,U&2#+s%%+_Z6*NP6c:N?e/4n3_HTgA$E<T3#6T:*WLm#E`P>S*4l;@]&mU;3=[=Ns\fA\Jf1o)Pl<?,A>
%MF:7B3&oQQI%8KHb8I!Hr"qaVVs72'Rq)U>FtabC*!7r;j'^)k#%X5CK.Ia7d%/NglkB^uVDjB9T$D)5;N#r2m=]:381=T)G`4CH
%a\enQBOE%E)rWEFLNfp0%M:Lso23V(9HPoSEB226:YZ5.N2C-!L]J8[UI<"V.,N(>Oqh(.j&%r`;I;V8PC2WCcjQ65X-F(b)QM.M
%dh?YEKB5tW9=4iUOpUJ`5js^?I6%Rn09NP+f^K"A4!qA+,)UF10UlE?.u^/CX8m^J/k`G!fS=]eW[gl_3Xh_cF$)2A71@/&+Ju]j
%X->I+?qAI\*S(LO'K$SeN)>m?cV^8&*k*<!ie%Xa7ROO)'bdatP.m0tp)(rl5pu(V`$Elo)9%bb#FZ+)Cd]ql[U"eT"F*QZ:6#=7
%Vml9n:^t)H%4@"h-tbX6i^3I,7Z>pO-F$k5_8fBC!De&cSk5-4e40"\2\"/ZJf>g`S"V[1\@EOaL129,*VG6[p_fm+;).)S[$3uO
%E<4XH3`EhMM6lY2h<&MWl^u>TB7ll+qaX.,5B[J.r;>7bJ)afn0[#SXf-.`/bp80,ni.3O/dnMC_[*mWH?Gk)!8<,;FKU/rEEr%i
%,18f8T>gF#b0/3b0M%<m'uhX?Qn$dUUR8`JpQNX7\FcdBbT"p9BE[YM6u*3H1OY1R2'\b5@#-!P5BcrsqCi--blY"-S2>PU&Uk:9
%6S)P0*2."q04b9m5`GM(051mbir2J#>b8'<%1uSEUPCKS"MGDGX**NEk!Kq*Gq$6R+jZGJTK7<"V(:q2I&WL]G(Cqa15(C(:sY30
%^B:*IqjA"ARi!?`UN4OcPbHtqo]4,Z"4=oLRHY;)8GDA[GYfj3aWi*e:h3!<KCZ<pOmauc.!3uiL!8"sI\dmi!WKed+k\EdM:CD1
%kTD?`;XXq1HX9-3Mb]'2i[&/XDZJW=)u?.!Y;oR[YD,9_Bqj*0dl$r1>!LGR2:3h3%/R92HQ`iNY@:B(Jk7,hg\6+ljV9k)npF))
%P8hYX#AY>3$[lu2PbqR%LJCD=`T'XDoXIUSA"a>P^nQeA74Irk^Tt0]RW-YNBCTGVR8JX$lH,5d=!;ES]qo^eG80o@Ndk9CkUgok
%o&mk)`Hb7aE++3`UQ[m<E.rOMh/e=($a]$X.60"cTs*=ECkN1[a^bU0(+r#9=WoD&pjtU?GXK?%Q`A03E%G6;*lReX/fo7LM2qK]
%KI`c577KYm'a_MdSsMl:\J;Ak+f*!&7_2&ZnQ/@"=Ke<5]0cu3""##6).K<O1]1g5LmB[+\PND]QS*sP:,S@j\q3f).?cC53bRDK
%RXUB@@B-EQqFYiFS#3h^/mVO$D+qX<d\TA?O3fCM>t@9P^j?=h7B&ecTVO^GY7rLk-tNenSKtkiZoO)nL,))]bg,hD!lTU_$<U_A
%#14(Dj0j$E:h<W013Xsl*$?VjHU><+"@Uc#jg,<5S]+F=7jW^qKUK6!AcP<s))3%-Aq_F6UWTf;4cCIAj.P-t+@JkOlmVi_$d]W[
%hYR!9Q>d`.ii"MOX76P)8EqI]cDfa@?mrFC_][)_%8dB*$q:'Fo$gmEc/X&T%DC<71r:A(%Fl;j'Zj;J'Je15RgiL>16.?NX>)FJ
%+r;^U>b`TjMk0-Ar4!ULh$-4\/buZHBIpo*[7#T=TS'7h<BNafRW>p5+Q-p)TqQY\?$,gHMr"LI.L=@_98LeL1liZNdY@9!EigP9
%5!4CV*M49mjhiisi6Zi."c[]`\h8X+P4"EL\;nt"7.!OGD"Y<LRYTVd0MI0sAEi,V/dBKL@n.`/LVLI:+;6aj.jZpmQnIM]_kW/l
%6\H[I_c'<R0\YDL-"Fsn`Ja`gdd=Xl!!lGX**6-&Sm*(*e#un^`cS8,;7BM"":'?Kh[W`lNCfo<44Y2VL3Si>@FBM+4K6%S)W;/i
%6B31pc,8TN&WnJ3Su\PM*lu9;g2<^l1jo8!CC?2Q#_h7A1<>l(-OhBY-39#:bdR)Ml;ILrG`kD"9apmnmdqpFWlM2[]PWeYJ[&XW
%NrBobn\/\qW#IDMc68'h6a@lNpY4Y@i?T,[>D's)i3-<f*8aZ_IhE54&[nN-btqeoI-hle!R8%tjd`qrd,5oVXpgV2W$8EW#X!m;
%%dh$a!O%MLWa0r%TL^`TfAc(3TE)G7=M#KgB+9E36.QKNh.V9gC+0+R%4/4)nqY5ITbthJ\%:OdAOe&+\@>>Na&,,;Gr\>B08YPo
%\h4DP<o(&B#4Z[iW0#::Wt(?m0^R');*d%!0nH3pl%Z?Y[(go,@IQUE6B$)DOVulsYUN%XfcH`)Yjd)Q>D=VU(N0hin;mutl"L"I
%_$H8u<$k)cTHS4Qj"NftUJN=o?t:WFZ37.hNRXY2>nATCU$<K58(O@.RUA5^@]HcVOS=N"Q67+!Qp=TsF@0+gg>?8STgN6VO4%T&
%.2lV?'<LEK(LR$-$8!Q#S(LJgWe.JuHi>9n)Y8\7J#GAe%Q0$`hSDa0j&&_W^KLfm000ecWSS$Z:[1+Kdt9&c"lGk]H2;*B)@bas
%H:aj6)sHTSn8;aV\)haZ"M)#Sk>7TSf`2qj-uCI$gUJB?)V1e'4nq3-HjLC?^mRV;=cjUjTcr9P8N_Vq&h&5WFRcO6$mQYY&9.RB
%je*O2L^3`V5$j46gJ2uU*G(]u\E,%SST'`h@1:?$P?o0(J.J`BFHMi6*:Ig(a9.>>@1]3RTR*h8A#DT4+q")q%Atd>n)>pKC2rh*
%0jTdeOAH&c%qc6-,B>L"6l6JB$Yd`E5h-TWnfZe,D]7.;c(U\n02=:a0\MTLeC8(QeuD#GlJgOW*fP9M&oZQ&BGqY4]I=VuB6o%8
%VGk*u6Y<0-8L<Xj[NI*9eb_LSD.b]n`[Q\k'O5da"B[g%Ch#</jb_Ga'#hqZ-U[R#:O.V<,6Da/@urC-f/IB!@_$_h=-+t(^5L7:
%@utG,nVfdlNMU(5`j%d"g;8*\$"a8N68&@t),'?kq"/Tu,SOX%#K7,2`tP3mgDCs8]X]p/-@lWoaMhTQehAKB/5k*0$g6"3@:2'@
%3-B*MTQAAj8r)ajXEif3&0hLf%)As4krD^"QGuh*jaL<)j4LrUdfEcTkjY!Wb(u7";:7sDAhd^EoF`rQd9eO]ZQ.CLbL"0])AKB7
%&opbnP\5J#O;DIFKf!%,s,E,bp76$O__\$#ceBKmgp"'l5GT%LF3/\9ZlK\7@3M=Q)'dainJ7LpdS-D1?=\2.*h.lRW2cOJ[b_X0
%s6q6++6-6kJbZ&W%GjlQ_%/YrM?[^7(q&S[/k$]?eTU.=P#75O4'I@q7*>bI![U^h_P!ThW/X0oXErBh&RJG]C;Z^@)^\`g:dpg0
%R_6-Qmt@]XUph(MBuN;E\2';oFqUXe1M[6!,Cm1m';V>?0UQm#mn@R<U1TV,i1a"@LW\Z2n2AD(9sgpnj=lsQ]G%<ROl#A3^_b5C
%?4,P8Lpn0W,oXp2r;Y*u]<uC^,?nXG#60I+0m"AdDVZu>;tokC#6l+clH(l`l/k6B2]PR5n@uG%kRn]V/?`6f10kUDhJ;IrC.\g^
%@RNm=,1N#0>!il<T&m:i(;X/7_5DQgCZq3BIA#TnmktgDrXD(P*/*CaHA.#Q8,1cfj2M&l45_pEao?NS"Cst`Vr<.%^]3-)s6"n-
%huDs>?iK<)s0r%#ci;>#rtX2$a],=TeURJ`hu-p^o$@@.hu;rNJ+Fc]_nU\Ns6KFZo=t=KJ&6.(mC3*!^\m!YJ((#@1Mn"I66fP&
%I<h54Y#FusYqHR^e0_PpoeU*unkc+=GB0Y+>!sj#[XWOpPkM<U=\?0geOq0p]#)dr5-JVn9CS(sV/NXi!]&g7gA*:A-$A%(6K%V8
%UmPlYMI,5:M+%>_4/uVKF-<*6'a:8*VR*ZFkO:H-^Kt(HoKKlBQ;0+uF?S4(>#UN1X[ME*\SQ-o_N+;-:*oH5pRH$qptBg\,oq4,
%CT#LG8J*AD(+C@hHQ+mXp9=,CY6(QjQZ$l!@.l.rZXE[D$[SGYaYQ#OptbFoZYGJmA7$k7KG1f#[<&TjNoCuF(XM9o6fkEJ'?M_A
%?X8KWpQlpN#"nIsm<l?[brJbi3Q,:Y2[t$PDirAo?>i0rQD5/j2q\oHm68^+8]`GnUnE;MkRZ_PRhH\A&nMJIpYuW<m\Mn.o*i$#
%7<F,IFmC2?r747"4;pt:Dl+AA`Zoo\cnI1O4\N43$,'QObsDRpd1ZQJ0%7.hoe&ZDk"EQM%5fEcIMhM)cDN[.Jq.?!+UGSQ4g*85
%c$'<,?(!'CgN9,/<HG553U]J;QtJ;j30U;>lGI_Dk`R:pY()m_<\r%,K8`.9U)9rOa_'="U5I,Z64<*%[KU"OFEFZ,."0"1UY`BX
%!BDEmT?!nZHtb&\!>RAb;0A-8kSrJC>YW1AZ&DObU<s-tKT-%J""7(CRY3NP0Pl8+SC`Q=d+:YnXt(.MEL`LnVGdM/5T+hY!=_i4
%c/):)TXVs5']+kNdEQU0K=jTmBtD2n;1+g'L&?J85?:VKCiYNn5#!sq"EHkb?DLL4j8\=h-kur=V#f:2XqCqdDnr>'*3r*p_i9N^
%M/'O%U9>q_ZVH-=?`P;@KE.s$,-q%Gl7Sq/P/0dQ6,Qo@J8f41(&m]o/i<SWTMinSN^M?;3e>2H9N;"CI/c7$JAR;Uku^&B*pR-'
%GOB,_oJQ(kedSAU'PX7k%)6ks34[HCU3"OXjgM7\55-&2:'CU[2AAot-d(dF@gY$G9.3g*(oe$8)H#K/NYNs<W:\%Y;SCD2A3psp
%]?obq^1Pfs:=WBr<[?c,'N/'e8S.6BJuD]TH@qBce6lToEZqct9A]`GZq449'??5TR,%SH![95s!U5i2R%Q5'Y<AQ.@%AUQ-5rq_
%8uan^oo=XRXTVMj!hH<1m@ekB[t&pV"/2A)fbuo=Mpo>r/_\!!Z%4A>"NJQPjJ_PWmSSVr*Jh'B%TL%kd+:YtgCPdhQ^M&u^I1H=
%S#)AYqU-ci,F#$iek;+q#q_%k/;TTSpO&[<M=)N><)1AXahs(N4jN)POf-p83$oe+'O>Lj#nGN_PX&a#IVC3.WG?@VL3c,:F<mk'
%EASBZILe%=%>A.L">H'pRQ').="9*Q5uLIZUS9lA5i*H9<#!bg"ff*^<R_+CG>\JP)C/?\5RJOX4=U\7C;+I(oe;;>HBH"*%RhiV
%6YRQFQPua?Q!]S09Z+^-BJn"n^1QZP5drgW_[NKAg80N)7&:p#L1u9sVJ2$CL&joec</!B_[b4YAJN[+eCUXd)h#t9OYPuL<D4F5
%4`<\I<=C#H8?#S44cN[bjQ8LO8f0#^osX)Xc_*Gn<FKSSn\O0S;7R6#N_t<J:d*kZVkmu^i)C+jiZ>`QdgqpuKVQ&Tm](%(U.(";
%2Y]C_d+@=tJc,P#dY1Q@j0[\eOk#e@:Mukje"WG7JK#%XTg&;/H:Peaj+==dV_]9<RhtEma#Eiu"g[7r2_(\5^I1Dh2fFb`BTDG>
%V-3*uOX#M*#J6f##nC*dkme9!`afXhAI/(L&0EkchFF8id0na:85!\-Q^Z@hm[2Om;^46,l"<iekZM_6:0.(c/>n^F.?Ljg0:>mk
%ais51]KPt.YMCotOTOSuP=d/p)9]\'(AEZ<2#`n)SN-e-REUB(Nf"]1l.NI^Jls7DI6B,J*k#1g%kCj;OL#,YI:?8E0^E4kqt2e3
%+.r#uGs[)CckPSlB2DIViO_R7^%:/p87YA.(Angl^o.N$ARRS1=b"TAOp"D>%L"h\Hob+n"YX1*OOY(\mm:A"bql'#GXXrFC+pFk
%b(>G@EOQ`VKTF0_:cSjJ*=oLLp,Ih+@Y'DEe&$]"Eq=gi6r@&!b%(3M`/R61kLGNAA9K7+KN'"Q/Z0dh=tcYgFJe]'3&]A;p#:FS
%6rmBf_$b[*'YuJ1^WC[fjJDqYim'*2<qPYN!ag#eH[H3dPH`p60O&IVF1A/:WUQtZG-]kEpQ8%C*acS=g3^dJbiQ*BS5R7!&rP<T
%;Z1Wa/bkd-5OB1"&'!^hdc,jF,RZsWGF-odRc!(V7-A6]K0?QK&PDd*VC*EHC!O0<[mR_Wb,mo6T!@cGQMGRG%D"B9?gZsC=phiV
%phT11!O_"q.VZSlV4!2+T#!:jp]aN<e0r=f]%,[S>#s,U#>[TZ)JVXf,)\jG.UmGZYl]gSaSl96r+GMti:c1:6NRV*XcQ0tlYo1t
%=j`LuHQ2d>.0tPs8j(e0.A$SLYu,RUUk]7&gcM<a4EPt<TN/&h!F6^fTrc9`f6F,i<Vme9IMc^WApaoi[2Mh]E&3,^C-*'9m-p-5
%;^2jbp'6a@Qg#%Tf[^Q+38k<[+FQSp4Q!"hD,=,C33*k56D9PB-,7$UEDDFRZm/i$kHNdoC!?\lS$.2;!t6"NNP&*e#@*1ZefDqm
%e5"&=+NGa(?A>gmG(VE6^!a#16?*\VY'=ni$l&rWabr[/YrTM#T;[@0`Q&@&59CJoPZFs:D^q[k[%M_,#8JI0s%,jX;,@j$VTdgN
%Wq_+YG)/&uYTf`Kdef=?_W@$ShOD#aUdNV<1IYO\kY..^iei8,DG(NT<s7T3>g^S4=+!8?o3:i`&kh-s=/:njBe(io.g!R"LopAO
%*Jo+a^GN)qi@U@3iek7+8sM@qXp@ghdKFSq&U,L_/j[MmD\Rr-@Ts!R<ihPAZcfR^`CA&(KGAJ_SH;\EY1P0J_`&0.*8A"\*EMOJ
%"HKj(.]dlie0+\[]Gs9G.s;d$qFs?mERC?J_Q'j"4b[5X<^cbI)CY),S:3eE_ipX?.\-XeJXudrX"ek2Er$kS/5Xh_NthBG:-Y!q
%p%-_Wl)-k?<#S4cr@!f]B`CZ%+)%LSilC9gjH/A^Sc6J'rh)VZdc\A2C(H/%Mi9-[K',hYIp@GSn9n-Dr"#"dF\tStEC+qX*E?)&
%N%/;V..nEI'e<a3hF&*P"TmdfO\nPF(G"dZ:f8ca6gg:SBLhD1d$I4'^e_[TK`u%+6r[%U>XT=G&9h)N9Z2r@hD=m!303AB2)8'-
%P!5k;E2:L+%C(AV;`7;B90\P*>t^CSdf[1YUO\!$Jtb#o.7j\3lCBCA8d.*)!rSdo'GS=qHP[S-$(IFAqhI!BE_?).FLHe4_:JfQ
%/#O3qZts#]-U;86!hl/+-?.3\V&$2dkS?cB3!5UR[ns+!jJ?ba@nTg?Fj#c-DS`<gSs=2E_`;(PF:/@Lb?D@X>aV!m8E^h^3D.hR
%M?5@[eUhhr\JCrEDNl&-3m,0:%Oi2>ZM3)R:?<*b=3#HY>jb`Wn\gq\*EL2)mKur,8kl+!*:gJ#.d:[($V\(r[uNFX"[0d=)fuZh
%$Q3"[k_b]`e9,I\e,ndjjoQ8P)4[a0bZ)Mk.(de6I;]h\.2FZklQ$Vs\=u5W>Z%4Gj<rfhK4(E019S\=QZ5G8i<d?j1n;(MJ4*Z4
%Sja;o*#g_1P>*bf="0cAUD'+[G]i5?Y:LmUjG9eYn0)NsmU54:*hmIlF"2K\O&69TN1@t^cWs7M)#J["B\,m2j+.gEWT`<k_nAld
%ba+20Zj0#rLK29@.#1HBoQMoY#D+Tn'KA5@FY`n?@#c@9.jULiE)tE)EkBo!?4&H>ppA]B*FWJ"bY$f$iB<K6(dU"!R%9""^3kk[
%:R(&Op7\]qF=JI?hD<?DaESm]?W!La),A+U\"6Q\&_@;X:Jnbk+<7J05[PF8Ys.uD'bM..iHV*`2THKmq"E0G')"ETfm8"8_\GtK
%'oAkj%-GJA"hN]M31E^FLuX>Wnm'<[+mmU-b?%E2[!X:(IMZ\9e^kIG#itJ1_U5q"oVKqMm$$m?+[Od!&Ps/^(D0(j_AuJfe$('S
%pO'Y;cJmgr39N5+.ZPnYS6L%>'S3VlA3_kIBr`7$g_%L1oJP%1)l/96;P-euRM/L#6A_%?5S6&_oGk;P4TgR,B=?h6:]qJR?=>;j
%.FQU73fYaYM@\oKcXF5k6AeTO[CGlB$7QVKFs(j]'^mJU;]B[AGV+go;'^+;G(p^I:?W?&LD0bHEl;N[nGspCP`W2"5>ERF&O(AL
%9fIb?#mrbE]46_\cHmjX;^ASm),uP/_^[F?LdEVggS!O.qO4@D>m(niSPj[%#*BKaAp?nc'^mJU;i=7<5-66i%Oi%%2TQ4SP']ms
%*`#<=:d*\BG"D-(,mK;a<FJT^KbOR<]MHsQ9T^Go%i&#ro@iC'.1oN)FFJr"5t+&<mB^RB<.r<JA(lLN'i]QGQbsm-BnRL+KHo?3
%$7Z\<RgCQ.bi:>`.O&/,/nM*$'i^tSL,b"26,c6k-26R?$7_p'.Gk0r*E7DO?PB7bjId^F-^M2*L/:\Y:e'&9:_?i8dSuARW(<lA
%Tj.pS!ig%nXIs%>9%bCn+iOh99s!G-",]V_'.I5=#q,jIok;%(Wo9PdYDahU"RG7WV=`Aj;R'9rf7tT(C@OmjlNmlTi)_@Wr;jkG
%+C(g?!=`CNXJ/OF^Q)ZDasAV;og(NV7u-):a'T(=a>H*ZHD3bggCYf_IB5u0h),e`#F&C["DnAhWI?-6.k3<M#UiJY+Ir.\=o>:]
%@R;]j's(fPT?n4IgRmu#14&3Y-X>i\c+*]_k\Hoq($YE>Ua0qO]);cNXPNk!#%W6BDEjic'N(=>fVR2lkj3[P?N1+bp2ENmN\DKW
%+&M2rHMmu3C:sP$8c5lU,1_+8"@b/BW)8HG@0^qdTRUF&J;2[>F@\.^LpZMKLD3<A\>11$>+'a.]L5%I>k`c_1qKE0ng,e5.!riT
%7G2_l.EWh%a2LI5QeXCjp,J+37YqK",SO&Yl<@=>b/5*5;F?H&m$0"Ve;^Wa.-liaekcHh[4)Q=o?g\7>!o!j=6N+@7==$L9kpV_
%2t-,i2,luAP;u86J5V;mQmag+V&)m!6UfcQ-O)(Ye3/Y(Ft""r0qU!&S[RbGQNUB-`s&Ai6'e3\_hnugCR-VF+j!Lq.%T:%Oe42'
%RK=K3Q21Xf/t=km//!hJ=!p48!",t[%0I-7=9Wbse/gB>7/=qK%HcQ\Q_,f79#5n\GaQFE?[ab1q3_"CU-'"^?",TtP1nQ3PZ6s:
%<>&&9cAs@t."`MdSgn-kTF<6gE(+;2LQYFL1+)l=!oX]b5XbrUU+<f&hQ\;6U,+!T-9<a\BjubYnN@3A'aN[diAGs3GR.`f)!K%L
%EfksfF;-A]0ap]>`kc\_Ufg(oJNCq?Eh[jCC7SF8\?"5KZnUQ36&t18XdCMQ_49U[&4)rOP=<R^ToXO<IR+>7,?'U@?Ag!EnXmel
%YemQ>W22-`kgTC:><iKU.,f5\n/fP%N#)u]);ef16ae1l&tRuC+ASOH"HDYFk"%rIOXkFM@<j^"23Tl:>%BH%RI`2H4ar/O3<&W%
%^,3F<GOcb)a<s'e0gaQ5NY0DGm`3:'m$HN!p%CA'bAnb:GKspi(nj?1r%?s#29LGW_?9DR]nd8ppjl)S`!DLZY4m2EB0YgH-[;6g
%UNZusj)5Il9;="b-f;1\I'POJ,Es53(nhr.IU#RaI`X`[Di_67VAGRoWeh<cH)R+V6)lid6`!nNmnH*bdI!3[>QtKVd+:\GBp#-C
%.F]5Ij"MW!Wn\f9KM[9,5e@F<!hHkT:RD\i5Nd;?9Ls'/D_"5h_h8OK[>:$<I3"BF0Hm+JJ*in&VlC,$9u2JhmoeGQ$V)"W$tdNd
%#n8u?KK*D7bLA:@#UIBn@TGQapj`uc6oD._#GW[jOQ<mX-q[$lgB"Z%,tr;4Soo_O6jX/n@E%je8sge>>?s$N;*mNZLHp$En-2to
%I+tp.fOk0+FLcUWOJ!ID&jaBi$!]9UOVhmDE!H[Mjr.<KM1UEAnFdaT?9po&[s<E_(I>nCPhb"I[]JA[6`;:rR2juq,QtKU\Hihb
%*M&U5A<;mL\/cP7"OuGF+%m1u\CIkW*FN&:_?Y1ni1135SKK)Gn5sj=Mh6TbKtOkA%MIXIp_Y7RlRtdI<Lis[Vi6"tNE?D`N<HI6
%OZlV:3CE5*'#h80N!5JSdl4Rck&V:\c%h)#Ql2^BDkM?QI7AAjBX(_0,s`MX`"sJ4+.)2)[WaA?0\YOS0'iaX%r,N0jP?o+O#JjZ
%-Q)V[6#.PT<)kZh)-c";g!>OoW[PpsItfp$Q93O'AU'(Ag'G7ql&uuND94ut1BnFI7J[?6@jN6X$!k$@hseW*.46pJc(4NS#6bKa
%(8Me^+-(*=jH!.V0,+Sm!l5*T7#9a@K+)?a.m&42p[QIb]Tq\C>V9hIh#Ho/Q2iT1FFt("%t!sH/,7L_(A_YL"'%SO`b)>\S-h_t
%&3O*7U?ML^jpu`XrY<2jqp[H%-L)AqSQi\s5'i)/Y<^$V%d6t'5r;s4'-W7qHF/@dUg_MU=I#A<_`q!-@8,ePH%70O\3n+M7YhX&
%ZONXJ1[[1(.Fe)8I^#$0qdJJtNKdH7/lQ=/auPEJGa\_nPu>'K+Dm$X3s)(5?#Gr\KZ&VN9H0P11C:1Jr/<DaU\d%?6VCn4".HdP
%lJ(4=e^+n=(d%ViW>bd!^N/ni5Dn5@Q^kd>;GQ\QPEXl78ia:2VnD(i]+n:l&lcLH't0d.H)62LP@WZ!R=%S<X[oQ_lD6p%-*daO
%)("kQO/PJ;Vj0gM.4)9@P+p?lV$E8e;>0\[>S*1[\ob"_<YM*/kXmm2dp]KU*YTra!%p!#g4n!%+se1U9e]Loc+!hE5jH#AM^Xm`
%4#nVpM=k$-I*J4Oj:cZqbFH.h1)dRQ'*7,J$@F$_>,J76!%AhC1lnf%W*CIK!EB/T@k&%YP4RT7ED."G4#[_V=htKrH5iud8C9\e
%5tAo+pUQ6(E"ad,*P+/P&)bCCh!'BqSB(q^pg]WI6T.G!77@O5cirTr!+\S;9Lt_4T2D<Z.J04f7,6k-37d'cHuT!IcC>i+.ZWBg
%M<c\TXSI)oM"erIMjf?.$Ml=)21-V3qX8KpH9+.Vi<kp^9i5Nt:\6)jG$C`fW'J@;mkYMFHRg4lF3rN*WTG*oWZuNfq$]Ckq>:9\
%ek&&bY+4m.]KLCTnfZk-jp(%u4]op?BT"cm'WDj)8Ke7BYA-KM&I584:`+;\7S'DD58DsC.&+u&`n=_[$#[@rH'T$_(q_i81c,Ue
%E;RP\WQIOSD2]<[=M&(I`BHq,@!g5UO?-t)l:@om"Yr6fV32<ZTD#-Sl8+H\?pi)D+4E@#"]o.$`]?9O_)bkua`m'LdTFJaj&$;6
%7d4m/EkO+'Od?,CY](jET9_)qRR&'YDTjP8K#GU'KVU4\+O\ib.^cX^,":1?_FVC:UG7h6PNVH&QLt'8r"I8&96t!\W61mgD^h"N
%*^hc_"!5?KQ)0c)RamZ4qk^pWb&G1Rdt[02dVpqN%G1+-N8[)EBkt5?%8%SBr@?!=nH$fOXr=G$g:rg;Qa4U\_hDl_g2Jbj/TJ5#
%$=E]GX$WZJMuArV=VXQWBNB6e-*q@>0.r&1p067qIdnj^Zeq3'qo.C8MuCL'^Y(8:c$h*dWn?dJ<dte[^#\haPB)!LS=KM+d'2CV
%-cphFT\>U&i[(P-"h!%PQB6HV9Y;X70?L:1R4\:n>3&R*CS7:s,4GPf8gJmiM6rmQ,)?,kC?`]da+D\)QO9-1p5;"1(]-YpO,Nr\
%d@Osb`EDn=g]RGm#o:L/GIIOhIWL!H^W7b$fe5seB_KW*+I*0olk_\[2>bA5dYn'%eO@H+;%-:-?W85_fIm_8.JA[JVqCG='MZo>
%rRPN4mm(daM\W&@05eXAp3SBI&$b#T+4r5e,\ZmE`B+h3/`hQ^@W1)h(T:r\Pab^Y?QAFCf^IA$`I:ZioO>S65cE<g26#4],D,kL
%\CiO\*GP4Ob0>C?GVo:</SXp:"$ROu/]"`"A<>1)pE5Xt1:Z"Um[!f\,9-?79rlo"EWp7PM_FQ9q^p[/?O0B4hgsSL(CT84^C1JC
%9B@92qh9Gpm.Z\8LY4>@c!9To--Lb"2I3ZHK1I>3^gjm9j]ib-'HbtGm+--p@L^pTUu>d%)_P)cf7kfagMl+MP;Z\C=-ENVk*e/4
%.-m`>fD_%G^Gm+1%9H<UE%rOgEO)YQ+,pu8U)K/[rMF%,<@X;7*CS#N=S@[<j,3f4HF$s(_:S$to\?\.S0$>OOOs[4"fg6/$4gqG
%H`biU`-s@"IK-+5hENA8^E5<!GKNL_?S/5M,cGqo.VqCfp:DX3Sg4t&alH)MCIKSnIZ5,RPfOd,B9^L75GAe4T2m0'Vj,82^IUk?
%Z/=mWqaKKEc$j_Y@)"Z<E3WcMWN+T(C3aUg)uBa7*M@#ZQo`38;:t;G^Gp8,fl*sXrA#QfjT,nh74hK`IW9f.@_X?pp7&'n^W9u7
%Z/=mVqo-9Jm.UL;VC0Q9F0t9MM$u$1M\W&@08ba&p3SBI&$]J6eo'.o$4CVBS$HV?<.N].?gOnar;tO92`]'1;g_uf=6C@r:$I6-
%;DrgBI]5oXIMiaaQbgpq7n\U8+uQ!(^K<Uer?@Mh@_Xn!I'MSi/c1OPZJU:*p<2B+^F7+)fe57h@DCI%MZ'8AZY$t^f6so2e9b$Y
%2`]'1PC$]P=;VkOAPfU</1Snn@363\]d3Pbp.H2V/c-R;C"P(R-Y`:$&BU^XGRPDVAST*t_?9ZUf#\a]T<7'5Lbr?FDSq1'KA(8f
%XbSc=^0/@]IjNc$V27-c$h[K,iS)&0lo,,a\72h"M\0Z[ULdGID*kNX*:CGkmqC7UWfSg53f&r%[d4gn:DNa9j^u80n!a47MM>`X
%0g;gKT:aah:sFI0p^R,6f'70_^R(J)Io9&1T9GJr%iY.'jWrN_(0#Vn<4i>K[\,PUh%Fa(P)5N9ng0^3,,8_a7Z1MDA.A/e9'#pm
%;2O@0/!9O(9'!56dHJi(d94G;UU0;'QKDYkA$e2l*M?iU^010qgB7>lEGiaE0m/BP%cCs6^0((j&Arr7&Z"uJL]*6_1$f^c1+r8.
%DP>`:?EMm6H?c]%S9.fu(]-t4hZG9q*\I7XH7mHk@sDCr=@&DSU)&Vu^Xn)4&Glq,Jc4#F'ubVhZKrAHpL:ni>;uE_WnB$\;ebqu
%H*/^q]fNXT0ChM9lk^>;fIo+]fInJ$rA(n90=#;+p)DH)I^+,SqaL$#`I;gUs'i`fNFor>>5!:SaaP,_m+5=^I^,"Eqo,F4lk`;o
%ZX;T3fIo:\fIqoTfe<'R`I>'G0)!J]@)#fCRf1)e./&!ZqSV[Oq$6WZJn;\L>5!:SaeTDk%$un'E&iEShpe\]>Y#$k%2U6UcO4\0
%Y48kR>cF(5E8cN)E1L?-p5AhYeo5nI%G1TEAA9OgU^bomXta1?84spRX7FQ?.\u%9fWRr6<OlXCeNoGDP%DB\)><Cec$jZa9=%tt
%?_Q+*Y)Z`[$]3^+QVbYM+X+aPYI44rf^C,an"5inqrd&$pOe5!:,to>Ws.%F";NRUKe97BIZK0;P@WZ!R=%S<XiOo'YL+P\&m5>8
%N"UF97oU].dn6G7PS-"Cf=M:]Md/K(r=6WI?ghn+MpYkt(SGBT5W&?AEj8u%MZ(uQ8bNPM@_WJ5B"pSfq\9C#8d76O9ta^'lhgk^
%*R!*>?^EAAFle2QU<9$9^Y!afr>n5OoO-?*V3OsFQa0Fip59Z]froUcrE]lk6gWEY#PL5;V.%+k>5!l6CY:B.Xc*,jWn8ucA(\!V
%&+'&Ugg\#N4Kr0/%/ZkJ(&MQ1Y[7SnqfT`\?cn(9fWP[KrAnlLYOa^M9t_M>Mqt&Z0-c)I$?37W+I`8W7b6pm2Q^N)R!d/-JR%OX
%TOPY]1rXoph!>gbj'ob3$MKBHV:i&1LAbGAr[@Y4DLm`E;RQeKIM32W/,%/B?r@DN_Z`FI0"g^d^U71]<MMEV#Eab!_/6\sZA,FB
%gMi,g)T/t4-.m-NrA%Wn[,F'\''pFVYI*8_1dK3&#t.s+DcdaC=0)c'h(SIp8N.?a!hrg4,>)RqY[8N1rMGl5p7$"-9<hjr>dIc[
%2u=U.HXOTR2>\C,dd6^7X1sGghK&Jl8NFJ6:/67&W7gX&P@2-p;!ghNnIegRK%fR89?97f-=2kWQXn[)oS3<J/TN;&2:0YtOnX>n
%-'CKp7+tEcOj/@&kf&"U+;F\VT\1ui]@ej[,[Kb\J;4$R@bGZO&+"LjRf-^\'`5iMfSf^ZAD&W]^hWSdLg[t&4RBOX_g\kj0(t37
%XP#7MR:a3uJ]+j$,S<o?QhHt\^C2NZmLB&i7#Hm#!kHr:XWYT3JS=b(08P[n?V31dfe57[B"pSfqk]:!Z!Zk"S,EE=lkecl'`3T3
%0(sX9DJ-iV2u?=6b[.O2fq`/n!b(dQ^r:cMP%MHGXC]/RGSL$D98`[GG,L8sen3TRc'J;L7'^/(2uCS5!6ottOU_2i`NW]K5L\tC
%Q=;Z:(\Q)gqlSDShgo&!2pKNcRf*STfe4p,`I>om8G7C'qSVY9B;.'QM_i_KrSeBqB"nS59^7/KE8_M<2I*dWYhttQiPM!/D7C'"
%%2XZOE1u]d2I&8uL24HK(p<ffaaQmp%G/CSiS)&0m'h(P\<'3])_OUU-$GSSQ"F,u8It/(\[42o.`&EjK.*,kbC5R7:U+8!d:q5d
%/n&JfMmU!_rLskU`I<pmk@VIh=S@[D".K0pC\9Wkhb-`%5:NN)ccO;t#7^R$Eg#cj$`Z>r.UI]6>>UgfD@*j$ai$h-q3"G.3St8B
%2-T'=,&<jD;'PK/Le8qB>)BVY;BgnpN^ds\3u3K]^B61V(\bKnp,b`jZeq9)qp!g"hjbe@mf56B`RH@1MZ^1"q]18Clka;B2>^rQ
%ONIYHp7$tO^URp#Z!Z;Pe*IlBN&CLOc)$?sU7SMs^XX4qHN6L`SRoR4>P=!PZkrVY$I\:M1s:?O"n<c0MefI3q]20SY[?1Ddd3;M
%nQPWZKfLg[4)6HAp7$tO^F0eDZ/;U'Mu=Fc^j^8(;mB\E;R'Ru"T)bLZX6rXe*In&].EiuimI*/QTGrZ*PfpKF1(?n-d-rL,2"W%
%S,M>UJ7cRKaG0Y&djk'\Me0Z64Kr1':fm!B(X%7VX.<h:o5^@0^C1JCMaaJq03uY_m.Z\8c$jm1es*J8KWJa,M/$JL1=UfL"O&IH
%Ilc,bL+r]@U`tL`3fTqL8BK:NS,^l@Y'oJ_,&A[/N3n"t\"t<LC0JA=QBq3-#qS0=Y[qZ=QQWTSWQ#G[AQ&e[.;Z)hr/I0UVs2`_
%^b)+;#&]9Q'@(QSCAXHb[tgAtbS9gUB`_d5L/J^K&_R1&gaW.FZ4aYodelP`\4,t0OWb:XE[0jFM?JKpKp%T[D@lVYCBm)VXYV/!
%o%i4sJif/<\%hM3SPF-Q^sc@[&'+iV(lrsOHr&#AdsQQj>@<-`-hAcL7t?4C#50#]E`5oYi9`N[,.nHk2sCE"b6Mn4([4,3;iY?5
%I8^=4UE\$J:+so5LnI9?>au>tc?s6D8+k3fbT;0\+5SplChCi1580&e/BA^[($CLnk,R?ek?#N?N-5*>_th<(hq:gBk7`XgciLUC
%K'""`a'B/].RXD3[P&Uje6`IffdXBt!i/XMq!F.sU-uH+m5P/]h6H!rOq!]Ac3hlP_G?omQeQT"g<N[iAp]QFg1/U',HB'!;\?G#
%88*($4i[igRB'uHnQr92a)elsp&1)+HN0M.r-hHLW`_W]CmC,^H]h@`OqOqXQBY;\E_hjTQXoY5RC+;3M[7YVC6;/GXFYh&M.k6*
%QYV`UUdU)?,"_TiT@+nMVf^#R)q!lR+51YOC?PtgE''*TRAVm]gMm?/!nBSFZA7D!,ukZ4"$"lGB?(TTO&\0"5k<.fJ,DcDTfV-l
%dbHk2e&ue8P#iCXj#L$)atg"L9[=;A#aD*1H&_r7LQ'(:3FWjb3!%'@`2^tBJgB[_@N!c/14,$\_PYl-Sg,!;8_uQ7J%Tpt*,4.>
%LL-Ps"1"[10$c7MmA_d$7j):m8U6>;%Cs]S,EU\nEpMsMhFliQSg3s$D_qXa3<G/5$-s1h<T[`AO`ml8?2KYh]9\N"^*B=G\;h+s
%WF/BRFbD=$nlCh;GkZ(gTh';4WcfE16M@a_%_7VLA9<N27tIo1.)=q*!\"fa>b31sQY1N'k=CN/U$UG**$Zc!WpP%kOjXf'fjrD`
%,&MO"OZc4YcHq-%4\%tpk:".-3F]&6_Iq&3UlA'eQ&alqRs%goS;nhk50V`_bAdZ:bi@,i"GY&Xlo:0LAf\):3!.2f`g`:8/lcpG
%FrP-a`DkK,,i]H25AoL5jc=jI60Z^bqB@6#VS8uRWi>GQ,`b"EZ!%5a<f8TZ)sW@HWnM-[Ng)G*#E_K6_/6P5S'ku0^MiC!hIieU
%q3e%mWSM/:2/BYoY9`d8h3oq<S?C'O,LQpGbG\;pN%1Y/lC3B:<%'K%):_$;aF^8&"4>U7pU`*DS#W=!fidU0h#m>0nVR)De^QMn
%97="OqO=GP-)g:)'\*$C"QfB1LAGXNJbg9V[3nPb/La8>Q_^.7OF*-a]Hi[oafHfQ/G1l(jAI1;TH@2YLALma/Wu]i8?ke*:uBU_
%OS2U6jA=a`*iO"WQMOLA3^nIZqr=Eb0gALlQn@u"8Sh+LA%nr2^^Tmqa\lKG5AdCg=H/(3%`D1N7KfJKi1[kp)&qk!bV'e*7<*-<
%I?EAQ;dX(\YgbTH97=)4'_OV>ionZchm!_$oc;+JI;'->l8oPEIBOse+mP!8*>eBChGR\pX>/3@485Vd0g/B@TSiRU!?(0\'HS(`
%]m@/dDt4Fg(YLqcoqe`4MY](PW%WdmqBFOOU;"b,e/+$5;d[[(-)iQZ+L9KU<_Ij<oMSWFK1P:Ni244uX(gjWNGPOH2Q`^fYup:L
%_Y0;l`aYo#7&Hr%/.^5HbJL9BK*gh$'r@mJnqR!I;Z8BCp&0I<qJN9NE0g>A7.R8Y*ik"kgtHMj9mT0T@B6c_o%k:eK1McVi&4b&
%C86J?G>V_38_)>br(L!qBOP\b6FCE@s%60rBQS+"`m9Xt@ROC.B,MEuR:9.JOVd[ZBlqUu:c;$(We2^^GtWPjU8]duG@/i9`N(ig
%%Gaq>J_\b!o_O.8!nGfPB1mZV[JHAkmj4q$T+ofPk60o@K805;6%SkN8[Tp;`@WN1I@$b"P)t$R9Y;X70?MEa3OO[=^.+#c8n8D'
%_b.jDhd<KSdZY:m<f%[Yq\^F&IS,A8l3l'a;;Y2$o`]cle/)B]U:sa[QbDt3;IA'k9mqH$W@uK.VS55tl:](D;I:Lsoqfp0W%TBI
%;',4'hm&+LogRT$Mu&Ik)sW@:(7P(DD2+n$i2N1A@dtl3HN;_r"ul2abu3GMgsh\AOJ9Hk^7+n)9B&=g(Nf,?^;3t;)r*l1Z#ajK
%lf/ZO"feN)c^+E:i\'MCokmXai#\gMLng]YPS-A]?Ub1kAT1RT,hc,F2n5@R@e"-s9517Koq_dZQMUGeW@q;EVS3:te<e!GI7F[6
%qU0E9eCQ'8I=8QRfB8Y"qJ<,a7&HrecO\MAbJL9BK*gh$'r@l_N.[k=Q]s^,I7%p3o`_:nDs6"R?Ub0Z@W5O'+PLQ6\jim&01oMc
%UP7FQg1W2b[(HC*d6`t3BsdC(7=F\i9muhMP5;b1Rk7^Cg"O3(eCR]9[Tp:RM\0BO%sSqV.u$p3n3DDmZ]*$ebGYmpWUBiuoc8jc
%^:;jE;.#YAol\MW?e92\)nLNl^4\!$)c4XL;;Z`&r[-oW$0qC8"nhjT62CJPTtX],TY<lnm7C2q91i+>,q5`;jIRV10?N9J13ke,
%%/%#3jAI1NDU&bC&P[\'\J@b48u,Q8@]8a.F@c9X*HJ*^.hC.]AP7HlcOBJ8edkE%1#.]`!n>^9Lo.mO/G01DW@uMeU:rlFlAO2k
%W@nfWI0IKHP/0k@Z&CR5`N$MJ0:&l:^.<(6W@r:(=R,48V7tT*MY\AZ;I9Veol\e_?WS>J0<HBdI0X5[n$OE)6@H-=0'Wg@;dUZ%
%qU3[&W%[P@Mu"&9W@nCMW@qe%;;]!0PPP?qW%V=Ne<cV'e5mbdI0I-Z0+^R#nNKToC%3V:)^rakTY>u_%iOXOH8a7hZ_OKQ,D,b!
%E)BtY2+;q-,AZR;RoWEo9YI=;5V2R;<01$V?P8d$^-F=99?Z<m-2jRP[%\9--0$,Imk*W3;r:b#W,Jf(qUT8Xmm/5l4lESK[99P!
%GN]M/7K#,]ZuA]1)m+``UW).L>1ID`2?(=hD[i$/St?>S)c6%VQn;_"Cn4o>l5Nn]Ah16#ba(N4J.B(,'q/3_.\HdIV7rXH_l/*!
%7`C/r=Z=hHLn_VW\XWGMQ43F,f"b*h+?/tqmYUcAe^PCH]JT;pf';^t^:0cLIo9,3T+dIH%r1BF">s/?PuN*n<8<WLe9=R..1*O4
%ai$h-q3&s*P1<H;UI?d]Z3L/6-"<hAYLXo^8Vn.^6o=T8PR_ClV*d06%92QF:g^:.9muOf9mqTJe9;>qVS9"8W2VEW/SaQT_bGOa
%AuKY@QMTUflU?6BC,FEVk?^%=AOKAP"!6`3USY[qpi96hZ&CR5`@fWh(H^GNhm%hDoqcLQW@n@ZUC8d?MhRh'09D+gc8?lH0+^j+
%mj7KIlALTA(\OoT;W!%-lAM3[;r?l4W%Ut9I;oWe;dX)'\>\lH]1%-`H_A)DlCk.0,m.#oQOuN3);N^X.<ZEuXmN""=?N&K;M$>h
%I4=iNV7nfil<Cru^'BeMQbcCEE?.;A?Yj7?IBdK$ogS7K9mpfiW@q93<7D^.e'tkH#O74YEN,+E;dZUS9mpFi'_T/8r*elK6dQYB
%c,ERf*.-8dpE5Vh*Um/_S9rgfM_<?qlAOY=g1]H4Ou?JKO[b8FD7$Ut7VhpM;r?pnofYO'e/-YqXk>2GR]ZN=8UX7?AuemH[MY--
%\6;@UMPQ,,U&+:JI<2`R$3bN/UH42D=gQV%+I`/d:A72*EU-4qhbl#u*QUs';h(OU5W/4'%51G(YI44rW:)%2n"1<Dqr\+DpOe4s
%C-dFI)G.=a8]<818UZr$S<At\P"`M6P:t%Z-!;el2-T'=,&<hn<[*:prb=$JSs2dN9#OQ`cfgJa;``u9?`J-`WGdWZqMq0clAL!o
%(\Jfd]r<ZB/8FI..Z9blAq*b:JJmaBSYa%[oQjBlYo4)E`OT&EI2NWUnplMl,!CIR^:79h;.&,>e'o0_/N!.><@(:d9<cn^gJ1W'
%"3?KX\>_+g?Yeqb$a^`CV)>'Imm%<S]p?TlW%[SH?IUo897:dnb"uI3gme.LGMUabW1q#)1omT/dWSmFpZgS/^:?F(?ei1ke<_qA
%.-f!3TY:hPlAOD+MYc=!Q_hDu4IZ+EFt$"2.IW@p^,]B^S"6Ci#EdN&_+f>t*C*J/Ch,n]Z"XsG75><HI<2ot09tNre2IV*I<0Y+
%^@O7Q;'kn4^0"7$qU5=(8UW6@J!g)l&G/D>A%'l'a.>0]4c&/r#<Z#pkFT*3Jdns6(K75k(6"83=pL0ZMns8;6J"\Br-_N$kUcBi
%5EjS5V2h\29$s*0r@:Hf;mL!c'l15pO]Jto7YPlYMG^)>nO7k9[>YICF#B^RL_<jue9<%(qP%0^7=B1A8lOW3/bL.*9mt&oHD%u;
%2>'B=026ku[JHAkmj4q$T+ofPk60o@K805;6%SkN8[Tp;`@WN1I@$b"P)t$R9Y;X70?L:AR4\(h>3&R*CS2bM,)5snC+YU?PXr&O
%`),@;k`GL:3oj+E.WK=)moU$RqMq0clAL!o(\L4(07/DHC[-fjMjjK3G>hk]>Z9P,/bR(f?ds;thG@RLHe$W4&]#k+Gc:(5`eO?L
%@bjJ$EKa0shq0LQ`Dn3WI?V.i(Y_\^hZG9eSh9V(eS@m-EImhX^9iV/oc8j^^=SPC&G=#Uer0CE@];"u65f'HSU4:Bm&liS!`d_d
%AS*gmNVS/%?G0Rm2jO^6M`[8_qP$PUI2NXHQbcCEEEc+6?X2g#e/+$5;dWem<7H*l2t`0H;W#hQof\,,^'noEMsCA#qI1ZglAJB;
%W%Y0ZC?cc:9mruNVkUoQ>O!1+"8/4oiJ]682tb.IdaXWOhb!*[8bo6t?^;N?$$@4:F&!-gYarCeZ6_Nl0&5^iJ?5B5b^%Q*$@>K/
%P^3pu!J.2h%hN;N#(%eXP4rtFiAA5/+;+dJNf(c*4IgAF'3*`<XLp^?e?;IQk_H@.aDQgPJ.1kqI3(BS4I"l$ml+Q/e2"T`1'<Pr
%PhR=Q1,Iij^XG!kR,_eL9"O1b[QXBPV!'m7lm.&W24XQ)]>Mbj\C1iGELiE!iP.P#a_-e:GpmpCO2<ao&c`jbXs&m8V*2GFN!MY#
%_9M7-dFTXGSHiXuatr[c:akYticH4[C!u+^knk!X8:ZWIGn?/*40ptD21i1.%06s&,^_uYRICZ6_M'qHM4IFaN?U0`j.?YH&7Ffi
%0Y:bUL+4g4R@QU]TFSK&%Q*8q"6X\cI):UeauLFUJ!_(KHJUgjO?q\1q](PCTl"a1LOLot7pTKI+b3mVFq-Z?+lp)e^*-POkcXCa
%Bt\"N/*G93,Pl;J6UG"5ll:?(7nU"tI)C<9rZ9td(=W$(M<Xt[@e0C^.Ag^r<;Ru>p)p8XaXOHaS<ApHEY5J5P)F8gQXI19BXLCE
%[)f(3ej07a-1_$oPXrEN8:+5Ym2%15r"D\urKIrJmNLGN,Ggl@pCNuF1UPt*+OLdP>OEYr'QR$7%c\Lu.P"7!Yh.1W+kDFh#!Ule
%I^7V\Fq+PL3U=jKUrfCup"MK[*,9Xg3JRT?'u$@hZJ("N-kLR4(u2jai-[oloYA0aQ;o7"9)*X5gc_IO^*0pf,2mCr&3IRAY@'R"
%QeOU\)q)_NR_4#8#%U4A>eV?m++.\X&F1OjWdR6<5q*)s&43J3Y\SJ:LQAs"fRL0R%'XLQ0ZP%dR]`?^i0A)p25Hf/</UI[.Dk%D
%(@<"Qg*4.`=@]KZ^oehK0c$\NaP0Y^-4p;C4JeiY6aT[<@FpU0N$5NC-kLP2"h7f)+:Us;pkF$%Sc(^c+Y=c+_mXLI.=Y=#a#Cr2
%/%I"g)e*[H?A*6Qko!)ipkF_5hb\jH2oNEKX1#?U8DCZO,+M$SZak;R%Y5%`gXnRjK'ABR+g=]WIX?hq2;]=!LHt-D\Vr!U/&TtV
%<650o5GVjZ`>l=98/<E3iu['?rof[\n+-Y[ou5?d?S).=Lh'Bg4I0b*`c=A:LAmpu\@,YF>5ERWBt5)9QHODd\Yr''[9NejQL"HB
%dbg--/6@YYEh/goq?pl9/JjSFCWj\Q1rmT+WfRXmo)5H#^04i#&AtOYU4cQ!r>dQBoG:T<0DZW>Tt_iU7=PR55_!'dU;&rNr>c!f
%o_2Oj^PVqr@f$'a0ti'39R]3>kcYb#m?a?sK:LpIVnd=n8j6"k7FL'B(J0+S?juuk>,5J.jAI1;TRX]hH2egUUg6Tg4XlNe$^=3]
%#pn#K8r4Pa$d3eBhZ4YlMaoZ'7:M=9rd+<(J%[Z1f6^/?;9[kC?O0`^?gfQEFo?mj\o-a#=J1EJ1*Ti^!>#,LX2iRo,^$Z]YKrO6
%,&r=6^IX2il#-inr^(.QrZ4>poPEc1aHlgcs)c^sX<:5e8$eZ`?H_:poG9MJ0)FmlV8'`LoG9U`VSB8ud9iQ(rd&MI09UB]o_7Y,
%U;+E)csJ'd;"U+FI44s8LnMKkDYf8:3h$'-?S)/pimICbE_&duMq*%!hm#'KrH6rEhh+JrbM]84hHB]5D/ADhp8k.+hHTjBrCqdT
%\+CJ7e+D8h#Ps@DERA+t"oZEGde"=k6IOaadN>=#4l,J6B1%,p2Ve$,Jjg\r)_G#2;Dnp7D)LcNO`=s;=u!,Q!(+(L[`h`e``c5J
%?t69A2n&#L8Fg%&+&%q-el8348\XMb2,u85;oOR"^Y'5K(H%??m@q5+(`J)H9o;@[5YA!mWnXRd]""\e&RFQ/d<3PDh1=?L\((_T
%$W,7+mPN,#f&U`n\X.-HInDWfT9,%>:MG9YAQ-2U:4!OI]S$r#3)0h"YqQ<iS\brfG"P+X>GE@AeIYbIbi/N6$KD#>$DLZ,d2iui
%qdK_kImQH.T2H5UbDu>P>]tXPb7;I0=_-g%>dj<pb-nI@Cj1WTU+Eq=YliB1[WTJsa6[.YG$p3FNch9L/-AQS&%2d\pP-F,0oMm3
%4W3sNe.[_P,,^.VY0L8>MJ]3"lN%^A:6rN'A@_#.#<-kGMUC4%#YfBl9DfmjY/mSNWGBh7\b9ir.lQS0>?cHIXT0Y_*G\-.<b0ab
%SFu0tUoZ`:N"tS8,[mMp*KmT]^iYjH`E&,p7Zl5m0<U1tU8TQ<HkK*f3CGDqmG@?^edP89J7,@8/Wr/<NTR1lSslB_1Fe.5SKXrf
%?2V&k6VejH`D4%WaXO$(\LD#^9sJRM1PLu.`:T5U7sSg.2_V;TnC!a600Ohn49sVQV^>nsE#2RHdaF*-.G=4=!sgd/fJ5Ob)RDdW
%H]?]-c'Y'n,Jd#W\?/Nt`orp7#u]K/0f^g'Mo1'!TZN:ed>['I[9e6fB#An/2Orq1;EEM#d98@K`U.B_8"7tLZphl%#B5mS;BEn-
%5Xe.>)bZ@ACE`Zu13uORq^831rX#S!oos'_=t6paZ*[^dd>B4iYrF0Ba'oT:FG`B2cm]2o6]FF2<ZtRn0ZWn]l@\gQl@W^A6$pr`
%m>LX'riA:sT@X=;J<!]9r,Z87IL\WL:ZT[&jKl4_I%i$_,bHJVW5p?dU20<[&5>>]1ZWW$q*dIPVT@q&I@>O=^s)4SRs\7La<sl\
%=RoUi+eM=)TZALd8f7-PSDg'l8WnCk^Ekn#L3U.?Git1e76@bD'^HaU;P`msq+!ClP$(o4=d.g72-J4]STo/";BIkG5fl#`F]EEV
%UpI:qoBOleS2K,m'6u2UkG7G]P&iCoS<L4s3K\5LER("*cA;_!3%*fk&tBWW4"TQrc>_',%Hfj(i1,`Xc8de@k+((hRWDpK.aEmN
%V2B>[IW8-4TN%Epi_c5PoUBngqNc1X`gd_.7WD1:FMTsjH%)!!k&>Ce*"D)Td;[A5#Zc#ND.@TC2?oLE2<RAm11as7E^t,p!sm/q
%fWm62(`P9b]kgBB`l=Mj$-nBJ^=L:<B5GffOl2bK)]M_MYqZXmCDdSn6*X/+DG]!;E6as^]0Tk-`GQ/.V3;>NbZT!^>[+Y,1O%)(
%9/)lW!&s(7q13Sg<1FUjW?gZ>(?4fAS<m3hImPXRT9+q;:MJ+RV,Fo?9=r.UX]WFPMj*.>/-`pNV\fR"S8uuHdjTla'nXs@F)6?0
%5'[+$5%mt=Zj2$+^/uK<cg$/VH$unW-^A1"S9&),Et1HV:*cgCS9#,(igcqO-oiYi!@lB_Wo]`Qd@<!m_`;^adrN`b.F*e1Ru28B
%^msh#RrbHE3%&a0=O&pmXlc.p\tD#1dQ&/iRChFJfL_6IT"cR!%Yf&!$FA`^`S[1!CIE/;e8^hFo+Ljh3%)"&=O)bdmYZ)JBK7G`
%il*oVH/P1m-0N4K*Q:$[\2ia&X3!AC]K%>P9M!H#Bdk=jA:QZf@uGCPd>R"S3F83h$Ueu08oc1:-aI>dcC)9&S>d@NGlYZ@)-`UE
%8(A@;`3.U['73Pq:6Z,dS27R2F/&H)igb+i8oi5,DU&RQ>L(>-F&&eU`AsX>"m<PZq,,FoPI[!#`aCbRcJ^7uGlUjhc.Ekl>M0kK
%rm[GOjh[1@_/U@33=d8$d7;)7a$6tk+k[bQ'8j%Lk=:,FU5lCa0sMZ:F+,AoB6)#3UgS!I"2\4G_er<4;R.6@e2<aP7`0+?O]AZU
%"%_ZE_`>a;($EM`@EUZNha__4j:18l^s+m[::iM65fGaggEbsp(?4fAS<m3hImPXRT9+q;:MJ+RV*YonDpG?$'!59Q&W;k4E%D40
%3N!]n4h[>+)MM"i6Ep;oe^F=VotgM9og,q\TKVLkp;QkNIo[Yucg-3^6_rV0F'tGX%R>)1g^19VEt%?nS1)9&3@Cbfigc]Ec8cH\
%3C>Nk'>q,GF'slHiln4XS.*KW'S^\G$7jC.JQ^8)>H'S0dN'a]M*!>EF2hfO-[([6SEFh4M7ql<."A<XB6#ro`#;LC'*Zl3kIa4^
%&^H5KOHss^QFc(G\20m?-Nnp=:2HAWErqSr'>7J;'+#X0kIc,KMrNQ_'=[NXkG3J:P&iB$$fW&LM9A;EF5jcliLF!mMK;[=+i-1D
%Rk<fVE"qIDfl54=W4[)(F5hSWigeYdRWDr;.*bD16ZUIK0@!.9:NB3d7rcgNDpCq`UC?<r9NJqbS<L*c1$?41q,,Foj089;VsD4K
%Fl2HJ]$ke!_&hj8)6/R:U/#*'gO<<Difcr9R12\;F0H\<+<qQQb%0.ces)FcAqZ&LYcZ.FOZ`<i+3nscH_d],*;Ss@aolXa$j0ra
%hXDIt4+1oB^>'FhV3t`[b_2I.*fTR\gM?`uV`h(mS\Z2p3ImTA7^/CZ9PJ,`Sau)-fZmHVlUI(DMnb$j?=Na0$*h-m67dRKAaf.r
%fD$EtH<*a%NEj>_Mdq%><QLThOI:8e3>A?];\&O#dWKu[hHkN>]_!qDckZ)pQ?UbhcW2:O#E=hI7S$Q)oEUB&X[Y"b4?oMOg?1?1
%3T/R3c?D0n]X-;?SaGR1R:p547L"/7L2deIfF@;feT[BraZM?kcbRbg;?3kAD)9m;`&$[l-\s.9c7.9P;OK"5:Bj3!\;d%Tm)2"T
%lF%2b8_ZlZe\!Nt?[),1o:=E.:[BE"4jW#K)EU;L6%JUTcMhdgZeL,'c(++,;Z@$q`"g5f7acE&l+W5N'^d7/R8(1)3hnY(NLd#G
%8CQ_Wdp8ak>X`tKM<)lL,\QQh\VFrkcJCm.f-R6i%[+/"OIS>_8^oOEmYO^`L"-']GEO#2n]hTbGiumYpWQ#g"*;d^e2%F!8_F*4
%r5NV=Z&e"9HWJq.5`<'#^9J@Eo\pfOW+Ti,da?O7USfV4f8V"riTU<*H[]*U2In`Q;]0X;2?nBJ1s04dU<(@ZAH.B?Q2t`+-Y1-_
%-mBZNs(8*;gOMu<B!I]>AidBNn4BUfs1:hA`k<)>fQ]+/%#/DGg:jKHm:i`kKPXEo_A&7W*5OoLhKc1]m'R$q#>R4r%Kn;X+A5p+
%DDqDcm6bW2jVEK+$9P\OX!8(E_1di28T4YC39($H'+>JBQ:bPEIp&H5+SYpe^68ZP^DcEZ![0,u]-#`8QU]um9RgfebW<8T97k65
%=-EZ)*i78>KqXEu+o[/$B!L?jn<d(qft%dlfJ(Mfff]8eg@(c8NU/T%h_p;)Kf4:/fE@LsS.U8\IYn9ofPMKEGBCtDO0:"BmiDNR
%KCh*Z1sgk;^O0o1[j,t9;o:Bu/Xl3$$^)j%mW#WYj/^;SlGV73K(`e"gFCPrYZuR?:ZHu8,9jU(_8u$O27V&il^%\Ii,J5-isfW&
%Xu/*X#YM\#*0tI^qkt[Si6[L<&e#6[lq%k]2-aftJ"o"/;9!(B`>)mZQ\?"9?G;%Eq?d"0.L.q<jLVqQkMj?q-LaY0a1QdEUnfFj
%T4g>H*pDbm7u,ih$_5<@:MYbjbc/S74kC,IL)j=p>gEfomdjU?n1t?o'PG<MC@GG(:2W<8iFT>]]ke/cC[C:)*mSgYAC1@jQ49\0
%h%6cZ,1&2qA&h+SJp(\Lp`0d2KelT4E"4j_LJ&m9,V]IhFQ^NoAuicq(,AbgNfesh(FnOGC`ZmuE[U$8s,n<,_QdTlomgNlIB[hN
%_W^3^K8pe3ESsfp\QH++kT3:aN0)W+G[R7)pmS3nYa-c2V%d7Aq$$+K/.FEjA.%/8L9XSPe7Q%(e6I"?[&49N=djMWG(WGec7tl&
%cW'8n"[IK\H^M"gfuH<kPYsjmV58-Wb4?S$!U4Va:=BUsUp@@9Kh$]"f6e1OgY@[]:D0L$UC>o6!pf*eL"#[AcT;WDqslY;SS2e;
%\\&VY#7F4H9?gPrdO$E-e!5oor_]RPp6qbIA)g)2ppp&,X?O9[c.j(l9;+bTGW0_\pdX@4LV!r_A>m"=BVY4)4-Cu]@"S`>E5)<;
%BmV$+35+\W'[6Z6>'1R._rhOiT`YVjk^X*A.P^KP+4T4am[[**,<q+0DSaNi&$idO2VeLkr>n%J2cfY?lkO9r1gb6^W`@HSNMs!s
%n28$B/G\WP3k'U#fo*>;=^,?<WbYG^Sr$0s8n8r_._3o,8[*-;I<k5lE0'G(dTL()Yl:3aDblo-7T@2l2b6(RX!V6r^uc!L5bUsf
%*J7ZEgP36g73M%te)ZOlo?XY\OE[(]$@a2Wp3toY0+I86FlIq]45#$H9AO`b0EuCcl[g(e%VuMYWK\VJ:e&lDmdboEfdi(l"oL`X
%!R"b+LH:.]Bk"jO:!BR$N1K*p[eK):3+de(g'cKId=%-@/)a*-lXefN(D`A>*JK,KL=8ZE]gLNF;]/`eP:3$C59!4LZ9iV2K>@/6
%cl:m)apK#khqbb)2fJeI!9R_'Q[:D-:Hlf,$k93*n`noh?EM-4MR:;_b"59h`jt;f-fO16(:$tV71<,mCojBs"$'(EAAA]Q`he;L
%q:)]g'lb=fIftZ!?;d7CKVl#!;TM5I%gR$1'D6,#g';-@KKX!=akhTgMXTVco#.UOk1mnR2mPp/iCf$"_*+hf[2$^jP$bG#\dV'0
%^53?"1&_HT&6h5^.aIgo7Ur:q%IQuXH5Ma5@3"((08N&+c"?a0fU/h)B?"FdcsF+a+0=@NSa:&qXjQB0q:`5oLP?,4MeA%K#Sf_A
%j`nE%5G?-"OZe^QE[LUiBT=>&a6!Y5qnnKQIf/lgk*OIQX2*#=L9f%#mhL\R/dMC]TZae0#Q$/h6>46\,iL^S2/W<ughrHqnWr]P
%=",g1.Z5DUJQ+d'GlL_cXCW+k+Y:%:0bQhNEel/86H/8*<&##c#M<9Y0bO[ZN.f"ffK]JF((oT__2ha4&/Cj+N.d'"B'@n=Zd^CJ
%a=V6o6q@g-!>;DE6:ZajCnS:5XOVh%+'D!Z!!jFi#pD"<IdY%JS'0`I>YqsNZ<&EdJH@D`<>-C@Fn_bS_9ijNTm>h_j!\Z29+p]$
%6o_`9$7Ao*HY<M<`<A!mCN8b*8C#n`&CfoW`;o,V;X1&eH:2FjW0kEX4]Q+Hrp=qN]_>XNcl-[c`#X$O`"fE.Tb=A>='\k#&d!8^
%,d6KjoHiQd8uV5fF\,"o:ei^Q/qY?Ii<jR#Kd#")MR)S6aTTH37&0sYl\2):[%JV#1[R_b6KA3:TNshkh*DH!b;>-4m81i,6P;.i
%La+4-Yaa1acJoI^XR[A:0hZ1L47im6fGn+M]j'I'3W;[S?Q1<=b'mBCls0ch(u/O/+>3Q,OUiq\BS%R-,`t9cLnI>TI1KD:GSG@/
%W)1fSrZED$,!_0X.$,Vlh#7e4E&U2CjRcNl9mBY#;4`g(]L6r(jIWb4Zc.KqPu&2c&N^Tg%Vu+`rUD*0!Q\-#3Z1)srhSg3.XFFX
%Y>U2AEVN]lX-Xes6r+X7d1ZP`p]eKBLHr@",'q,>(?#oJ*C%06JD39o#>cK(mu&D=Yd.aZ'GWnGi/2IRWM+WuJcJB!oGC(pDX]ML
%T4oq(ZOL>Yg&)%6IW@+PT.mXH)r1(GJ8c#eo]-3X\)re5ZZFd)rIpd*aZX-@'Kq".*N$0Bn-P5R&A3&WWW"]EJD2dhl4h3mG$K^_
%b2Z-Z#bOAqN"'+Sc`k9VQVHGn<9l#a!kUg,T2df[.&.H#4sm!a$ADBPkie%OOKQKp)NK_pVe#j^l<'rjjUX.ao-Tqo7Iq:q%\W<e
%WnpuZrTccu1`t4I&OHMc>7E'8JdDa+JJ@joHoS]\Z"#"FX;jR#V+_s)q&(#,NaZs,W$7gB<?W&+2bm6_JHD8[d&eC?*.4,bc;V6g
%N1*[#KL57P2/q?'KUROLNMmT(6RZAMYiK.7q$)iFZrI$tK-hdm63T#8Bt@p``Pu0\&L^+qam?FXAE0$uSWFEa'\\R),TT,N3kQFM
%oY?heN0tn8El"@J$:*KaO["Ka<jHIUCg9#W.K_(a$b8JW1;IDt&]t[jZ;j!G.)Fo;fC9OH._6rO*n5>aJr#?K4h]l';u;;%Iu#sD
%.qkO:1*'0BnIpF?_3bcE0@1f7@cY!8Ipr8.]i5K6Ya<L`'&cbRJKdp2[J5Z3-iBPL4-@mMP))=$!-Hod>=MA4/l(=m69@RZVWS3B
%EPcgEO("6?.6Vl!:'nt2*;1@uKt6b6Z8gu]<t[W:24Tih)U28O[<@FBikl\[l@,'BdZ!*/b=dE(BnWCQZ%d7)qG.i]0GAIH$k)Ln
%h/+ArKo);"Kg,C(T2hDdX.h%4ef3ki%AIci0(=f\YH^f7b[HhF">S$'j8PhO)3I[AS5Km$jO\iCS^r"8'9UAo`7$>sJ4<!tLRKM]
%ZSM1G4:l`Y+'ra8T2=]4%^Psum4E;OqC`K9A%T\Nk8h20RXL/U:3;$eLF]$f+FfX1Ef8ZbZ,/&;qBuKE39'?ZOI3QT,d<!e3T$L-
%eL;OcruJ"^jbtk6bkONVN3D\KkA^[MG;,iTI##P;f<b#nJT5rs)=^A4fXV`HCU$9j6_#Nd_U7?:gqA/F>TdZOA`[XT\@OSu^f"s9
%3a)W[ouOa5a1lUU5%,3cZF_0+@?;a7nBJk/B>O'mmN.qm-%]I9c0$F.+=AMsA\dNPChu":lD,?RMiGAD4YuuI_52PAYg0Rfkbiic
%:cI5PB'kL^cV+Ar4?juW*2!1I^l6_Ld"/m*8h!Yr@AO&D9;XDK<2Be+'-,1Ol=\_r*mssQW#MeF#pSJ3p2RQb5X_K[H)(W`)H(Zo
%,H>Mu>`I!:n[!T+Vg/;>-f1G,9tHsmpF-r8mpK_+U]MnF>B6YL'Lg;'Q8*T#o9"RncVBrk\E(+kRNRk`M"=X=m&X7u1m<Y5jrEQN
%-WFQI>02OLTP]r\&`?<4LjNP0Y/rtKEf]5Q0X>%sf!Xe!Lk&DiA7=O:'LlDZb;)T+?n#?cN-@Z^,!&LQCj\WgLk(:>s"'gtG*=Ku
%KP`i(_T#*I[9bB<6%Q8"B2I;$JSt?(&N]/VT'2+])r.1`BG#;mVEil1L]frYX2g@NKg1OC9,J9WLJ_LB"h;Ts8a+K-Fb18_S1B"C
%@ge@VG<2S3/Ni/DL0WEK!sq*pA`=TWF+2JQJ2K`,HHpfa7UAhM)gP,&UYbLh$C^Ek852+<9c<atl#i/%,EEYegTK;P6O<9NQ8%n(
%oP#Q=>/[Z_8&aFM$"<0n8+LX/(N*)$M+EDs88A8>l(:m:33;(j2!YJnZ\ttD'Xp9')+^Ln-,Q`^BB`rh0^A`'QABc$2kG)Rm0dHm
%FiK);=!3o:DLS'emY*@\gg=L@H!("2*]gb`ODWRP=o2[7*^Mr;MTW"NON]<g3dn=d1\>(5b9u.Ir<?UBb`:8>GW*bZb,9N9CobjS
%Yj)RKg#_A*A`d;)X+#])3DLJ-5Iq)K=r4t4lM$f?UJ?\q*S4LR4]4+tc3l1m%Lk/*Ia:J(C8BJFPu20j)Ke/)(5s&!*Dd"b$"H\%
%BV!FWUE59LkFeq<UVa*BR*IWDD7CVAmkO.=_AKZU@69cE;$R;f1DL-'?4'*j-;[6\-M-h=_UqArLDmcT@!`jr>c6LH<QO`DPjH-+
%Q4C3,8.TSL>t\aTK#iL5=3u9/*Nqc?(`>.NY24Ym59j=,'(s.QEH/TK(TKG=mIG3U##!4\XCi_'`L-<,Fh%@rrAZNqkiGGSg:a0q
%2nD*M(Bs6s>n[#*<ujHFPZW:'+\4:H&:U=DM_,3]Lr>6^NlEU3S.E6]#aq$C40D*Nl,"01PgdH&-=(34';tW&Om.8BPS\2ejbsT!
%]jg;,C"5(/Y@(mbjm>1a<j-T"'(!-f\H[iO_TKGWPp>Jr0[7<&4M<mPhUd)A\PcGrA\co!0EmIWNM.PWW10*`Nk)"Ck$C(n]=6ku
%D"'<u5Sq>`ZNX)u9qm&mV"GHrJFqZ.8QpY,,')JQa!$#Ed8r7BnhrAKlL4j^F/3SVqcP!;DI4U;NOPg2qeC>'n;Q?<Q,%sl1lTt/
%!tK*u2-p6TDh9t$SnKGU;%LkK,iif+VnptaRFT\&Sb"D8Z6FJ.bmT2NZ#o@9TgjA&]<q`Qb"?p45;)]pL32$#n23KMQ@*e7S=:<#
%p#>@Qes*e,\co@B9,aY.3R'q^1ki0\L`?je&c,Cn)9:*TO=N[?El$o%>oQ`Q4!$#kZ3(qS6X"Y26mWbpNfIZH*i])1K@2\hfCnk/
%ll$Dqoea8;A)'42/_5&tE>s*+KlIpe1<H+mi%1rk?&;9Y)0_].>bW]t"TtV?g&RW9Km@7`4]78>r,S8jJZrj$:muQYDQ>jr&CDhM
%\'cYbJ>]Sk_R+Y0/YG1Vd^4@S$i@S1[i`q<N@2i70I0=RUVaAGn;P]9kK?O\B"6uGVfA4"6*,(#-F7F,*+cSEpiH5.8_J4jV-Oo$
%1:eAIb:MhG%D/-K2XKKVn<<`&C,ne$aYB(%NMA$b"?+bSA4qq!`CLL9ZK-I`D%4XNhfJIuQJBA`aL$$@Ot2VFXXE!N'Xl$FD6>B#
%^F_J=[\U&W3P[m-1\o]`:H*7i'%rRUJ8E=B8=!;`^T=^(#$Z,q@CG6+>l.YFqefabgQLIcp;N?Qe)?LVPpKKSR9ECA+DP;*m-/1[
%<gN[#?;j"Q-EXnX9[l8Jeci>g3J521/!);6\%f'8l%QA%(\X<M*0YbjNgj5haL:.'S4Pg1kp)_eb)Tu2+<:X?ETi*Ql,qDZj$5^I
%Q4eA26#"C(iH`F_>B3!6(E$$seWYkKjQK1\4_[:/W%d9LB92B>oX<HIn/`&7?[p<$WZ7^?.;E1n5A+GC^V4V=lnu&(`C:[S->tRL
%T,qB*mW,*FUuZqhE;GZX6EYW#At;NKODQAH?.eZ*iO(pXf1/2X+H!e\0Y7Y0c*.'eB025S]--K+@YA'<ZW]B3T-6LfDmCf;]?#E8
%Nuf5J\$u$)ElBGg=NJskk1Ka#C9a/(J8E1jG5/S]j'7'[A.5q@K]52'c&aPaMVMX)fnkU,LNsXWB^Kf3d)Cj<N-nj'atN_c;Qk+-
%TZ&n3J;l$Hj;E$%HK7VJYq05odlDQXqQehM*#Q<>Ip#k\Ec?7RAYV3u?l.G/i:+(hBf)=fCc/5m+hm`"$D8Zsl4#AF$u9,SXAF!q
%ATW..,/Yk8!)]UA=,^*tK@*aN(#7dSqdYLRM&Bi[l="=1^nR=%kYXTL._,q+M5>HN!c$s>bFj%fW#f4i`A2&+??1%q=iA3F##I?c
%E2MQ^5(.G/VfbZC86[q$Bq%3LqaBb_Z/15s)BB&<XRX`03'.MdjZW!NSts;P-F_<ea*F<ki&hEfSfPFY\/.HFJ2Wp5U*FT_,OgHM
%`8L^=COr2*M$q5]VnPRq2H+U_[a![Zq/KmfeCq,IfM;a"9e`b^[iQOmP4%XWo-d2]\J+Fm'DL%>L&ghZD@D8BY)4nl5F3`;h9@b#
%f.tfG0FT4sca#g%Rap>3K!(q&T1q;A(hNS0.edC$h]AXU*k$;B<LcE^*7Q,R+_c*iTbsTREYF:Oi,BpAB,Y#<)r%daB?/e-h*,DV
%45G.2R'_V^NPFUp%CA%h:9^dEe]gABM;07SV-f)d=TM/S?j"<'r:jV?RXBPRhFD<c^CgY!YUB\'Z8K3=5%_g<:a,Ba;?C/M?tek.
%(*uMKHZJmZ2!E:nT%\Q'^s@Lnc=*YF3XLaaX^=pb$"iPg9Z\%$_82"MK1J5n90'dkc)IfI$?b4$!TqLn4V-Q)r*%=FD1PM"W3$N'
%<h!<j8:me*EZ.Gnc3e'1]!.;c]k1V1\9QRE&O3lt]iu;&;]";^k3E7,W%Ym3Qk0Lk\&QP!T.(-o$AO2o2Y]+e%por9jf0YW2+I.e
%^4:e@o)T4]SrjQ3D%9UPL/r6>i^&]eCu.Nk.#dC3+MXT/]4)2CHQ,hqgE:WVO6o&V-K)8W#^,.oEUK^N;S`fQ\hAgIUj]+e61H=u
%*BYIXR9"7!6bm^)[_am],g8C/?_5u!SZ<l+h[K)W!e>b<p'lmlm!720'm-$BMq4-5nF8.Z:)W8%oYZsdP(nO`ErZe2"POnc+YHiO
%*_34<JY5:)R+d$i5=<+1jIRf&WHfP//re$;*9>?-JLIskB7p>M'^MHH^)7VDA_Y?B`ZTL4b(:d6!laYB3gr<qR%_#m+GE,B.RqOB
%KC%"cq.WIH0%J^6rqW2da8_j;:&@/(7FhHFJI]D6aa3]AM9U#T!0`o9#1)nEa&\I6dg?5M0/CB\"na@_>U0QLCJ1)h@\k<+j'O"I
%YaER._:=OXc2#oJCP&/G#k>7=bG8?Qh#9TO0Abh0>Sr_UQrtIUk[tL6dl[nGag,[id9Tu7CMK%jXRkcrqIs:Ze;^qm=khHuCH2o3
%e*4@n_FaRi?q3fT2Y^/mL"2N1g.sqAr:"VY;ZT=9j1,`8b`kM^;$k;kg%iu:T]%Wg;R/2Z&*OBLe9qkuEE%5NXU$^/+Z<8X*]#+8
%AOcFugXL14KUKD;[!'H4Sima+g1OqHeVC])64;l*iY.2';ZXpeE5,<)R6Y"_>:D[?-t/FG;Kn>>g.I&+7tf</Ya#:Ra?SN^8g%rH
%"LtO45`CV=^25AHO>ER8P#a&/r65C^V&0qJ8q>A_6/9ksb#XB3@AO+:X:unr9&3G:G?Uu<N@>_OnbNng8hJP0O44rV6"u?#>5_q!
%b@i"d+$;l!D!(r0lk#8?ZS5dK:l6MA[W=D&RURduY"G3sO]eT/g&=9tSJ)jp3<bQd'$W(6-$mCNmKR$>TPIZmfe`9L^-K,t]4UH^
%fK#n$=:o?bL(7-IaZZH%&g/,Nnb=@(>>:[Wrk[)UF;ZEd'8tSoH))In9\ff.O!R0D(fTT@/T'bu`28RBA*O3(9G,#>qIiE"FDiD(
%G8m@'mBN3pcNKd3);1JS@IBFZ5Zi^+;F[pT0Zs_u!lck.f*'4F;/@s=X=R;Z_7r)iq5[5\7i7$RH:B$Nbq[.R_GCuAUIrNlE3*W,
%oj?7q._bV:T2@(JC$>b@k4:jddeR=ZDG/$KY]Kr:Q4D>,G0SEI9La!f.9!)D!?tc5`luLBr1>&XjR9HsT>"\^esS4+C-cb'V7+MU
%9&oTkl5,pHO71k&*Q*Kl0UL,eOZ\;_:hFjBTr0XBa!qY+G-2$V;^TQ/XCoF/7Ap*:XDY\qNAnZ^`j7iU9/%,$&NT5'7oZ56FuM=R
%qR45l*9eFZ5J+t]m0eTYnb+eXgQ$]2#uTQ^ATMn[IVY`hSHsU7&;g[G87(lW7o2<sS#k7t%pYm](.P%A*lO'?eNk+63*t"s$]VMI
%&*OBLZCpeZ<dNOE'itq^7RCp"(d/X(5g'5u$arF@*>-TH%AL6d[e&jRJC?\,>9c>Uh43M]1p*"R'B]j&$k.42n:bEc6iq'B37"gL
%!Gl[hm,RU?hj$-C[s=C/0+KD(__(aWH4[/_K1LG;OsF[4+RDc.E&gk%Tu^7?CgmNf-M0RO`*eUQh.cPkM.'AN(]dAF"*#."?auXU
%7YEQD^u\6EZ3L?lLC*eV2rH'LT.iBBSSfCAG0g[j'D'T9NrsindM\Bsb:DTLl$!51HqKF/hU>oWb0[Q+2i?jrC/P:>HW,R#3U+5Y
%qdA_mHlZK1kZ7Q^Tl.Nf#8`a>6MJ+""lc8\/)NblW5Ibdm+XjKh\JbbST135ce)%j#?fl-H^_ENisXg/Ps4]&[=(QKC8Wn<HbZYs
%Ok6>R>C-4o,P^nrn;D)IUju^uIXZIZWMo7nS"DPcp6o)8b7+/&5=ZAHZW6"tcBp((AL255'[R)Ho6eio'lZXm3RD2rcS>Ci>8;db
%L<]fqi>\f!<osa]`Gp:F[8^'la5]KlQ8NbriAN?Yg5)i(_][7sX_p*dh0MpSions(dhiQfi6Y^r`Gf?<G=\PIf8Tq29H\2<DL7i`
%VK;Y/e3[Scf=,bpFJ*M`,ru4.cVGjW_Jne)2i2;dK&h^WbnZ!Eq$i;(67<)pSc4NKpXmJ)b"RGta)BS]gD=]k>$*)qX+;R]Zr_,o
%AR6N2INB[5R-.%Q.,93SOQI&e`W.:3fc)%DT<*QRb2A*Ri2\m?c=g3B'.eg-#T>#IAka9HiWr>:o<l-RUEpR)SU8&c\-l,l(FBd$
%oCP<Xjh$U"SIlLMr'Yls]kS%'WnTMg6'R43C"9<-9;7$`>W9*C%Z1s@@MjD2K(f)KqKrN8C>f^B\DMd5i#Z3t\mn<*_'NH6`%+]q
%bj\?W^Y.6g:kQ)lW:S"dCci?/7\.[:421K%lJE#sc\n@W=iAm&lgo$trFSEkp^KTs36c13e?:m9QaLa,7qM(W1EM!g:W$n<JQ)Hc
%cIK@R5ArYH.`CCjlf8bp@J!NrTsBO0gR.YL4QU8jaP5K@A)Z)*2cL,>WTlEE^3+q2T'p&X<kgXCQJ+)uN1p#U`B<QI:sMq&@Q6O(
%#^((YH"4%7c(X[&Hi2[s6"VM$+6W(b[0Pf$(PdlPd2ZBrs/nW^6U$Y.6lf69j?r3oeh1UCOgf%$2>EVJU=rfAfe@X&C&]<V)lp@M
%EqpZoG'P!DI[@:t?AS/2(\jF$?,J_LStVeM&&RFHY$&@sR/<Tl($;jm0rH&V1=A;"_DW/Wa]m-)@(6cUF9>EIaCFgYUHaR4s7@m)
%3jtN"^:T$>9K3:3l"_7ZXZd&/;"QQHHhKN1:7stQ+q%/=qsu!<%Ki4'k?oJ;%QI;,+p/;WS,h_[1)C=N4#9Sr,0DIY)!VWEDj0'D
%0a+!C-7u)C1?T)=]M7\8HufjeKk5lln'/[lg)DQ$I>@6'QY\peYqhAXm[Q3qWCeVXG01bkpDucC)ZW=hl?T/hS=#`)"n#>H$DC[C
%@ZEmc)kLQ%lmCb6L<=W`OdYLs+F9%QBG0.^<?61Z\J^lqmP::`2]cUbFcr50\o_W]MfK9dE%.(:&=ID=1_\90H>J_SC1+N&:32'U
%k,,K?"I-46,4?P0DRV#lf1BAH\2fYlE$I)05]^,c3GQk*AU9j%9psgLO6%XrfqU^@D$4fUgR).?Blf16at8Dp1>arYWFet]4&!tN
%P0r4+.@l,+H#,*l5(oXQFqP>FfW.\o-\7i+k$TBeNPmRmI9A/j95`qcid0C6dDu9PY`,3DA).TP^N]+7CQ;`\@U)0o-ZL?>WCr-7
%,'-JO`8`%]%;n-OS[N,tnj4=fMt1>(T\=A^JfJ[=6'9*6D/%m^6_Eqk9!U(e*DiQ4#meB`Q*&&dkD.HSY7=BTe<up60M`C<YTACT
%:O$>@[AkVb^s^i6?Ad_RP%3H)%O"#;'uhC;)IcZS*!('sLVY!XTkcp$HB-;[Rm$b7%.)o1UasoT&O4HgUst<=C*Op],<ub!G_ZZ-
%:/;2#[UN>HlQG9%EtkCE130H9k[8pN3!YYm3.i`qK(mNAG'nr!iEDAeRPf=#DARo%%3Dl7#C2$KqsoNsSij^G!5]=4TEsI0[YBLe
%M[PM7I]]]TMVld<$9>-]blg[>nJd#MHS`]\J>K]K!u/Kn,j32;)a\/)+-,7RiHCJ(gZ20?npGYjEbdHj[c"5+`:9<'eu[ji!$a5L
%*PCU#7Z5/'kAQC:Cre/nM=$Z;=s!X)JK).%3,g)Y$O:Plc:CATpi2Am*';p(HjN/T]kgXND?RI="shFJTPNo'?tJ7#D_4r1;abL?
%gqa`j*&4Z<ITbr<eCId74O4*F*4c/10/)n&@hI&1hRi`=M"$B(3ImkiMQq-t3t0$_&0W%]YR'4W\B_EC+hN/ZllaS:DdO:!TbRC)
%HiQZV"M,g/n1/;0.A\F&6eV*-"nitV_1!jtbAbe]A\MaK1hs_kN8Ek@#80lR7QH>NYSCb10A)C(mY;)-E0j!-LPNmqmdYAi#<>YO
%LUm<A-k=I1QpnYJMBfnOAV$QAV)OFQ!27=Q,)C;KYDG[^r)6C;MHn?U(W%mH!M1-g^fHC_1r&$(g^+JL>hEe,%I$!#L4*5iaGJj1
%1\SF)36.Wa_+je8i(1JLo8MQH;UAk*]#LtM6Jg;M2#%Frjfm<'M.mGkfIX^Xa:YWjC/Gr`?rS,/OBL1LEC`F[kap^oJPlQfTK&_I
%7B+?1ScXto0L041G6pg$l6IZ)$98;M>aaC.cg\JN;Fj8fX[iYa63^]FStC=R7Xu?`)=YUAEC_4$P3U#p"Mu^Q5um94d9Xq8r)^(I
%A:TfWG\"U&XG]S8(fg1K0`7UoGpEKteDCH6O(<'f$m(hrOk8lEqq7`Lk+F[L='2*`2P$@G.>gk%%#.LYU\hZY:(i_2ANED=O,?X9
%>d08q'?;dR[*5=)!ZY-@p'8X_-7;oZ@Zpe_@["0b-jHt[QU$p812'b76;InXI"VniA(RgR31!CgXE#m5Y?<0)lSPXF'^5ER^P!c:
%H6t+DV#^8bk\@>4Q+).u<$^jh:U\_`oT0e\Aan2ioTZ1ZYZ)auZ;`68JEj\F<i!cQPkBH64c?PX;seKker"!7e;BLK/EV3256W-)
%2e9&3dpZB1nr/L!4VMki(W\$@H-P*1Z.(HI\(Z#mg/BPcd8S)*5Y8:]5ji*\fVd,tWff2^I#_$W,lqRO;["G)737\-Wk]C2j>UnX
%aZU4uPrgRB.M%Q3h(uk6+6;q@LY;Q6SdI:.h9%F_H)^i\P6=d&iqKZO+L-X'M!>G`-KodGo%CC@_UJKMR&LFSX$nePb;jV7]At42
%6BmD@^t#hM/Fi'F\nHR:>V>T9[@?.R_UDlS$l_otRh!^r(/Ed52d?Y.@.eeOCYmUY!LC;(-<%<k6IO#;6.NgYEH+.Ob(W>R#:T\>
%-l:/OLg^Yq)`#3WiWs$so#fUNn.cC@`4EZC&qX&[DO%?a?Y/T!-<iOPHlkCm0J4._&MFR;bQkr3Z2t-F3NIu%XHsBV5LZq,RbE^V
%EmFtiG+?rKcg]@Nf:_pQ,(`1IZTtV\NsH5,(Gu;R=RJalfns`-g-2B"mpJOcECNC1B*#0_i=21^OmX*s=4l94%mO9XK-JfbeH90D
%i[21YE3CJE!42:/N-k:<9JnA8Ta3:p.B_MT)@uD@q/t;$<=+]l.*c=QV^-M_\q)q)q8Vq&HrUI/A\og^$[6oJ0pL@V=XP.=Bn&@<
%[Bq5((J[2e<9;!]k6ibZ1V@/c"*pPTXdl*lTNjKN!$Tt8R7ZX_Lq;q.j7=Q*WMQpu[<)OBir]qFXX9Kg>J+=ds.EOf>h'(76<Lfp
%J-FW%,3:eRZ'#H\0[f,1h\]LB,?*n$%DF1Q.;oe_Ruk[`Lup!M]qEpd(r=4X)EK"l>+I-[[6JIjdaX.l/;.1g*F@Z%XE.M@;',ON
%SrqQ]\#3C+1;4R(nE8(s\bVg^2\h5Vh4<S<7+_KnSu_"#fTjAJ7*YIVqK'&T4cZPb.B8^S8FSc37<*8IY2\:8MI#/0]-<,bF0A#P
%E#p#a];L2656r&1J!du(ApghiSpX")**e#pH8f[/(tGFo<8\_:3^_*0_/Jg#_:VZ8c[&d/ZMfJrH#NtM\FE[8!E)BnDSK)lm4.t@
%&_4?"Y1DaFpt7fRDI4N'ft2Ufj>ZT^0SP830sR_Lb3sPnCq,q8i*fF>If/lgjqmI_dkkllmVIU%0YMdc]^=j9reh]l.4M=%>s;<5
%`t,sqYt^-8M3gU[dk"2qZdCsK4=qXn1;3Yhn3$_sD"T%P_nKM8s6&Wrp\ldRpaq_VbTTobVn7)*ZBRi[^*Eu5NHjtd55khFa7\9"
%L.kKI6%b.RMSp&(e$/%_88pu:8m7Rj*A4MBdXl%+%uVMi6`=0\_!/pc2<S?gB*VMd2[48T#YG/,%8-TaOa[YfEfkF:;r75-]VCG%
%+M20!2OJK'SH<01.7X"MhiN2&J\,^$L[OSI<JJO3_-QUKHCeg]>c4q6-pj-^])1>Yo-X>80IsZ\j`%q:beq9X4>;$B!@]V#*;'m;
%_`XUO.'8%V%nl7u*Y'CW@=r%5=*Gb#i4pCE@X:$CG1jrKoh:2aI*T5h%.uS\$t^q3c3i[nLScNlish8cTl<#p?gUuV@*7E%[$_(W
%3f\6g-13Uf.3S2IYW<DFXZFNbm>SkJe^(I']56^3l[<8<%^nImHKsn&k;>:mHneUH2!j_CimbLF[nVqsU'<[&95>_kCn2mSTgB*3
%+ZMVA5>B&s;&H.S]A-mYN[e6qKDY2j;k#FgX1lU4rt@U=:@e>.eo4LtiW&^JXuUS>_Z<K0!KL:hPDbZclQL\Z\'S_=#6Ei<hj?`@
%r(<2GJL]Rd-^Wr%&Zjj_8"(B=@6%g:<RHspedM!fK<WrRI60$?%09)IY?M!-`TbnO&bgW0Et@a<bG:+RP2uO,TnT6M2M`dOGV^'Q
%,P<u@M3D+*P)WiN3moNj!G8-/V_8@g-%Y!.>AYuDj3Z!E&Q0`Mj8p&%&`U`GqB>sagi/f.*@s1b3ZVQ:h8<GQVi;Wn8s<24l_CHB
%D;5md[MX=Cig-pV-8$JQD\_)uQ*V8\(QWWZn:(CN%'EO+o%f<kf'Cm,*&*<u^58.PqeP\>n\0^iPBtlp>+ccD20BFK0;+rgS(bft
%:.@#'"aSUqk:AlG9'@#5.=6*Ln@`<_IZu'LZuQ@)/83]]>F(F9%0fKt98+\mH!<dg"k)o9X=kH-E4e5!E%+I*>Z#?lQLEHqC&J):
%?flYQMC;4R$p#RnNW<YeFq8N;j%g:&8kVfYm1OgWVgs%]a\OCF*;YVIN1U9JRm(B<$_I74&`_Nb)_%L.&6+'t9t$6O;7ChFf=aoL
%12B$M+l>]BYSBcbK#5EE;>G>R=n>,)Re^SU.:5M:p\<U0RklBEOKp@@Q_iiFVq!^OP%_F?g*6L=njXE^'0$+Udq#7_Mo,B_2o%Z^
%*IPfn)WCh[b`l[%N`W#]YS:@gcPX&,<pC=aRnW_`[mi-TcT$h$d';H;/3J>Ph8l,'[B;GJAu*c!UB-CaVqpg@5R+4hFZ=S`P;(8"
%mUO7k927m*U:CilINR)B3QTqp2&2/4T>bqH!D#R8An9Y4EW)co(>CngA;[=ZrXTI,\9QiuVq7@4gqd-@n;DkaDoF(m7/1MmUG,'k
%77sMc"_@XedSfgbIY-G4n<rA7!f>t<Cu=IFYlF.fmgbWV[N5d&h<dW,%-#n?$D;NH(\/5RBe&]DO"QMCo1TB62YNl1mAS/35DfLu
%<OC&elGFQ([]n<8Qc<4$O-MM-qD3=M.;r!<-!:mRh5l]5_U0e&a:?iO2a"*L+>qr52RVM6dgk5cGllhodC@g3<`+/CbC)<jJFbNY
%G!O!_Z-c<65+n:\gi2k-#D%?\SN7l(AiFiCDd.,FW2;W**.>D['=#AKVtD:F)u/oWPjNQ>l1Aco(_M!>(!g)$.S:CkT&%Tke3k:<
%0(]WGEZ4Mi$;Z!19Z0EWVn5<e3ZnrF2g#Z"rG,3P<1L:^?\:/OMt:[sT*NmF1bT!UX#:8E](b,q.&'VUV7GMnMY+6e_8haS[j4''
%k>;).@gmHX0q0!^K-Hh)SpnP*:P?QJLPcU4_R3uPqUP`(*\ks2HE'2LguaX#B?>DM4m]1s)aoi5QXuD4&`I";:jCE4QbP#o5f[OO
%bcdIo%I2%p-r1&'BCp4"b0sltq*5g4khr@Z?4S0U@Uj."Ck$q+TRd:_Mhs7r<.l/8\fq9*CeVFMG(KuZ%QZV<Lc':-R%oTtF;3b8
%/KK@O%0mPTKng.f=g.q%Ti*HtfYF/9.s1=obE"n#=1I#_g0b$=-?;0b\>'KG>sSNQJj)g1m77<%9#M\FBSHAso;b1"]T_jiJT(`W
%J1FH8>$@U&IN?HJ7'@@S]=o20(ups:*9`c;lmCj;d1n.HTmlimH,9kM*YEPY@.7/c*BJcU77J:E')*oc)I:u&(3Fp[9esf:&O)Rm
%P/@dn<gm'#US@@\XbT2+735jXq@`*(4>=5'"eEr>`,@$!J<"rZisrTs5?#\l*sEXDbd&6Y3!u<D$5SG`<^8s`O5g_E=8QY1Dg>]u
%CIrDLq(=r4E*ib#7]RN!JjK9*3cY<3*5IOT%-Ye]>SgoOR3eV-;T""A>^IS0,9kZLjiM6pqF.6mno3;nE"C_+/Ok(JYO2d$*JAF`
%GVV?7C3Bhu?.;baApEN$Hq8]@2E^W.'k<hIG^s`3&_ZY=a>?!j.#*M3!!nG6El173b,0J?4@gT_^6tAMJ`j25LRU08aS(.&4`0k&
%I"5I@,k1nTX+:PL>&;V]$htj`Vi/e1Gc;=FRpu]Yh_Q2oOCkm]cZ4@4NhZB:\CmMiF.OG=KfL7n+@*\/l0]t@FX6D@Ask<\6""WM
%mu)#oOPhBHIFoY\1@Rg9-+?0JrjBm0aTqoK*@WZ/7YhQH,KiQ4-@sht,=IH=`Z70L5>H$Jkk%+#\XJKh&>c0.W>d!Aq2_2'*A]@!
%r8RIr<X>d2/WfV2j!\_tBWt`!qi+f'qTm)-DHJ&M>Yf:U$?;p+X/lk/<tO)l=<R[!2Q[P]pG&c]bMR2k+E1L-#W+UD,cd<c$ILM^
%(t6S6+[M]R/Ij+YeP[:(9brt=f`6\!9*Bgp'X<0YZ^,S^>Q50<&a+.(0c$f$h%2KqMa%j<Ad#VhaW9Mu"u+\s_IAK1lEj.F#fN!?
%Gus[!-Giq@Tl*>eSIJf@(m@Z,@qGh5/+UEWC]'Dg!b!9fJ7`OUkdCWX+<+N-`luLLJ\\`I!>6fHJL8?\XeU`Se/5.=&nYdoi%V,r
%G)7r[!R;F*?e7.F$1Th3khq'H1c6FZ,UA(W5$9.m@_2?O/UFb4%Ue@6P.9cI#MLFu!LP8jRq:!r6kN<`l0jh(JP\*mbRSO,+3@3-
%.ecgXQo4I9/t2T(LM!,sD+D$!@'+e3:9&S@Ye(NFGQ&a@;!C?nk\`__T21\/oZOmSAueI.8uVX/<\_CD+qpL]fqD)oKd-%#'^8sm
%>UWLadTDH"&4[L^(s(dJ9_upL/<]c[T+)PLAV1/[AnL6N9E,JW>:a_uRS%R1Z2i!=C[2L`Cuj%#KVmRW:psV6BDs[0"dYF*gj`kG
%+I((aZ80[mH&n,^ihkTLRkHNh*:.>0"efhJ815H&Ob%D;TT(2nKh.Ij4&LgpRJ38!,A:6p(j4<Fkfq?cF&9/ObfT\,BEd8CFfDRN
%@e>_b?S$6+aGN9^>;6c-k!Z4kqZO$WlkiP(6sQW37PR.RmZ*rKaro'u%nNKt2`>8ubA?E&>;Hm9&F*`LR#;fp>o%d"c+pngZIufL
%K0Zb1i8EA%XP#(6[^jtGfWikh@,klslBS\MK;!!i=Ac=lE,T?li)-CXK4d,l8F+^\/h?luV@>66bq'4>Z8"X(D"O4"*JFn@fPQV1
%@*=9UDE(gUB`h>]W\22t_9b#V0IkW_>e82XIE]?T;59[jZ>V#@0U29Chj>oJo>Y@4YHi%Vka(ILh8kC;c\loj,PP,Gl\9eb[B_5K
%=>?OV,QA5cm`2d.(8XR^aheWH:Y9-B8;J0#G!BdZF'(>@J;E/dN#W//2"F(rm]O`]Z'>DqS@3f#F,0rI$-%^j6_rEQ(IL]EASjXL
%3l(<$&uir'*GBcK^nqSb9$.Rq?J)e15=>]J\Sg6UJKGUa1m#*IHZ?D`jphtI8n<:(hUM4/n;pRtjLkC%M2m1u=bt0%:b1X<o8k%p
%GBM7>3%Fp:[pf$@U%,/l+'>>m2TbH^?u_05V6$f[C&1p4[s]qkN?=+jEM>hk[13!:mZ,`JUgYXE[DaJ%@U(fYd:eP-G-"&)L^YDZ
%Op,A^AU+@(qXJbmR6[p^A'k_\=^'ZX2NWb*gI4N_lTsYB0]peY<Y4%_@3Z>9#'oq`4UkrLq^4G++JZ8OhO&r$).^s.rbelRoQFO(
%V[O`Q*sB!q/i7Qi=>6E)A2\k[q6;ZMheA6mD>YkN(G0G2)9>..M%3aGpGHb,6kZeZbc/i/c;fk\Xp]@Vp=[RXhuP#f`bZ.L&jp;Q
%gW:KL+u7i;eKC#pQ;^oq,1fS>e6qm"^hUP-C>XePCY/om0%>nF(%%nX.bZs9Nb3FcXR`)ghZQit,!a6$#q0M8!he>ugFc#BRn>t$
%CMYPqnDgRLmP>2=2IRH@6T;X&,2O@K*$"]BLq*'u@UiMh=7JTr\2T"U=RdXV.&Ih=XJruC0ZGnse/.X7UF;6TPohKM9=iUV-u,I`
%V!E_]+sHot==>bpG[*[oYigo3#X=8d(c`WmL;'(L7n?[;&0Z9a^@=gomGK.!=_?u'&`?]7%"`:Ndc3T@im/@I"a2/Z@-gk&*^+/=
%T,hbr-ZH,p'fF"na#ZliGsR)F)[:&.WA:lI"tI$'"GIq_5j@bq+E'?7:6&d[e-+8!n9gKg2HPL*b72%$)1l]bUO=KDDPPfXD%_F)
%R_<,Q#!4\H+$bi\<RD"/.TG&282fPuP@UV0?6)OWTG93W(e"<33ms*^QO]0%Vh8NYD0o?hGA`Cgf0i\ML]rsPfKh:BkP\X_?XP7,
%CMoJ;10f&#n^9\p;XqGeEF!+e,oJ9W)k]obOr`8WS=7gNarUhoHUY\X#A$-X=VVEa]d(d)iZT/$WB@PaJJ$B<hVA/^>YTGC$$L3)
%1_E+A@eMf$qUG37ik..2^rKP"REOWVJhN$WmJ8uA5Wqn'(\M<Nn>HL@7HM>0m`c#K(6B@`*I-d\R[Ro<NX@AM!j^F`1mT%7FW#cS
%RE@nO)Ch"d9Ca,O.](O+&4H<:SMOp=cpJVY28YrBg%&`bVnj@(&=LZ#Nd`Vk8d>H97lIi9)"kFO717o;!HfD3.9++c!+kcX0^,3I
%:Zta):u-e6bq!>c\.$69bf2h;6OQ<7_`!A!>XNe35mmBQj!bnPcHnhGTWO:/)A.4E$->j^[kq>7eGj><ADFGQM@ijg$S3cJ[u!g3
%&c,IK$S'fF3o$/p>TMN5;Pkj1':Ymems5on]0<cb*u6FObM>`08>'s^I0Go.GW(5`c>_P5%d^H/5s(i:'!cRDHU)DbNk-4I848Hj
%)pd:_P91<,+\t>hkGrQ70]R#EanhrsKsW\%$bb^Rj/]LV#r*^c--B#A+k5r"?&Oi=!l3bMa6pt56P=-(Th!HLD,Ri"mS"g[N'p[J
%.J&=N2/:nc,\T'!q61Am;oNq"VW^FraG`oh>BUGY6].ed#qb8CPLKoAW8tbc7:o)3]"K<PFXY%0G?q"0ms5jf>@)gC=l!_/nBXXf
%L:&O4C9&pBgnjFWq,?KZq/mqTe-JpJ*"r[uVdm%RL=9$XZih'74.8!0<;\:*]khj@msu^pQ"++46+6Qe.aS#9oYIabh=WF)",M>0
%>Q(/:6$#.?oM]GX[P4)<9("'KQP;H3mWEpB.4+lVUdgrGj-8or0<j]DWt`Y$ERmK5IL&a<>.H`A]HeQM%W^"g]f\eGZCaJ(g95jK
%pQGHKGS=,&n[oS&j:#"JHO;.fq]>DOT""[49[l/]DKDuUfLn9/5]XQ0m0B7KXbZ(V^\4q[5JUH$0*B)6;(l54UXm?S[blG@R*VrA
%Q5^H#qdWJo<e69-oY"t0`/42Y$rZ,h7<a2KR<ZfhrHS#$=3[uS4V4C<^5?Z)(dCFIVW-Icg>.F0>\Q8s'UI;<+<Rh`7?``>hO5<K
%;XFC"rmUF*#dh[mZo3\2"6ftFC6F?c)M&_h19,>pT+0IJE^Tf9G-[TJBEH'_UWm$C3mu;`9Z6';r;eI/k5A^WI=^#+qXpn*,bT0k
%*bX;I0b)c&M/5fsZQZAm(+T'Zd\sh;S-lVD2#i>/\@M!WaZdK\(;L)f@3N/]-\;_<jN`&*B>Xo"^)(IG>>SD:ljae175eFPDk5j_
%=DdG][D<'#h-J-V8<7!'Xj/)^l["=pO/D45Jc1E(Ptn\0R3A5tfa3b*!$6fDqJKAdCs$a=B*(A1G@5mn]3:[KVjSI1`uka8Z[$4g
%7l.f8MtcFKJd9L=O+HBK;/ZN.N'Rt[Skn-<]7bQchONe;@h<*jH/)<f`L8CH^<JdcFsmZ#CmEBH8Y_FhY/@8r(IaE8K&g21M:er@
%JklQX:t'78jfLZur=?j/@=)l7"I<H/&_Q?:hPbp7)ScHSc(bh,B?-rFc^$JX'*3KB"d6tiDX#2FXY9ecr.\V1FV_`dj<[Pbdf]Rk
%\B/OU$[%*d),S`EEhr6]XI/BCnHtJcdA0$AE>65"JDg!+&0+1#U=+huLQoj_4<;4+ZhkKi@!HLpMWaB\^(emXkFP''KBh7B,QL3t
%.KL+G//pSXRqI'[^7M.-BrJ'4J96ZQ;;ks]&G'sgd<Z`C#looZ!?a:2GWdPH7u!l@5U^Ur7ZBD1C@U5+PDEV&OP;5b,a@cS$_pKl
%gUWU2fgR]Bb%9ag0Jn%fTd0[nC.l4m/f+Op<N1"+Wo97F5lf$oP'W;$+96F^:&j7*J3Y#K6';5AV[]#lnEUg(@3NAn"&+(Y#!f,c
%;c.?7V"5=1_FG'=+^mX_3(4h/&m7oH0j+Jo"e4T$Am+&HHEWS;Y$Z)VJU-e+1Fc(&dV+B$Lp^^nLC0Co)9;kg@!U_1T4$%d'!jUD
%d%6Oh(im`Kd4#qeWa)%60\4O5R?@SHHqFUU_U3bZ_8hqaPRMH.pgV?1dS8oA*;SWP)Wq<(N]`^kJ@LBG#R4B"WB8^0>M9:WHOidL
%':PWrUJj'Q;;p7dL3%R-$OI%skYk>a*Og2)N%l/ig#.U://nkU8<p`ch-,/b#K[0I@Qj[e("iR`hXW-79TUM%!?2CN5k^?R0n$U>
%Up:I<"u8J%QBQDU.#A4$!_up$Kn5^>r\u)gJ<\Q,J#YE!l3[0&-6/KGRSfkk05oe\s!6:h?/rB2!Va5Y&d1-G=>DJRDu:0J-:dK@
%+uZGX*@N7jpa=8h%Ot31bu##j5#MNWk"_Q45:o)6?^uO/2$`T)[fZCtl36Vr*rRAW:F-#b8-S;&W"93aH+0V1N/2I(4:"52)sM@8
%54]:8l:\d+erUD7#t]bg\lL>BgO%3)DVqXP.*g1Fk=%p%?Gu6e]Bm(O%9d#.@+DF1/.rD]MM$HO^:UDo_H2Fb;."PE^I=qo"r(7J
%koW4?VA"i`*`bsV6$IPgY>>U%p<8*h'AWfoOM'jXXPj4ok6iQAG`7s9B<94cJaP+TZ*ZHK\nP2#8[.'?CdHY(18iU]Q?plD\g<$4
%O9@/u"GU_gGDnHTA'"<-iDR>L"9R(!q*^=j\8?fDVkTZlW/Tk`_@-140aP%paF6plC43YUMXJR/Y+N7c!T,[9?-m*jHK]e;'0"EY
%+^a2A505J_R8BFhPHRr5Yq1Fk083rq3[(OTYbDH/!iWr5q?/!eZCG6GO)9Fj]/`[N;c.akU#nZ$HH$e\aBYga0]IR->4m/12`XH>
%#j:A-(Qnu?d&/ML(-%co.Z?)!Oh!SlBun_Q^7\J9WtDNl+8)9Il?$.8)DFA79iDp/-uULW$>25E0ZLXc[c062Td1*JQ1pk!&"pt9
%HG$S0\Z7PC$-<9/cV`u\Yrk:M4GsHBe#mE"Ho97)2;X2m?`9QAl6<R3A_A;7Dad;%W-2>LT*"FXD5O6^QjkPt>IYBM]/LkEa"erc
%AcU3i%/;V:rB+#1FkH)IGaj$u(u,Z@1cQ"R/LH<FFd3Z]qZW^p+FW8.fu)>C&P3GZbE9SrP^8q*VeM\EPYZ$NU54a\Cgq;(W]7k>
%?=QVU8Ko@V690TclS&ZJTjX4LX9Os_\ni3>>c9ce(06K)Ob,tb"XH-clGhJmIXepb'7ApS\uTG2@GCjtMC6dt_#]L3(a(,8gq4;f
%n7fD/7(Q0WiN^`\['Nq>U\T@80^P'jKe^&Yb`uNGf?8P-&OMS<a=UIF6J;)]`^lb?`u^+85=,[q#)0sV4eQ+2.%&1[?aTd9#;DuB
%[Jeau]+:D`3cJc(,BuO!]E[2mX+2G'*Jo9BgMpn/KS'U)ZRo)L*SK_tPOQ7+.I&VC%lQc9<?X1s?VPq0(S\#AQ(MDD&Ab+;F9W\4
%PMfMmlA)6Vp]r0$lWijBl9F`.MG@kO*kH9Y430_Dbc$)(UTMH:"R7&cQMRi>*$4[EVSaTX\#(?R`'[BWnl18W7[-YH4W.s>Ns<O>
%6\[^66!`p@T03AE5NH1kcBFCrS8/).%4@U`q]3dbDR)NtPhfpd?e.^LZ^HdAjFuf"FYsDJL>`M;AU<ned6%"(MF-'Ck&IJ>_pRJl
%I;!LeO@a+u)@9U*Srl],`Y26N:`P;<HemL5]l,qfM[qV^B"!<F>A\@egNMt/?i0Ro.@\?S*RSb02SM^F<8>l([>Y$T1j+.>;JaF<
%+s?^f-OqkN*iDV<fMoenjra$fI(o<dml/M=JluDh[-o%>k_/_MV[r%teN_u"ahL0W?Hl5spf9*c_sJ!IN$%Ka]^qTfHp3]iHc1So
%,FCc8K()q,>&FsS><Ao@GEF7A:FYagM@R&(0h"@42JLm-#pPE&n=N;PK\/,g2[:qHf(0#fhB9LWrs7tmd[O%M&:>XB_?R#^jm+[`
%eo(F>LeQiK8%282Ys-oIEUn$7F_bQM%CZ:t"@8u;pMIjI/Mi'Q]&XA]`?!sA.,8u4JhC5njr:*Fruq=4(p^,3NruLM_lB:9$NFNK
%A"Z,2QnS>NUtI`7cI#M]30uUn)\p?up:&B.EM]5:5D@tR&@";=E(<n%-e*1gq@AV/8i$>-/4[M7E@jKABHMnV\F'$9:;#'+!CVFq
%s)_jSjeYV7"t@_8jJAnh$UCo5e>YH?DHt3`>k[860V_6+nWdW"mSHU_rpg^o&Ad6&\GQ]-rU;4*<T*#CfDub"Js`VQKe9='nH,MD
%l4YL!1@52gZKTZ(k_(-f+3V[4n!_i3:6KSn-`$b^QF_9'*f^FQ;MBU67/6EqA]EoEIUD['J,/>)p;uIrnOkk;fho[4HIf.uj1lk`
%\W^fX::I/\IpRJ,=PS4VoRe"lNHdoRLT%rW$X3BQeL=W5G+KF0?o%h'%l70&A0:%BI4ELr+e&@G?M)X8#@U/8o?aq#B#p)XHB4(e
%-mIB?%FQEAD*tXLBUtondc4HhCd&+Z#FU[uk&F$aQX*rK'4IQ&<ObE8a'JEI%VL-Zi,\qr6t8"`l.Q%WSK7V6*%XCq4kbaL0ksr@
%Fkn07T*7NVN8acEYd#,]S3:>-oBcV(!t+HCkA4O9$r&WL.'YKnS]T5$cA-'k`5Z[kRA6s)[%:eF@n_\2h&@j/p*J)u\%8lOc9[T?
%K[H]lBs1rVBB\=$k\XdA2uS2>G1ODV.&:QcB)lFFp_cGOTeU4#/Ho5rNh&-J5tp'j&kBiO>L(a?d0M"X7]:AbS:Fkn0f^-sPG9jI
%*0$W5dB:F`%s##nHZ74#83DmXmUT`'H/545_f#=!Z1<(LSRASL*(.Xa=&erqk<iV<^s!8BA=6h]2r:3'h7["d\hoImk`3h'$or5O
%P^"FJ`jTOlB5TOFif,mqo]RfqXToa+(_`@>nV2p.L,EG5P"':1AW=4Np,6s<`ng)E",R=^qg7s*AW8G=4*Gh9fi]Pp`lV]0F$kcm
%_91.TZV*%4?;RodMJ?@]k(ponr^.+7d,^1>&oT&Fq%aEkkU2`[Bf6I'F*(A43Fdo@q'<lqA3tBfhp>4Z0P4kV&8Q*JD!H%I,4_5F
%X.Fr>"]J19g8h'C6jLbuG="OLG5J+]@t`6#'t+N3+6q^=I!];n(Mloq!%?<O1]>AUB2\R[p#!TGmkm(Y2%mj'SLCa4lugbiCm-^h
%8?@qMB8nkNcFkOZF93&3T`hV0%'T=UjnU-.s0$@?nfQqMJ%#)#SN1/0Hp/pYj)=,s-!#6=mu&&+:@G&kh/YaOGeO$"7dJpqh7cKb
%A?'#9)kIMD"f6*f+T%a+kYnsfCAtQm*8Z'ITck87R67jQUQC[[pAQ&NOgP+8#g$s&Q5LT_R\?G'j'869-R/=."PIT4[kr2]pDG>n
%o?9Vu;!/h1XEI6gCZoh.nPFCfgWFlQ7qW?6p=9C1FW=McNJ+lg&A+94>G-Wl[$.A1K0g/=VVu#nAd+7XGs'W7_3#iq3)5\INY<Gq
%^cBK?(s^g=_=<DWa19.AHk9`q1*O)e?0Q$ga1a#"*\?F-f(VuIgr97h.\STu,hc`AUOWNn^F)bCVV;J;HF5a@koe7(5hmHVY@N]*
%0g-.+D3"h2nM)3!<F]$g+=?MEg%a4!AZ7B*pc(Pt5#-2:+8]f54kH[50g`lM6J_Dr+Xb43DoqU#g&*gj,[2DUpl`1M5-\=VNKDb@
%s+DDuT@:GcbIhm=BuS+-`T'XRn+>7aq8nQX.1#4l6k"AiR8<$FdBIu7;emH4rt0O8M:c&SH8$B,eF^so$_$!$87Q2k-jVq&6e2P^
%ps]\lQ8dMm&rZi.Wh0%Q9#3/kJa<KHkXd]@&ma5c]d^j@oXU]@D77TdeAFF1Han4tHJ-OX_Z>74McMg#"U9*KF'(I/:)QkOEVCHk
%L__o@B[*7e3r=kS!q"BE(((]1$5BhSQ+XJc'CbF$cWQ&af7[Ob;K>#l/Y-5W8;UD-'k!Bgh:+jG!TVbhJQ2H#Rj>s$g`8[:4!:6<
%Rs*G#;"H*E'7i'P`8_RA`QL<L&ht$#<REd9J0)R(lGV5G(d]Z5+JY75%tiAKM.r"VibOOe^4bQd@L30$Fh?ZtD8p60:gi-[AK?Dr
%R2qAcTD40Vob@]$&[+l`lf!2Y9:26ZjF.44#,I<?H;^_mbU.Lf26-so<m*JjjqYU'nYANIn\2U\eRb)?OOfdgNgZW@clsO`1n5Ue
%#V6WX7$sU#OYN<>dR)OSG<"*17_q78m-Q3D-!Lk9j<1V2nQd7kQ!`DD)3Q";4_1:O*cOOoG9<J?4mijF;3''R5p.2ER3)uE>21K#
%)rkMk3!p2$5b9$Y:nRK;(%hai/NJ+WOHSS6gT*9fkAgQ-5=a,Q^R6-^74!."TVA:D4i&55:"9hJ%u?.?*hMK>o)f%gRaPk+7r4ue
%X;cdCOCni0FJ]=K;9@_9K34F(T$9qAa>9G[!dTXZS-\)+/<D4c]V4A,I.EoQbI.bQV&`L\'"F[!_[dhu;l=icoEV;tpQ>,:JIt2)
%OhmrI8aXF%F[*mV/41!.=TTt,UV+S,h&0n6dV/\QBF".SR"ust]h`IiNnQ'pMjpgR$0E'<ZFRX*;XjKc#=L90*.is<jJ^pD'1IR>
%?^,O#:_3.MXE*MDSA:/A4I!7Wi);pa8"ukeS]:Q!OAEg+F*+8b>Z&W$2i"UgIl*:U+n,h&Fg8A1DbELgrYNX3"PuuD.Ns7a[Qn<Y
%8,nr\<e'Cgd;Qu4dj2CF9;'9*'8hUHiaTp(hbVD(YL`5!bYtniX.1\Ro.39^YlP<5KN6A&\nQJ+(N]i7[mktP5V]B]DMB7H<E,Q1
%/tjQR12;DTL2GPt=\X:gE9A9fqH_CkYU3QqQ1;bNnrl^b".<'T"A-\Z$"&$2-gC]^3%RO/6fjM"dTo>mLHPd'!?%>(/tjQP127FM
%#&2hTn[`X#ia>Qm*&>`=HXhWXFtiAhjQ7="eZXBAKV0dV&kZUcUV9-`g=;cS#]W"SO3]\=SoW?=e>9[Y_QKVYQ$#B](,qRg:"TVa
%RZ#;!JnQH/QZWJ[W*b^11X%l$98K'6Rh:s]TDF-`bsEhZXK/:t4`smDHX3s*W=g@McIfB^cbfGc9j*fZP''i*"AqFM[`-3c4&DFg
%HQK-V[KsJfE(u`t5g@c@kST8gX?/]\FU@^%ALVbbQjD<GI]]Dm^,O#qhc@:377AK@]iDPWl)k'+HHM,)S#0,A'4=$>/Xl-@[Y>l7
%?,p?o`El$3fXmk%On'VA\+4@4fLlmM;D0]M>8%m%N!47$pP+PYPBo$TY>$"-;X]L#8.$d+&kHoZB3IeP*1(u&DUIhZ0)";B-mQ%A
%R\Rm3CO7rF6SA-H8s1j&-C3(&0"fVK8G8mJPO(q8SBV9^jrb>+ZL85C?S)(d4A0N4[I(7QTe;gH.Ag4b'OZK.9e3%Lg%Ph;<<hZR
%>iE-io;Q0_h[pKL$(R1I!fCAXrL<FOe!Q<e'mqKEl_:g_Otcr(0)=ANmOC;I5s+<[Gm6%-llPlh,uk(JabYh,J,qP;!Mkl.P4-=]
%O'5*iJM]ZKQW+PfF4e^".M=qEe]Fbc$DEP9&,jE`h4TX5R"1W?7`bbChBXeuo)K*fNnQsA6j\/7>ogoG]JkFY=A3_/<)Q0/nu8/D
%"14A;77/+r2c*0NY=3eU<)SF4=]0rM&gnPS8PeboXm@c?GEenNHk@arnC=lo3+r4U6CrS/1b'e2S%mJ<+9YDYP#/0X_PjT@O3o7D
%Xt4X8p0M>fQ1Lk]A5lJrd<M[j,(eY5WS5"^MEDh!?D9]"WX)Q*f2N>q45:^nC8sgU7kOI*ePdaaB]_Jr-m#8?WMYQG1"#X\.$^%-
%W/@+JI@(r3MT!jmW^8+*Ot/"[*hXM+(huQTPp>ZASVjG'Y,I2d7r)qRf$GC(/<EMfKMkY^7X]id'"PEeA@QOOCLp)m#tOPs;b'cH
%a(R_k+tf]e^-bWT!<Q.3aI\5/ZCAg"NXU:bR'`mfBO.Ee$kG')Ru2=N+E"g9;DU"on1m`@+DME.N,p2'f[]=agP4E.Cl977-OId0
%$RBe=gf!WQP+s_i_ZS+WE*PZ=Qgk*bPZ[ERM*/$k.E(T1DqO>)2bMW9i?DdVTu2Pp%)S+LNJ(24PnfRY-T$W\7\SL3=V[Ac'iq"S
%cK7lW3<gX5=QN/m(CQ4cG!bk!.]fqM;Y*;(*;@=(<H+&r`YX4Jb1KMR;ph=:g"\^C(H;V-a:#%&)Nd6KHB/a,W`X`15pW@0>NTVG
%Bo[p3Fk+4Ed<lR9%)Pgr#'iSVk>GRHZ^KuJ6mTSSBfgM8\gBJ%m'Dq"O'3(?gO<LS+`Q>N(Kr1#*+lfRQM7?NE1-;mL">K1B!QhS
%B3K`OqAu2Aol']?C'uS\oc<G,;W]fI0\"?AM582a8^r*3hY-ia<0_Mn:YZYLhbKnn'`IH_k9-R#r2=9oB#(&!R<HV\DFCJ\!p0VQ
%quN9'6ea!j44/RXYXk2cBMY(3_pY9u3'OqYB+OT.kSe]fm_0N7I5n*_1stm3W6,3.83q*(<Z"8o(jHj=oik?I*X/P,ZZt7abmAs6
%rid?UgTX+6?rFc2OdhJ^LoS-gS=^DR[<i?(:Y6<=7P@rsJWP#M!M\HpB1Q+4rhusD%h9JNK2<-PImk'lS1t2%BQ4\#._q;c-!l4j
%(>G!o#7!E6-6bk&LMo`@ZY7iQqXkM!W4<,eUPNRX$*B[W;=&T[o#&%)o[^@rW;pU!-#G_3RLT<2Cnd?Xq/Crg(7)5cNCKRhhfQQD
%Ub9\T@4p\FJ-sF:,6'p#MT3(^CL6(HJCHUEcqU)TY=DbBd%C:.hu;WImsk#bp[<V/]5PI`mbcq$%bP.)LEq)/D?&q2^]!WYJ+q]9
%J+NA8^\m1HhV\A&n\>%jqlfPM^OH&Uq!$\rIt%6X^\Iu-fjF!aZnENMAa_g3`nnE/YeA5(HhVuqGP_p(]AkP_li-8*kl!;TU\C84
%W.(/h.,NfMH/(l'q;G\rD=m(2WHBL>f6[AA:MI^ZKK3ZqPm$PdF2LLaS`Vct/*TB&PL!jM,$CU,86-M$',=usQCX!\bouQ>;pi)[
%Dd=q?9CkM\LgX(`3BMjA#ktYWfsO(ahn'?J=Ck.2##c]H=Odk@R]R%0+]G[FKJ4aTfn<&i1!,Q7P(Q:Tf'EeNQ(oEE"WNb[`*Xq1
%?<mH4?rM<"dc.F6(Ko!uHn_OF4<#cqb@dE8(TffC\MX^naE2=S:[.:#>)0W;7>.nF6W\rB*?;)W)&!?14G5ljA(L+"@&qn!48"6=
%(4o6La*kGG>d_(Hd@1>e)mscH.dl4:DiVt5cf<p\c^/eI\t6tN,Fh02:&Og+V+*F7J$]SZb,0tF&'Vk?%]S21IQY\X!2q*hNa1!e
%[d9]#V1_D'dnhdATt,E/iC.>0^QWmh7D/-L20qsXEBD#".lU,r6BR0G(E;5n9m/+W";;RjlD!P8G5DE#\-ir!:gWY\&'*%O7&7H'
%c'H3o,:f?@TA_J3<Z:epe=$IR[t&RtcCRp)#\=P-\_'WmBs[[Xrl&2!Ujpo5//ZkHg;K0##jUWMP5T9<'U@X7hFf_C`d"p?[gRFI
%Z[6E(SSE@PcnsIt"J(b5025gJEQs3;9\R@(5\!Vpg'/(,3g/32!UZ?f!4V8HG:CtWa*,%a_1%mA)I:XA7KiVVNZP/;%g^6f.-J36
%aRoR`Bt4p1kMW2'_AE!1s$.LVWfNEug4X*e%.CoUQ%8?b]WDeX5pX;XF@ne%aYHp(#aXRkdDq@$[&s1,C"T"G!h'Zn5_Q]O<$\(D
%90c=RlU;nJBlmSP1&BjnJ.OLPc4Z3A5HYV1rJi.r]XpE#OFZ7@Z*+cO6+".Y%[gWI/6A7RCgJTMos([Y\$F0K;#94PNt#dYb_`np
%<Zi*X1-Hg`p5;,#iK:h]obdtR<N+5_'YOeFI5A?U&aFr0<N*t8C062dl]M1OoWd`=IJf&;HiIN$QgaY9rFYNl+0p+2?f'B4fsfB+
%BA>uF2n)Z_1:PY6+4JtXdDtI+If[%+X7`_+8'm/XQJm5&l=3@h;HJ:J6Uk$aq'aCj?1]isdgq@#L5c#MWfNif]BE`.muFG4<[>%a
%dDq?%]3b+a]GGCb5),,,@sr.pUtlGuk[Sk9fbSuEcUd`'NtlXX>4f(OD"Obl<a]1Ik[V[;'io_kTDl+\@g\e"0g].fbOScJk[XSP
%jo(p7iKV>^+3SoH>kPAf;>L5n+2cWP>kBa1K[a!DKCcmml=5)(0,K$FY?fmO+2bcl(4?U6E!#?8\@7NW5'ELT9D,PC,:C8('b-d#
%eL]K]akN7QnRYZ3cpBGnH"(aGU4COf-@:uHDmVK:^O46aTD[qkYdR*I^6qU'op+dTV:nqAb)U5r;&lL^:31m>Y%50P5o)LpeXqYE
%^Ngq_TBWdi<:#4lZE&j7-Z2qh#pL+2U-lm(Xc?E#`qSE6[&_g_eJhO(]3q[?'t[#$j%72oOn5S^,HGcd<:#IGMG:%Mf\es6WaZdd
%\8kWTbH<9g8B"&hRBijFn5;A$.Q2Op^8fi\bfd"qUM[ZBfL;lPB,-n4;R(3Z*NP'WHQoXCp@TE<>/fWBIRs*6MRs.plPuuL!Q<"^
%71$B#Dncr#)77%fprG;,mfLX.AGAb;.Q-rpgf;#4E-d_*!<Yc?'i%YRiT=-fD<;-'pQu2346-kL:r,(6GpR3,a2>Sm$@L&7aspr:
%CY<Jn@E3rF3oZU885ot[cb?$b5'Ya.JsNh;HUM<ir+@EJja\U5T]pXB<:_=VTMtW296^,Hpm!`dp8ESR=)mJ71a*`cHc)ZGE'\*Q
%f;Onj)3T,4F0_:M6\rA3a4_Iu2XJ&=gX2aQ)YF;!flAX=)It\rl1kj(&`28b[<hNiS-Xc4RR2fr4P3R("E[)\eoc^EKm/N$Rg_4r
%\4n)`UrBt@#aB#W[D7PXj*k61pi87bTH>RkXQ<@*<V!"5<SAXeSMNTBMJ?r3@JOlJ&A&hYE'qiPiU-n,`dR%OEHF5M'ABY:^-:j[
%Q*s%(*j\,D#Wq'c4`huQPP"H4`;2e.gjB`D%!&2sK,J+q5;PW>cEO*R!=^c,a:Xct=tA.U:o4j%/'6d/.4HS-j8+H1L%*):T;L,r
%X*U9p&Rh1a?T2uFrUdZqeF%"^Cu!Jdg)Q`o1\YhfcC6*NU3A&n:sRZM>Zt)Uj=:E=j/jp="7HSpj"hh3=[qX[(b!tk"Zijfgo%u&
%L0^<j<.\g^WgfF6`fZ!/j4Vs_AeZp^e>*^R4:#t.k6=5(j+-im73dQuWM41MS3/j@K4`@um2)r?FmX@^&q4G5>'-=RMBR&ARZL-R
%/@#]2'FpTPN)lF7a%6IN%5ee(Y%C*iDRt7f;JY*[_SSVi]IPki9SME8BtD!HqrnAUbiXU_41aTkG-HGEFRc9GEH=(@$i[XJ=&X;0
%%*1f&>.-bjY;B3n.b:IAF8pcZDi.6LTc7,,Z-t*!iH?[1>?nm)X<WV!:5[Z^<6L^<$62PP=>Z-lck9R5n"_-#44Z#S"ukesR`;'0
%6)R^%C3s*ZlMYOJ5Vc'%#6AqFc-^,J4k<Ipdq8Tl?&tW5c\QL>Q&'._CT-o's.?&hCbaD_T==.^;]#3)ahU$-%_WR#AH.mt=\:3q
%p%6AWBX#g7(.<o_]5$Uc;0f92^GSt:>7?:DeIB+oZ:-`[:?\Bmg5ee_djA8!4['[e_GrP^MOZ:;j`NSE5Nsfrr+4JIIdpdf5QAX1
%s76*ahnT!Tk<JFNci37^^\R#AI/!;P5CE(Y:Ohr)hgbUFDr/5-p022ahu$^YVmkQ2pW`0As4qnV]`%h:J+p^.T[@HBZ_.365Q9i<
%roAP2XdJ[s~>
%AI9_PrivateDataEnd
